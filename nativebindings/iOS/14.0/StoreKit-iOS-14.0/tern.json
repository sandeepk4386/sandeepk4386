{
	"UITableViewCell": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewCell"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewCell"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewCell"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"backgroundView": {
				"!type": "+UIView"
			},
			"textLabel": {
				"!type": "+UILabel"
			},
			"configurationState": {
				"!type": "+UICellConfigurationState"
			},
			"editingAccessoryView": {
				"!type": "+UIView"
			},
			"reuseIdentifier": {
				"!type": "string"
			},
			"separatorInset": {
				"!type": "+Object"
			},
			"editing": {
				"!type": "bool"
			},
			"automaticallyUpdatesBackgroundConfiguration": {
				"!type": "bool"
			},
			"showsReorderControl": {
				"!type": "bool"
			},
			"selected": {
				"!type": "bool"
			},
			"automaticallyUpdatesContentConfiguration": {
				"!type": "bool"
			},
			"highlighted": {
				"!type": "bool"
			},
			"imageView": {
				"!type": "+UIImageView"
			},
			"userInteractionEnabledWhileDragging": {
				"!type": "bool"
			},
			"shouldIndentWhileEditing": {
				"!type": "bool"
			},
			"contentConfiguration": {
				"!type": "+Object"
			},
			"showingDeleteConfirmation": {
				"!type": "bool"
			},
			"backgroundConfiguration": {
				"!type": "+UIBackgroundConfiguration"
			},
			"indentationLevel": {
				"!type": "number"
			},
			"indentationWidth": {
				"!type": "number"
			},
			"focusStyle": {
				"!type": "number"
			},
			"editingStyle": {
				"!type": "number"
			},
			"contentView": {
				"!type": "+UIView"
			},
			"accessoryView": {
				"!type": "+UIView"
			},
			"detailTextLabel": {
				"!type": "+UILabel"
			},
			"selectedBackgroundView": {
				"!type": "+UIView"
			},
			"editingAccessoryType": {
				"!type": "number"
			},
			"selectionStyle": {
				"!type": "number"
			},
			"multipleSelectionBackgroundView": {
				"!type": "+UIView"
			},
			"accessoryType": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"dragStateDidChange": {
				"!type": "fn(dragState: number) -> void"
			},
			"setEditingAnimated": {
				"!type": "fn(editing: bool, animated: bool) -> void"
			},
			"prepareForReuse": {
				"!type": "fn() -> void"
			},
			"initWithStyleReuseIdentifier": {
				"!type": "fn(style: number, reuseIdentifier: string) -> +UITableViewCell"
			},
			"setNeedsUpdateConfiguration": {
				"!type": "fn() -> void"
			},
			"didTransitionToState": {
				"!type": "fn(state: number) -> void"
			},
			"updateConfigurationUsingState": {
				"!type": "fn(state: +UICellConfigurationState) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewCell"
			},
			"setHighlightedAnimated": {
				"!type": "fn(highlighted: bool, animated: bool) -> void"
			},
			"setSelectedAnimated": {
				"!type": "fn(selected: bool, animated: bool) -> void"
			},
			"defaultContentConfiguration": {
				"!type": "fn() -> +UIListContentConfiguration"
			},
			"willTransitionToState": {
				"!type": "fn(state: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewCell"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITableViewCell"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewCell"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINib": {
		"nibWithNibNameBundle": {
			"!type": "fn(name: string, bundleOrNil: +NSBundle) -> +UINib"
		},
		"nibWithDataBundle": {
			"!type": "fn(data: +NSData, bundleOrNil: +NSBundle) -> +UINib"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINib"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINib"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINib"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"instantiateWithOwnerOptions": {
				"!type": "fn(ownerOrNil: +Object, optionsOrNil: +Object) -> +Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINib"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionDataTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDataTask"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDataTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionDataTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionDataTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDataTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDataTask"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDataTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDataTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLinguisticTagger": {
		"enumerateTagsForStringRangeUnitSchemeOptionsOrthographyUsingBlock": {
			"!type": "fn(string: string, range: +Object, unit: number, scheme: string, options: number, orthography: +NSOrthography, block: +Function) -> void"
		},
		"availableTagSchemesForLanguage": {
			"!type": "fn(language: string) -> +Array"
		},
		"availableTagSchemesForUnitLanguage": {
			"!type": "fn(unit: number, language: string) -> +Array"
		},
		"tagsForStringRangeUnitSchemeOptionsOrthographyTokenRanges": {
			"!type": "fn(string: string, range: +Object, unit: number, scheme: string, options: number, orthography: +NSOrthography, tokenRanges: +Object) -> +Array"
		},
		"dominantLanguageForString": {
			"!type": "fn(string: string) -> string"
		},
		"tagForStringAtIndexUnitSchemeOrthographyTokenRange": {
			"!type": "fn(string: string, charIndex: number, unit: number, scheme: string, orthography: +NSOrthography, tokenRange: +Object) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLinguisticTagger"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLinguisticTagger"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLinguisticTagger"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"dominantLanguage": {
				"!type": "string"
			},
			"string": {
				"!type": "string"
			},
			"tagSchemes": {
				"!type": "+Array"
			},
			"initWithTagSchemesOptions": {
				"!type": "fn(tagSchemes: +Array, opts: number) -> +NSLinguisticTagger"
			},
			"setOrthographyRange": {
				"!type": "fn(orthography: +NSOrthography, range: +Object) -> void"
			},
			"tokenRangeAtIndexUnit": {
				"!type": "fn(charIndex: number, unit: number) -> +Object"
			},
			"tagAtIndexUnitSchemeTokenRange": {
				"!type": "fn(charIndex: number, unit: number, scheme: string, tokenRange: +Object) -> string"
			},
			"enumerateTagsInRangeSchemeOptionsUsingBlock": {
				"!type": "fn(range: +Object, tagScheme: string, opts: number, block: +Function) -> void"
			},
			"possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores": {
				"!type": "fn(charIndex: number, tagScheme: string, tokenRange: +Object, sentenceRange: +Object, scores: +Object) -> +Array"
			},
			"orthographyAtIndexEffectiveRange": {
				"!type": "fn(charIndex: number, effectiveRange: +Object) -> +NSOrthography"
			},
			"enumerateTagsInRangeUnitSchemeOptionsUsingBlock": {
				"!type": "fn(range: +Object, unit: number, scheme: string, options: number, block: +Function) -> void"
			},
			"tagAtIndexSchemeTokenRangeSentenceRange": {
				"!type": "fn(charIndex: number, scheme: string, tokenRange: +Object, sentenceRange: +Object) -> string"
			},
			"tagsInRangeSchemeOptionsTokenRanges": {
				"!type": "fn(range: +Object, tagScheme: string, opts: number, tokenRanges: +Object) -> +Array"
			},
			"tagsInRangeUnitSchemeOptionsTokenRanges": {
				"!type": "fn(range: +Object, unit: number, scheme: string, options: number, tokenRanges: +Object) -> +Array"
			},
			"sentenceRangeForRange": {
				"!type": "fn(range: +Object) -> +Object"
			},
			"stringEditedInRangeChangeInLength": {
				"!type": "fn(newRange: +Object, delta: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLinguisticTagger"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitConcentrationMass": {
		"millimolesPerLiterWithGramsPerMole": {
			"!type": "fn(gramsPerMole: number) -> +NSUnitConcentrationMass"
		},
		"gramsPerLiter": {
			"!type": "fn() -> +NSUnitConcentrationMass"
		},
		"milligramsPerDeciliter": {
			"!type": "fn() -> +NSUnitConcentrationMass"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitConcentrationMass"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitConcentrationMass"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitConcentrationMass"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitConcentrationMass"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitConcentrationMass"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitConcentrationMass"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitConcentrationMass"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPreviewInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPreviewInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPreviewInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPreviewInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"view": {
				"!type": "+UIView"
			},
			"initWithView": {
				"!type": "fn(view: +UIView) -> +UIPreviewInteraction"
			},
			"locationInCoordinateSpace": {
				"!type": "fn(coordinateSpace: +Object) -> +Object"
			},
			"cancelInteraction": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDataAsset": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDataAsset"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDataAsset"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDataAsset"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"data": {
				"!type": "+NSData"
			},
			"name": {
				"!type": "string"
			},
			"typeIdentifier": {
				"!type": "string"
			},
			"initWithName": {
				"!type": "fn(name: string) -> +NSDataAsset"
			},
			"initWithNameBundle": {
				"!type": "fn(name: string, bundle: +NSBundle) -> +NSDataAsset"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDataAsset"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnit": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnit"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnit"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnit"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"symbol": {
				"!type": "string"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnit"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnit"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSShadow": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSShadow"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSShadow"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSShadow"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"shadowOffset": {
				"!type": "+Object"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"shadowBlurRadius": {
				"!type": "number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSShadow"
			},
			"jsinit": {
				"!type": "fn() -> +NSShadow"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSShadow"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> string"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> string"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> string"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"jsinit": {
				"!type": "fn() -> string"
			},
			"characterAtIndex": {
				"!type": "fn(index: number) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> string"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKOverlayTransitionContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKOverlayTransitionContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKOverlayTransitionContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKOverlayTransitionContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"startFrame": {
				"!type": "+Object"
			},
			"endFrame": {
				"!type": "+Object"
			},
			"addAnimationBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKOverlayTransitionContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsImageRendererContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsImageRendererContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsImageRendererContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsImageRendererContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentImage": {
				"!type": "+UIImage"
			},
			"CGContext": {
				"!type": "+Object"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"strokeRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"strokeRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"clipToRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsImageRendererContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionReusableView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionReusableView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionReusableView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionReusableView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reuseIdentifier": {
				"!type": "string"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"prepareForReuse": {
				"!type": "fn() -> void"
			},
			"preferredLayoutAttributesFittingAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> +UICollectionViewLayoutAttributes"
			},
			"applyLayoutAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> void"
			},
			"willTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"didTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionReusableView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UICollectionReusableView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionReusableView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitMass": {
		"stones": {
			"!type": "fn() -> +NSUnitMass"
		},
		"metricTons": {
			"!type": "fn() -> +NSUnitMass"
		},
		"nanograms": {
			"!type": "fn() -> +NSUnitMass"
		},
		"grams": {
			"!type": "fn() -> +NSUnitMass"
		},
		"micrograms": {
			"!type": "fn() -> +NSUnitMass"
		},
		"kilograms": {
			"!type": "fn() -> +NSUnitMass"
		},
		"milligrams": {
			"!type": "fn() -> +NSUnitMass"
		},
		"decigrams": {
			"!type": "fn() -> +NSUnitMass"
		},
		"poundsMass": {
			"!type": "fn() -> +NSUnitMass"
		},
		"shortTons": {
			"!type": "fn() -> +NSUnitMass"
		},
		"ounces": {
			"!type": "fn() -> +NSUnitMass"
		},
		"picograms": {
			"!type": "fn() -> +NSUnitMass"
		},
		"carats": {
			"!type": "fn() -> +NSUnitMass"
		},
		"centigrams": {
			"!type": "fn() -> +NSUnitMass"
		},
		"ouncesTroy": {
			"!type": "fn() -> +NSUnitMass"
		},
		"slugs": {
			"!type": "fn() -> +NSUnitMass"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitMass"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitMass"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitMass"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitMass"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitMass"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitMass"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitMass"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKCloudServiceSetupViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKCloudServiceSetupViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKCloudServiceSetupViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKCloudServiceSetupViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"loadWithOptionsCompletionHandler": {
				"!type": "fn(options: +Object, completionHandler: +Function) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +SKCloudServiceSetupViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +SKCloudServiceSetupViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKCloudServiceSetupViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImagePickerController": {
		"isCameraDeviceAvailable": {
			"!type": "fn(cameraDevice: number) -> bool"
		},
		"isFlashAvailableForCameraDevice": {
			"!type": "fn(cameraDevice: number) -> bool"
		},
		"isSourceTypeAvailable": {
			"!type": "fn(sourceType: number) -> bool"
		},
		"availableCaptureModesForCameraDevice": {
			"!type": "fn(cameraDevice: number) -> +Array"
		},
		"availableMediaTypesForSourceType": {
			"!type": "fn(sourceType: number) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImagePickerController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImagePickerController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImagePickerController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cameraCaptureMode": {
				"!type": "number"
			},
			"cameraDevice": {
				"!type": "number"
			},
			"videoQuality": {
				"!type": "number"
			},
			"imageExportPreset": {
				"!type": "number"
			},
			"allowsEditing": {
				"!type": "bool"
			},
			"cameraViewTransform": {
				"!type": "+Object"
			},
			"cameraFlashMode": {
				"!type": "number"
			},
			"allowsImageEditing": {
				"!type": "bool"
			},
			"mediaTypes": {
				"!type": "+Array"
			},
			"showsCameraControls": {
				"!type": "bool"
			},
			"cameraOverlayView": {
				"!type": "+UIView"
			},
			"videoMaximumDuration": {
				"!type": "number"
			},
			"sourceType": {
				"!type": "number"
			},
			"videoExportPreset": {
				"!type": "string"
			},
			"delegate": {
				"!type": "+Object"
			},
			"barHideOnSwipeGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"viewControllers": {
				"!type": "+Array"
			},
			"topViewController": {
				"!type": "+UIViewController"
			},
			"hidesBarsOnSwipe": {
				"!type": "bool"
			},
			"hidesBarsWhenKeyboardAppears": {
				"!type": "bool"
			},
			"navigationBarHidden": {
				"!type": "bool"
			},
			"barHideOnTapGestureRecognizer": {
				"!type": "+UITapGestureRecognizer"
			},
			"toolbarHidden": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"hidesBarsWhenVerticallyCompact": {
				"!type": "bool"
			},
			"visibleViewController": {
				"!type": "+UIViewController"
			},
			"interactivePopGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"navigationBar": {
				"!type": "+UINavigationBar"
			},
			"toolbar": {
				"!type": "+UIToolbar"
			},
			"hidesBarsOnTap": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"startVideoCapture": {
				"!type": "fn() -> bool"
			},
			"stopVideoCapture": {
				"!type": "fn() -> void"
			},
			"takePicture": {
				"!type": "fn() -> void"
			},
			"initWithNavigationBarClassToolbarClass": {
				"!type": "fn(navigationBarClass: +Object, toolbarClass: +Object) -> +UIImagePickerController"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIImagePickerController"
			},
			"popViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +UIViewController"
			},
			"pushViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> void"
			},
			"popToViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> +Array"
			},
			"initWithRootViewController": {
				"!type": "fn(rootViewController: +UIViewController) -> +UIImagePickerController"
			},
			"initWithCoder": {
				"!type": "fn(aDecoder: +NSCoder) -> +UIImagePickerController"
			},
			"setViewControllersAnimated": {
				"!type": "fn(viewControllers: +Array, animated: bool) -> void"
			},
			"popToRootViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +Array"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"setToolbarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"setNavigationBarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIImagePickerController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIImagePickerController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImagePickerController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSStream": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSStream"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSStream"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSStream"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"streamError": {
				"!type": "+NSError"
			},
			"streamStatus": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"setPropertyForKey": {
				"!type": "fn(property: +Object, key: string) -> bool"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"propertyForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"close": {
				"!type": "fn() -> void"
			},
			"open": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSStream"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMenuController": {
		"sharedMenuController": {
			"!type": "fn() -> +UIMenuController"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMenuController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMenuController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMenuController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"menuVisible": {
				"!type": "bool"
			},
			"arrowDirection": {
				"!type": "number"
			},
			"menuItems": {
				"!type": "+Array"
			},
			"menuFrame": {
				"!type": "+Object"
			},
			"showMenuFromViewRect": {
				"!type": "fn(targetView: +UIView, targetRect: +Object) -> void"
			},
			"hideMenu": {
				"!type": "fn() -> void"
			},
			"setMenuVisibleAnimated": {
				"!type": "fn(menuVisible: bool, animated: bool) -> void"
			},
			"update": {
				"!type": "fn() -> void"
			},
			"setTargetRectInView": {
				"!type": "fn(targetRect: +Object, targetView: +UIView) -> void"
			},
			"setMenuVisible": {
				"!type": "fn(menuVisible: bool) -> void"
			},
			"hideMenuFromView": {
				"!type": "fn(targetView: +UIView) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMenuController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIVisualEffectView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIVisualEffectView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIVisualEffectView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIVisualEffectView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"contentView": {
				"!type": "+UIView"
			},
			"effect": {
				"!type": "+UIVisualEffect"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithEffect": {
				"!type": "fn(effect: +UIVisualEffect) -> +UIVisualEffectView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIVisualEffectView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIVisualEffectView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIVisualEffectView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIVisualEffectView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIWarpKernel": {
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIWarpKernel"
		},
		"kernelNamesFromMetalLibraryData": {
			"!type": "fn(data: +NSData) -> +Array"
		},
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIWarpKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError": {
			"!type": "fn(name: string, data: +NSData, format: number, error: +Object) -> +CIWarpKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataError": {
			"!type": "fn(name: string, data: +NSData, error: +Object) -> +CIWarpKernel"
		},
		"kernelsWithString": {
			"!type": "fn(string: string) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIWarpKernel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIWarpKernel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIWarpKernel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"applyWithExtentRoiCallbackInputImageArguments": {
				"!type": "fn(extent: +Object, callback: +Function, image: +CIImage, args: +Array) -> +CIImage"
			},
			"applyWithExtentRoiCallbackArguments": {
				"!type": "fn(extent: +Object, callback: +Function, args: +Array) -> +CIImage"
			},
			"setROISelector": {
				"!type": "fn(method: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIWarpKernel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIResponder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIResponder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIResponder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIResponder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIResponder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISpringTimingParameters": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISpringTimingParameters"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISpringTimingParameters"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISpringTimingParameters"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initialVelocity": {
				"!type": "+Object"
			},
			"initWithDampingRatio": {
				"!type": "fn(ratio: number) -> +UISpringTimingParameters"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISpringTimingParameters"
			},
			"initWithDampingRatioInitialVelocity": {
				"!type": "fn(ratio: number, velocity: +Object) -> +UISpringTimingParameters"
			},
			"jsinit": {
				"!type": "fn() -> +UISpringTimingParameters"
			},
			"initWithMassStiffnessDampingInitialVelocity": {
				"!type": "fn(mass: number, stiffness: number, damping: number, velocity: +Object) -> +UISpringTimingParameters"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISpringTimingParameters"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPasteboard": {
		"pasteboardWithNameCreate": {
			"!type": "fn(pasteboardName: string, create: bool) -> +UIPasteboard"
		},
		"generalPasteboard": {
			"!type": "fn() -> +UIPasteboard"
		},
		"removePasteboardWithName": {
			"!type": "fn(pasteboardName: string) -> void"
		},
		"pasteboardWithUniqueName": {
			"!type": "fn() -> +UIPasteboard"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPasteboard"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPasteboard"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPasteboard"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"hasStrings": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"changeCount": {
				"!type": "number"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"items": {
				"!type": "+Array"
			},
			"image": {
				"!type": "+UIImage"
			},
			"persistent": {
				"!type": "bool"
			},
			"hasURLs": {
				"!type": "bool"
			},
			"itemProviders": {
				"!type": "+Array"
			},
			"color": {
				"!type": "+UIColor"
			},
			"colors": {
				"!type": "+Array"
			},
			"hasColors": {
				"!type": "bool"
			},
			"pasteboardTypes": {
				"!type": "+Array"
			},
			"URLs": {
				"!type": "+Array"
			},
			"images": {
				"!type": "+Array"
			},
			"hasImages": {
				"!type": "bool"
			},
			"strings": {
				"!type": "+Array"
			},
			"string": {
				"!type": "string"
			},
			"numberOfItems": {
				"!type": "number"
			},
			"dataForPasteboardTypeInItemSet": {
				"!type": "fn(pasteboardType: string, itemSet: +NSIndexSet) -> +Array"
			},
			"setDataForPasteboardType": {
				"!type": "fn(data: +NSData, pasteboardType: string) -> void"
			},
			"itemSetWithPasteboardTypes": {
				"!type": "fn(pasteboardTypes: +Array) -> +NSIndexSet"
			},
			"pasteboardTypesForItemSet": {
				"!type": "fn(itemSet: +NSIndexSet) -> +Array"
			},
			"setPersistent": {
				"!type": "fn(persistent: bool) -> void"
			},
			"setValueForPasteboardType": {
				"!type": "fn(value: +Object, pasteboardType: string) -> void"
			},
			"setObjects": {
				"!type": "fn(objects: +Array) -> void"
			},
			"addItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"detectValuesForPatternsInItemSetCompletionHandler": {
				"!type": "fn(patterns: +NSSet, itemSet: +NSIndexSet, completionHandler: +Function) -> void"
			},
			"valuesForPasteboardTypeInItemSet": {
				"!type": "fn(pasteboardType: string, itemSet: +NSIndexSet) -> +Array"
			},
			"containsPasteboardTypes": {
				"!type": "fn(pasteboardTypes: +Array) -> bool"
			},
			"setItemsOptions": {
				"!type": "fn(items: +Array, options: +Object) -> void"
			},
			"valueForPasteboardType": {
				"!type": "fn(pasteboardType: string) -> +Object"
			},
			"detectPatternsForPatternsCompletionHandler": {
				"!type": "fn(patterns: +NSSet, completionHandler: +Function) -> void"
			},
			"detectValuesForPatternsCompletionHandler": {
				"!type": "fn(patterns: +NSSet, completionHandler: +Function) -> void"
			},
			"setItemProvidersLocalOnlyExpirationDate": {
				"!type": "fn(itemProviders: +Array, localOnly: bool, expirationDate: +Date) -> void"
			},
			"detectPatternsForPatternsInItemSetCompletionHandler": {
				"!type": "fn(patterns: +NSSet, itemSet: +NSIndexSet, completionHandler: +Function) -> void"
			},
			"dataForPasteboardType": {
				"!type": "fn(pasteboardType: string) -> +NSData"
			},
			"setObjectsLocalOnlyExpirationDate": {
				"!type": "fn(objects: +Array, localOnly: bool, expirationDate: +Date) -> void"
			},
			"containsPasteboardTypesInItemSet": {
				"!type": "fn(pasteboardTypes: +Array, itemSet: +NSIndexSet) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPasteboard"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrintInfo": {
		"printInfo": {
			"!type": "fn() -> +UIPrintInfo"
		},
		"printInfoWithDictionary": {
			"!type": "fn(dictionary: +Object) -> +UIPrintInfo"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrintInfo"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrintInfo"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrintInfo"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"printerID": {
				"!type": "string"
			},
			"orientation": {
				"!type": "number"
			},
			"duplex": {
				"!type": "number"
			},
			"dictionaryRepresentation": {
				"!type": "+Object"
			},
			"outputType": {
				"!type": "number"
			},
			"jobName": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPrintInfo"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrintInfo"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitDispersion": {
		"partsPerMillion": {
			"!type": "fn() -> +NSUnitDispersion"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitDispersion"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitDispersion"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitDispersion"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitDispersion"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitDispersion"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitDispersion"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitDispersion"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIKeyCommand": {
		"commandWithTitleImageActionInputModifierFlagsPropertyList": {
			"!type": "fn(title: string, image: +UIImage, action: string, input: string, modifierFlags: number, propertyList: +Object) -> +UIKeyCommand"
		},
		"keyCommandWithInputModifierFlagsAction": {
			"!type": "fn(input: string, modifierFlags: number, action: string) -> +UIKeyCommand"
		},
		"commandWithTitleImageActionInputModifierFlagsPropertyListAlternates": {
			"!type": "fn(title: string, image: +UIImage, action: string, input: string, modifierFlags: number, propertyList: +Object, alternates: +Array) -> +UIKeyCommand"
		},
		"keyCommandWithInputModifierFlagsActionDiscoverabilityTitle": {
			"!type": "fn(input: string, modifierFlags: number, action: string, discoverabilityTitle: string) -> +UIKeyCommand"
		},
		"commandWithTitleImageActionPropertyList": {
			"!type": "fn(title: string, image: +UIImage, action: string, propertyList: +Object) -> +UIKeyCommand"
		},
		"commandWithTitleImageActionPropertyListAlternates": {
			"!type": "fn(title: string, image: +UIImage, action: string, propertyList: +Object, alternates: +Array) -> +UIKeyCommand"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIKeyCommand"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIKeyCommand"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIKeyCommand"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"discoverabilityTitle": {
				"!type": "string"
			},
			"title": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"propertyList": {
				"!type": "+Object"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"attributes": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "string"
			},
			"input": {
				"!type": "string"
			},
			"alternates": {
				"!type": "+Array"
			},
			"discoverabilityTitle": {
				"!type": "string"
			},
			"title": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"propertyList": {
				"!type": "+Object"
			},
			"state": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "string"
			},
			"attributes": {
				"!type": "number"
			},
			"alternates": {
				"!type": "+Array"
			},
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIKeyCommand"
			},
			"jsinit": {
				"!type": "fn() -> +UIKeyCommand"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIKeyCommand"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIKeyCommand"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIKeyCommand"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSession": {
		"sharedSession": {
			"!type": "fn() -> +NSURLSession"
		},
		"sessionWithConfigurationDelegateDelegateQueue": {
			"!type": "fn(configuration: +NSURLSessionConfiguration, delegate: +Object, queue: +NSOperationQueue) -> +NSURLSession"
		},
		"sessionWithConfiguration": {
			"!type": "fn(configuration: +NSURLSessionConfiguration) -> +NSURLSession"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSession"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSession"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSession"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSession"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"sessionDescription": {
				"!type": "string"
			},
			"configuration": {
				"!type": "+NSURLSessionConfiguration"
			},
			"delegate": {
				"!type": "+Object"
			},
			"delegateQueue": {
				"!type": "+NSOperationQueue"
			},
			"dataTaskWithRequest": {
				"!type": "fn(request: +NSURLRequest) -> +NSURLSessionDataTask"
			},
			"streamTaskWithNetService": {
				"!type": "fn(service: +NSNetService) -> +NSURLSessionStreamTask"
			},
			"downloadTaskWithResumeData": {
				"!type": "fn(resumeData: +NSData) -> +NSURLSessionDownloadTask"
			},
			"uploadTaskWithStreamedRequest": {
				"!type": "fn(request: +NSURLRequest) -> +NSURLSessionUploadTask"
			},
			"flushWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"getTasksWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"getAllTasksWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSession"
			},
			"invalidateAndCancel": {
				"!type": "fn() -> void"
			},
			"uploadTaskWithRequestFromFile": {
				"!type": "fn(request: +NSURLRequest, fileURL: +NSURL) -> +NSURLSessionUploadTask"
			},
			"downloadTaskWithURL": {
				"!type": "fn(url: +NSURL) -> +NSURLSessionDownloadTask"
			},
			"streamTaskWithHostNamePort": {
				"!type": "fn(hostname: string, port: number) -> +NSURLSessionStreamTask"
			},
			"resetWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"webSocketTaskWithURLProtocols": {
				"!type": "fn(url: +NSURL, protocols: +Array) -> +NSURLSessionWebSocketTask"
			},
			"uploadTaskWithRequestFromData": {
				"!type": "fn(request: +NSURLRequest, bodyData: +NSData) -> +NSURLSessionUploadTask"
			},
			"finishTasksAndInvalidate": {
				"!type": "fn() -> void"
			},
			"downloadTaskWithRequest": {
				"!type": "fn(request: +NSURLRequest) -> +NSURLSessionDownloadTask"
			},
			"dataTaskWithURL": {
				"!type": "fn(url: +NSURL) -> +NSURLSessionDataTask"
			},
			"webSocketTaskWithRequest": {
				"!type": "fn(request: +NSURLRequest) -> +NSURLSessionWebSocketTask"
			},
			"webSocketTaskWithURL": {
				"!type": "fn(url: +NSURL) -> +NSURLSessionWebSocketTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSession"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMeasurementFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMeasurementFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMeasurementFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMeasurementFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unitStyle": {
				"!type": "number"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"unitOptions": {
				"!type": "number"
			},
			"numberFormatter": {
				"!type": "+NSNumberFormatter"
			},
			"stringFromMeasurement": {
				"!type": "fn(measurement: +NSMeasurement) -> string"
			},
			"stringFromUnit": {
				"!type": "fn(unit: +NSUnit) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMeasurementFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableCharacterSet": {
		"newlineCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"letterCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"nonBaseCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"symbolCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"characterSetWithBitmapRepresentation": {
			"!type": "fn(data: +NSData) -> +NSMutableCharacterSet"
		},
		"alphanumericCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"uppercaseLetterCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"whitespaceCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"lowercaseLetterCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"punctuationCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"whitespaceAndNewlineCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"controlCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"characterSetWithCharactersInString": {
			"!type": "fn(aString: string) -> +NSMutableCharacterSet"
		},
		"capitalizedLetterCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"characterSetWithContentsOfFile": {
			"!type": "fn(fName: string) -> +NSMutableCharacterSet"
		},
		"illegalCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"decomposableCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"characterSetWithRange": {
			"!type": "fn(aRange: +Object) -> +NSMutableCharacterSet"
		},
		"decimalDigitCharacterSet": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"punctuationCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"letterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"nonBaseCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"symbolCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"alphanumericCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"uppercaseLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"whitespaceCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"lowercaseLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithBitmapRepresentation": {
			"!type": "fn(data: +NSData) -> +NSCharacterSet"
		},
		"whitespaceAndNewlineCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"controlCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"newlineCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithCharactersInString": {
			"!type": "fn(aString: string) -> +NSCharacterSet"
		},
		"capitalizedLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithContentsOfFile": {
			"!type": "fn(fName: string) -> +NSCharacterSet"
		},
		"characterSetWithRange": {
			"!type": "fn(aRange: +Object) -> +NSCharacterSet"
		},
		"decomposableCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"illegalCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"decimalDigitCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableCharacterSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableCharacterSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invertedSet": {
				"!type": "+NSCharacterSet"
			},
			"bitmapRepresentation": {
				"!type": "+NSData"
			},
			"formIntersectionWithCharacterSet": {
				"!type": "fn(otherSet: +NSCharacterSet) -> void"
			},
			"removeCharactersInRange": {
				"!type": "fn(aRange: +Object) -> void"
			},
			"formUnionWithCharacterSet": {
				"!type": "fn(otherSet: +NSCharacterSet) -> void"
			},
			"removeCharactersInString": {
				"!type": "fn(aString: string) -> void"
			},
			"addCharactersInRange": {
				"!type": "fn(aRange: +Object) -> void"
			},
			"invert": {
				"!type": "fn() -> void"
			},
			"addCharactersInString": {
				"!type": "fn(aString: string) -> void"
			},
			"isSupersetOfSet": {
				"!type": "fn(theOtherSet: +NSCharacterSet) -> bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableCharacterSet"
			},
			"characterIsMember": {
				"!type": "fn(aCharacter: number) -> bool"
			},
			"longCharacterIsMember": {
				"!type": "fn(theLongChar: number) -> bool"
			},
			"hasMemberInPlane": {
				"!type": "fn(thePlane: number) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableCharacterSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityElement": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityElement"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityElement"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityElement"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"accessibilityTraits": {
				"!type": "number"
			},
			"isAccessibilityElement": {
				"!type": "bool"
			},
			"accessibilityHint": {
				"!type": "string"
			},
			"accessibilityFrameInContainerSpace": {
				"!type": "+Object"
			},
			"accessibilityLabel": {
				"!type": "string"
			},
			"accessibilityValue": {
				"!type": "string"
			},
			"accessibilityContainer": {
				"!type": "+Object"
			},
			"accessibilityFrame": {
				"!type": "+Object"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithAccessibilityContainer": {
				"!type": "fn(container: +Object) -> +UIAccessibilityElement"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityElement"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStoryboard": {
		"storyboardWithNameBundle": {
			"!type": "fn(name: string, storyboardBundleOrNil: +NSBundle) -> +UIStoryboard"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStoryboard"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStoryboard"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStoryboard"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"instantiateViewControllerWithIdentifier": {
				"!type": "fn(identifier: string) -> +UIViewController"
			},
			"instantiateInitialViewControllerWithCreator": {
				"!type": "fn(block: +Function) -> +UIViewController"
			},
			"instantiateViewControllerWithIdentifierCreator": {
				"!type": "fn(identifier: string, block: +Function) -> +UIViewController"
			},
			"instantiateInitialViewController": {
				"!type": "fn() -> +UIViewController"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStoryboard"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIKey": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIKey"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIKey"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIKey"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"charactersIgnoringModifiers": {
				"!type": "string"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"characters": {
				"!type": "string"
			},
			"keyCode": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIKey"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAEmitterCell": {
		"emitterCell": {
			"!type": "fn() -> +CAEmitterCell"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAEmitterCell"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAEmitterCell"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAEmitterCell"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"greenSpeed": {
				"!type": "number"
			},
			"blueSpeed": {
				"!type": "number"
			},
			"color": {
				"!type": "+Object"
			},
			"redRange": {
				"!type": "number"
			},
			"scaleRange": {
				"!type": "number"
			},
			"birthRate": {
				"!type": "number"
			},
			"greenRange": {
				"!type": "number"
			},
			"velocityRange": {
				"!type": "number"
			},
			"lifetime": {
				"!type": "number"
			},
			"contents": {
				"!type": "+Object"
			},
			"emissionRange": {
				"!type": "number"
			},
			"blueRange": {
				"!type": "number"
			},
			"scale": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"xAcceleration": {
				"!type": "number"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"yAcceleration": {
				"!type": "number"
			},
			"emissionLatitude": {
				"!type": "number"
			},
			"contentsScale": {
				"!type": "number"
			},
			"spinRange": {
				"!type": "number"
			},
			"emitterCells": {
				"!type": "+Array"
			},
			"style": {
				"!type": "+Object"
			},
			"redSpeed": {
				"!type": "number"
			},
			"zAcceleration": {
				"!type": "number"
			},
			"emissionLongitude": {
				"!type": "number"
			},
			"spin": {
				"!type": "number"
			},
			"alphaSpeed": {
				"!type": "number"
			},
			"name": {
				"!type": "string"
			},
			"alphaRange": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"lifetimeRange": {
				"!type": "number"
			},
			"velocity": {
				"!type": "number"
			},
			"scaleSpeed": {
				"!type": "number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAEmitterCell"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPushBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPushBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPushBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPushBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"angle": {
				"!type": "number"
			},
			"items": {
				"!type": "+Array"
			},
			"pushDirection": {
				"!type": "+Object"
			},
			"magnitude": {
				"!type": "number"
			},
			"mode": {
				"!type": "number"
			},
			"active": {
				"!type": "bool"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"setTargetOffsetFromCenterForItem": {
				"!type": "fn(o: +Object, item: +Object) -> void"
			},
			"removeItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"targetOffsetFromCenterForItem": {
				"!type": "fn(item: +Object) -> +Object"
			},
			"setAngleMagnitude": {
				"!type": "fn(angle: number, magnitude: number) -> void"
			},
			"addItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"initWithItemsMode": {
				"!type": "fn(items: +Array, mode: number) -> +UIPushBehavior"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPushBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextSelectionRect": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextSelectionRect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextSelectionRect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextSelectionRect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"containsEnd": {
				"!type": "bool"
			},
			"writingDirection": {
				"!type": "number"
			},
			"containsStart": {
				"!type": "bool"
			},
			"isVertical": {
				"!type": "bool"
			},
			"rect": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextSelectionRect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSListFormatter": {
		"localizedStringByJoiningStrings": {
			"!type": "fn(strings: +Array) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSListFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSListFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSListFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"locale": {
				"!type": "+NSLocale"
			},
			"itemFormatter": {
				"!type": "+NSFormatter"
			},
			"stringFromItems": {
				"!type": "fn(items: +Array) -> string"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSListFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNetService": {
		"dataFromTXTRecordDictionary": {
			"!type": "fn(txtDictionary: +Object) -> +NSData"
		},
		"dictionaryFromTXTRecordData": {
			"!type": "fn(txtData: +NSData) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNetService"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNetService"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNetService"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"domain": {
				"!type": "string"
			},
			"name": {
				"!type": "string"
			},
			"includesPeerToPeer": {
				"!type": "bool"
			},
			"hostName": {
				"!type": "string"
			},
			"delegate": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"port": {
				"!type": "number"
			},
			"addresses": {
				"!type": "+Array"
			},
			"stopMonitoring": {
				"!type": "fn() -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"startMonitoring": {
				"!type": "fn() -> void"
			},
			"resolveWithTimeout": {
				"!type": "fn(timeout: number) -> void"
			},
			"publishWithOptions": {
				"!type": "fn(options: number) -> void"
			},
			"getInputStreamOutputStream": {
				"!type": "fn(inputStream: +Object, outputStream: +Object) -> bool"
			},
			"stop": {
				"!type": "fn() -> void"
			},
			"initWithDomainTypeName": {
				"!type": "fn(domain: string, type: string, name: string) -> +NSNetService"
			},
			"TXTRecordData": {
				"!type": "fn() -> +NSData"
			},
			"resolve": {
				"!type": "fn() -> void"
			},
			"initWithDomainTypeNamePort": {
				"!type": "fn(domain: string, type: string, name: string, port: number) -> +NSNetService"
			},
			"setTXTRecordData": {
				"!type": "fn(recordData: +NSData) -> bool"
			},
			"publish": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNetService"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewSupplementaryRegistration": {
		"registrationWithSupplementaryNibElementKindConfigurationHandler": {
			"!type": "fn(supplementaryNib: +UINib, elementKind: string, configurationHandler: +Function) -> +UICollectionViewSupplementaryRegistration"
		},
		"registrationWithSupplementaryClassElementKindConfigurationHandler": {
			"!type": "fn(supplementaryClass: +Object, elementKind: string, configurationHandler: +Function) -> +UICollectionViewSupplementaryRegistration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewSupplementaryRegistration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewSupplementaryRegistration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewSupplementaryRegistration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jssupplementaryClass": {
				"!type": "+Object"
			},
			"jsconfigurationHandler": {
				"!type": "+Function"
			},
			"supplementaryNib": {
				"!type": "+UINib"
			},
			"elementKind": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewSupplementaryRegistration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSSimpleCString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSSimpleCString"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSSimpleCString"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSSimpleCString"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"jsinit": {
				"!type": "fn() -> +NSSimpleCString"
			},
			"characterAtIndex": {
				"!type": "fn(index: number) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSSimpleCString"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSSimpleCString"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSBundleResourceRequest": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSBundleResourceRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSBundleResourceRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSBundleResourceRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"progress": {
				"!type": "+NSProgress"
			},
			"loadingPriority": {
				"!type": "number"
			},
			"bundle": {
				"!type": "+NSBundle"
			},
			"tags": {
				"!type": "+NSSet"
			},
			"initWithTags": {
				"!type": "fn(tags: +NSSet) -> +NSBundleResourceRequest"
			},
			"initWithTagsBundle": {
				"!type": "fn(tags: +NSSet, bundle: +NSBundle) -> +NSBundleResourceRequest"
			},
			"conditionallyBeginAccessingResourcesWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"endAccessingResources": {
				"!type": "fn() -> void"
			},
			"beginAccessingResourcesWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSBundleResourceRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarButtonItemAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarButtonItemAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarButtonItemAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarButtonItemAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"highlighted": {
				"!type": "+UIBarButtonItemStateAppearance"
			},
			"disabled": {
				"!type": "+UIBarButtonItemStateAppearance"
			},
			"focused": {
				"!type": "+UIBarButtonItemStateAppearance"
			},
			"normal": {
				"!type": "+UIBarButtonItemStateAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarButtonItemAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItemAppearance"
			},
			"initWithStyle": {
				"!type": "fn(style: number) -> +UIBarButtonItemAppearance"
			},
			"jscopy": {
				"!type": "fn() -> +UIBarButtonItemAppearance"
			},
			"configureWithDefaultForStyle": {
				"!type": "fn(style: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItemAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAShapeLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAShapeLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAShapeLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAShapeLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAShapeLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"strokeEnd": {
				"!type": "number"
			},
			"lineWidth": {
				"!type": "number"
			},
			"fillRule": {
				"!type": "string"
			},
			"lineCap": {
				"!type": "string"
			},
			"miterLimit": {
				"!type": "number"
			},
			"lineDashPattern": {
				"!type": "+Array"
			},
			"fillColor": {
				"!type": "+Object"
			},
			"lineDashPhase": {
				"!type": "number"
			},
			"path": {
				"!type": "+Object"
			},
			"strokeColor": {
				"!type": "+Object"
			},
			"strokeStart": {
				"!type": "number"
			},
			"lineJoin": {
				"!type": "string"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAShapeLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAShapeLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAShapeLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAShapeLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAShapeLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileVersion": {
		"otherVersionsOfItemAtURL": {
			"!type": "fn(url: +NSURL) -> +Array"
		},
		"versionOfItemAtURLForPersistentIdentifier": {
			"!type": "fn(url: +NSURL, persistentIdentifier: +Object) -> +NSFileVersion"
		},
		"unresolvedConflictVersionsOfItemAtURL": {
			"!type": "fn(url: +NSURL) -> +Array"
		},
		"getNonlocalVersionsOfItemAtURLCompletionHandler": {
			"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
		},
		"removeOtherVersionsOfItemAtURLError": {
			"!type": "fn(url: +NSURL, outError: +Object) -> bool"
		},
		"currentVersionOfItemAtURL": {
			"!type": "fn(url: +NSURL) -> +NSFileVersion"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileVersion"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileVersion"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileVersion"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"resolved": {
				"!type": "bool"
			},
			"hasThumbnail": {
				"!type": "bool"
			},
			"originatorNameComponents": {
				"!type": "+NSPersonNameComponents"
			},
			"hasLocalContents": {
				"!type": "bool"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"persistentIdentifier": {
				"!type": "+Object"
			},
			"localizedName": {
				"!type": "string"
			},
			"localizedNameOfSavingComputer": {
				"!type": "string"
			},
			"modificationDate": {
				"!type": "+Date"
			},
			"conflict": {
				"!type": "bool"
			},
			"removeAndReturnError": {
				"!type": "fn(outError: +Object) -> bool"
			},
			"replaceItemAtURLOptionsError": {
				"!type": "fn(url: +NSURL, options: number, error: +Object) -> +NSURL"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileVersion"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIWindowSceneDestructionRequestOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIWindowSceneDestructionRequestOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIWindowSceneDestructionRequestOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIWindowSceneDestructionRequestOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"windowDismissalAnimation": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIWindowSceneDestructionRequestOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIFilter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIFilter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIFilter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIFilter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attributes": {
				"!type": "+Object"
			},
			"inputKeys": {
				"!type": "+Array"
			},
			"outputKeys": {
				"!type": "+Array"
			},
			"outputImage": {
				"!type": "+CIImage"
			},
			"name": {
				"!type": "string"
			},
			"name": {
				"!type": "fn() -> string"
			},
			"setName": {
				"!type": "fn(aString: string) -> void"
			},
			"setDefaults": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIFilter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKOverlay": {
		"dismissOverlayInScene": {
			"!type": "fn(scene: +UIWindowScene) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKOverlay"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKOverlay"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKOverlay"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"configuration": {
				"!type": "+SKOverlayConfiguration"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithConfiguration": {
				"!type": "fn(configuration: +SKOverlayConfiguration) -> +SKOverlay"
			},
			"presentInScene": {
				"!type": "fn(scene: +UIWindowScene) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKOverlay"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScribbleInteraction": {
		"isPencilInputExpected": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScribbleInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScribbleInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScribbleInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"handlingWriting": {
				"!type": "bool"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIScribbleInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScribbleInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerLockState": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerLockState"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerLockState"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerLockState"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"locked": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerLockState"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProductSubscriptionPeriod": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProductSubscriptionPeriod"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProductSubscriptionPeriod"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProductSubscriptionPeriod"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfUnits": {
				"!type": "number"
			},
			"unit": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProductSubscriptionPeriod"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIReferenceLibraryViewController": {
		"dictionaryHasDefinitionForTerm": {
			"!type": "fn(term: string) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIReferenceLibraryViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIReferenceLibraryViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIReferenceLibraryViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithTerm": {
				"!type": "fn(term: string) -> +UIReferenceLibraryViewController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIReferenceLibraryViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIReferenceLibraryViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIReferenceLibraryViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIReferenceLibraryViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSByteCountFormatter": {
		"stringFromMeasurementCountStyle": {
			"!type": "fn(measurement: +NSMeasurement, countStyle: number) -> string"
		},
		"stringFromByteCountCountStyle": {
			"!type": "fn(byteCount: number, countStyle: number) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSByteCountFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSByteCountFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSByteCountFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowedUnits": {
				"!type": "number"
			},
			"includesCount": {
				"!type": "bool"
			},
			"includesActualByteCount": {
				"!type": "bool"
			},
			"includesUnit": {
				"!type": "bool"
			},
			"zeroPadsFractionDigits": {
				"!type": "bool"
			},
			"allowsNonnumericFormatting": {
				"!type": "bool"
			},
			"countStyle": {
				"!type": "number"
			},
			"formattingContext": {
				"!type": "number"
			},
			"adaptive": {
				"!type": "bool"
			},
			"stringFromByteCount": {
				"!type": "fn(byteCount: number) -> string"
			},
			"stringFromMeasurement": {
				"!type": "fn(measurement: +NSMeasurement) -> string"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSByteCountFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAAnimation": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CAAnimation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAAnimation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAAnimation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAAnimation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAAnimation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActionSheet": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActionSheet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActionSheet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActionSheet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cancelButtonIndex": {
				"!type": "number"
			},
			"title": {
				"!type": "string"
			},
			"firstOtherButtonIndex": {
				"!type": "number"
			},
			"numberOfButtons": {
				"!type": "number"
			},
			"visible": {
				"!type": "bool"
			},
			"actionSheetStyle": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"destructiveButtonIndex": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"showFromToolbar": {
				"!type": "fn(view: +UIToolbar) -> void"
			},
			"showFromTabBar": {
				"!type": "fn(view: +UITabBar) -> void"
			},
			"showFromBarButtonItemAnimated": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool) -> void"
			},
			"initWithTitleDelegateCancelButtonTitleDestructiveButtonTitleOtherButtonTitles": {
				"!type": "fn(title: string, delegate: +Object, cancelButtonTitle: string, destructiveButtonTitle: string, otherButtonTitles: string, args: Array.prototype) -> +UIActionSheet"
			},
			"showInView": {
				"!type": "fn(view: +UIView) -> void"
			},
			"buttonTitleAtIndex": {
				"!type": "fn(buttonIndex: number) -> string"
			},
			"dismissWithClickedButtonIndexAnimated": {
				"!type": "fn(buttonIndex: number, animated: bool) -> void"
			},
			"showFromRectInViewAnimated": {
				"!type": "fn(rect: +Object, view: +UIView, animated: bool) -> void"
			},
			"addButtonWithTitle": {
				"!type": "fn(title: string) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIActionSheet"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIActionSheet"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActionSheet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMotionEffectGroup": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMotionEffectGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMotionEffectGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMotionEffectGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"motionEffects": {
				"!type": "+Array"
			},
			"keyPathsAndRelativeValuesForViewerOffset": {
				"!type": "fn(viewerOffset: +Object) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMotionEffectGroup"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMotionEffectGroup"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMotionEffectGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLengthFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLengthFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLengthFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLengthFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unitStyle": {
				"!type": "number"
			},
			"forPersonHeightUse": {
				"!type": "bool"
			},
			"numberFormatter": {
				"!type": "+NSNumberFormatter"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringFromMeters": {
				"!type": "fn(numberInMeters: number) -> string"
			},
			"unitStringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"stringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"unitStringFromMetersUsedUnit": {
				"!type": "fn(numberInMeters: number, unitp: +Object) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLengthFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProduct": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProduct"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProduct"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProduct"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"downloadContentLengths": {
				"!type": "+Array"
			},
			"introductoryPrice": {
				"!type": "+SKProductDiscount"
			},
			"subscriptionPeriod": {
				"!type": "+SKProductSubscriptionPeriod"
			},
			"isFamilyShareable": {
				"!type": "bool"
			},
			"localizedDescription": {
				"!type": "string"
			},
			"price": {
				"!type": "+NSDecimalNumber"
			},
			"productIdentifier": {
				"!type": "string"
			},
			"localizedTitle": {
				"!type": "string"
			},
			"discounts": {
				"!type": "+Array"
			},
			"contentVersion": {
				"!type": "string"
			},
			"priceLocale": {
				"!type": "+NSLocale"
			},
			"downloadContentVersion": {
				"!type": "string"
			},
			"subscriptionGroupIdentifier": {
				"!type": "string"
			},
			"isDownloadable": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProduct"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSKeyedUnarchiver": {
		"setClassForClassName": {
			"!type": "fn(cls: +Object, codedName: string) -> void"
		},
		"unarchivedDictionaryWithKeysOfClassesObjectsOfClassesFromDataError": {
			"!type": "fn(keyClasses: +NSSet, valueClasses: +NSSet, data: +NSData, error: +Object) -> +Object"
		},
		"unarchiveTopLevelObjectWithDataError": {
			"!type": "fn(data: +NSData, error: +Object) -> +Object"
		},
		"unarchivedObjectOfClassFromDataError": {
			"!type": "fn(cls: +Object, data: +NSData, error: +Object) -> +Object"
		},
		"unarchiveObjectWithData": {
			"!type": "fn(data: +NSData) -> +Object"
		},
		"unarchivedDictionaryWithKeysOfClassObjectsOfClassFromDataError": {
			"!type": "fn(keyCls: +Object, valueCls: +Object, data: +NSData, error: +Object) -> +Object"
		},
		"unarchivedObjectOfClassesFromDataError": {
			"!type": "fn(classes: +NSSet, data: +NSData, error: +Object) -> +Object"
		},
		"unarchivedArrayOfObjectsOfClassesFromDataError": {
			"!type": "fn(classes: +NSSet, data: +NSData, error: +Object) -> +Array"
		},
		"classForClassName": {
			"!type": "fn(codedName: string) -> +Object"
		},
		"unarchivedArrayOfObjectsOfClassFromDataError": {
			"!type": "fn(cls: +Object, data: +NSData, error: +Object) -> +Array"
		},
		"unarchiveObjectWithFile": {
			"!type": "fn(path: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSKeyedUnarchiver"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSKeyedUnarchiver"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSKeyedUnarchiver"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"requiresSecureCoding": {
				"!type": "bool"
			},
			"decodingFailurePolicy": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"finishDecoding": {
				"!type": "fn() -> void"
			},
			"initForReadingWithData": {
				"!type": "fn(data: +NSData) -> +NSKeyedUnarchiver"
			},
			"decodeInt64ForKey": {
				"!type": "fn(key: string) -> number"
			},
			"decodeBoolForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"setClassForClassName": {
				"!type": "fn(cls: +Object, codedName: string) -> void"
			},
			"initForReadingFromDataError": {
				"!type": "fn(data: +NSData, error: +Object) -> +NSKeyedUnarchiver"
			},
			"decodeObjectForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"decodeIntForKey": {
				"!type": "fn(key: string) -> number"
			},
			"decodeDoubleForKey": {
				"!type": "fn(key: string) -> number"
			},
			"jsinit": {
				"!type": "fn() -> +NSKeyedUnarchiver"
			},
			"decodeInt32ForKey": {
				"!type": "fn(key: string) -> number"
			},
			"decodeBytesForKeyReturnedLength": {
				"!type": "fn(key: string, lengthp: +Object) -> +Object"
			},
			"classForClassName": {
				"!type": "fn(codedName: string) -> +Object"
			},
			"containsValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"decodeFloatForKey": {
				"!type": "fn(key: string) -> number"
			},
			"encodeValueOfObjCTypeAt": {
				"!type": "fn(type: +Object, addr: +Object) -> void"
			},
			"versionForClassName": {
				"!type": "fn(className: string) -> number"
			},
			"encodeDataObject": {
				"!type": "fn(data: +NSData) -> void"
			},
			"decodeDataObject": {
				"!type": "fn() -> +NSData"
			},
			"decodeValueOfObjCTypeAtSize": {
				"!type": "fn(type: +Object, data: +Object, size: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSKeyedUnarchiver"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableSet": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"addObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"removeObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableSet"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSMutableSet"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableSet"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSMutableSet"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableSet"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"member": {
				"!type": "fn(object: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewFocusUpdateContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewFocusUpdateContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewFocusUpdateContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewFocusUpdateContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"previouslyFocusedIndexPath": {
				"!type": "+NSIndexPath"
			},
			"nextFocusedIndexPath": {
				"!type": "+NSIndexPath"
			},
			"nextFocusedItem": {
				"!type": "+Object"
			},
			"previouslyFocusedItem": {
				"!type": "+Object"
			},
			"nextFocusedView": {
				"!type": "+UIView"
			},
			"focusHeading": {
				"!type": "number"
			},
			"previouslyFocusedView": {
				"!type": "+UIView"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewFocusUpdateContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CATransition": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CATransition"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CATransition"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CATransition"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CATransition"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"startProgress": {
				"!type": "number"
			},
			"subtype": {
				"!type": "string"
			},
			"type": {
				"!type": "string"
			},
			"endProgress": {
				"!type": "number"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CATransition"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIVibrancyEffect": {
		"effectForBlurEffect": {
			"!type": "fn(blurEffect: +UIBlurEffect) -> +UIVibrancyEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIVibrancyEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIVibrancyEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIVibrancyEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIVibrancyEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"shadowImage": {
				"!type": "+UIImage"
			},
			"idiom": {
				"!type": "number"
			},
			"shadowColor": {
				"!type": "+UIColor"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"backgroundImageContentMode": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"backgroundEffect": {
				"!type": "+UIBlurEffect"
			},
			"configureWithTransparentBackground": {
				"!type": "fn() -> void"
			},
			"initWithBarAppearance": {
				"!type": "fn(barAppearance: +UIBarAppearance) -> +UIBarAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarAppearance"
			},
			"initWithIdiom": {
				"!type": "fn(idiom: number) -> +UIBarAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarAppearance"
			},
			"configureWithOpaqueBackground": {
				"!type": "fn() -> void"
			},
			"configureWithDefaultBackground": {
				"!type": "fn() -> void"
			},
			"jscopy": {
				"!type": "fn() -> +UIBarAppearance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSIndexSet": {
		"indexSetWithIndex": {
			"!type": "fn(value: number) -> +NSIndexSet"
		},
		"indexSetWithIndexesInRange": {
			"!type": "fn(range: +Object) -> +NSIndexSet"
		},
		"indexSet": {
			"!type": "fn() -> +NSIndexSet"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSIndexSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSIndexSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSIndexSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"firstIndex": {
				"!type": "number"
			},
			"lastIndex": {
				"!type": "number"
			},
			"getIndexesMaxCountInIndexRange": {
				"!type": "fn(indexBuffer: +Object, bufferSize: number, range: +Object) -> number"
			},
			"indexPassingTest": {
				"!type": "fn(predicate: +Function) -> number"
			},
			"intersectsIndexesInRange": {
				"!type": "fn(range: +Object) -> bool"
			},
			"enumerateIndexesWithOptionsUsingBlock": {
				"!type": "fn(opts: number, block: +Function) -> void"
			},
			"enumerateRangesInRangeOptionsUsingBlock": {
				"!type": "fn(range: +Object, opts: number, block: +Function) -> void"
			},
			"containsIndex": {
				"!type": "fn(value: number) -> bool"
			},
			"enumerateIndexesInRangeOptionsUsingBlock": {
				"!type": "fn(range: +Object, opts: number, block: +Function) -> void"
			},
			"indexInRangeOptionsPassingTest": {
				"!type": "fn(range: +Object, opts: number, predicate: +Function) -> number"
			},
			"enumerateIndexesUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"initWithIndexesInRange": {
				"!type": "fn(range: +Object) -> +NSIndexSet"
			},
			"indexesWithOptionsPassingTest": {
				"!type": "fn(opts: number, predicate: +Function) -> +NSIndexSet"
			},
			"containsIndexes": {
				"!type": "fn(indexSet: +NSIndexSet) -> bool"
			},
			"indexGreaterThanOrEqualToIndex": {
				"!type": "fn(value: number) -> number"
			},
			"initWithIndex": {
				"!type": "fn(value: number) -> +NSIndexSet"
			},
			"enumerateRangesWithOptionsUsingBlock": {
				"!type": "fn(opts: number, block: +Function) -> void"
			},
			"indexGreaterThanIndex": {
				"!type": "fn(value: number) -> number"
			},
			"indexesInRangeOptionsPassingTest": {
				"!type": "fn(range: +Object, opts: number, predicate: +Function) -> +NSIndexSet"
			},
			"isEqualToIndexSet": {
				"!type": "fn(indexSet: +NSIndexSet) -> bool"
			},
			"enumerateRangesUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"indexWithOptionsPassingTest": {
				"!type": "fn(opts: number, predicate: +Function) -> number"
			},
			"containsIndexesInRange": {
				"!type": "fn(range: +Object) -> bool"
			},
			"countOfIndexesInRange": {
				"!type": "fn(range: +Object) -> number"
			},
			"indexLessThanIndex": {
				"!type": "fn(value: number) -> number"
			},
			"indexesPassingTest": {
				"!type": "fn(predicate: +Function) -> +NSIndexSet"
			},
			"initWithIndexSet": {
				"!type": "fn(indexSet: +NSIndexSet) -> +NSIndexSet"
			},
			"indexLessThanOrEqualToIndex": {
				"!type": "fn(value: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSIndexSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDynamicItemGroup": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDynamicItemGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDynamicItemGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDynamicItemGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"items": {
				"!type": "+Array"
			},
			"initWithItems": {
				"!type": "fn(items: +Array) -> +UIDynamicItemGroup"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDynamicItemGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStoryboardUnwindSegueSource": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStoryboardUnwindSegueSource"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStoryboardUnwindSegueSource"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStoryboardUnwindSegueSource"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsunwindAction": {
				"!type": "string"
			},
			"sourceViewController": {
				"!type": "+UIViewController"
			},
			"sender": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStoryboardUnwindSegueSource"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKArcadeService": {
		"registerArcadeAppWithRandomFromLibRandomFromLibLengthResultHandler": {
			"!type": "fn(randomFromLib: +NSData, randomFromLibLength: number, resultHandler: +Function) -> void"
		},
		"arcadeSubscriptionStatusWithNonceResultHandler": {
			"!type": "fn(nonce: number, resultHandler: +Function) -> void"
		},
		"repairArcadeApp": {
			"!type": "fn() -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKArcadeService"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKArcadeService"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKArcadeService"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKArcadeService"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURL": {
		"fileURLWithPathRelativeToURL": {
			"!type": "fn(path: string, baseURL: +NSURL) -> +NSURL"
		},
		"URLWithStringRelativeToURL": {
			"!type": "fn(URLString: string, baseURL: +NSURL) -> +NSURL"
		},
		"bookmarkDataWithContentsOfURLError": {
			"!type": "fn(bookmarkFileURL: +NSURL, error: +Object) -> +NSData"
		},
		"writeBookmarkDataToURLOptionsError": {
			"!type": "fn(bookmarkData: +NSData, bookmarkFileURL: +NSURL, options: number, error: +Object) -> bool"
		},
		"fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL": {
			"!type": "fn(path: +Object, isDir: bool, baseURL: +NSURL) -> +NSURL"
		},
		"fileURLWithPathIsDirectoryRelativeToURL": {
			"!type": "fn(path: string, isDir: bool, baseURL: +NSURL) -> +NSURL"
		},
		"URLWithString": {
			"!type": "fn(URLString: string) -> +NSURL"
		},
		"URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError": {
			"!type": "fn(bookmarkData: +NSData, options: number, relativeURL: +NSURL, isStale: +Object, error: +Object) -> +NSURL"
		},
		"fileURLWithPathIsDirectory": {
			"!type": "fn(path: string, isDir: bool) -> +NSURL"
		},
		"resourceValuesForKeysFromBookmarkData": {
			"!type": "fn(keys: +Array, bookmarkData: +NSData) -> +Object"
		},
		"fileURLWithPath": {
			"!type": "fn(path: string) -> +NSURL"
		},
		"URLByResolvingAliasFileAtURLOptionsError": {
			"!type": "fn(url: +NSURL, options: number, error: +Object) -> +NSURL"
		},
		"absoluteURLWithDataRepresentationRelativeToURL": {
			"!type": "fn(data: +NSData, baseURL: +NSURL) -> +NSURL"
		},
		"URLWithDataRepresentationRelativeToURL": {
			"!type": "fn(data: +NSData, baseURL: +NSURL) -> +NSURL"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURL"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURL"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURL"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"absoluteURL": {
				"!type": "+NSURL"
			},
			"password": {
				"!type": "string"
			},
			"hasDirectoryPath": {
				"!type": "bool"
			},
			"resourceSpecifier": {
				"!type": "string"
			},
			"absoluteString": {
				"!type": "string"
			},
			"parameterString": {
				"!type": "string"
			},
			"fragment": {
				"!type": "string"
			},
			"relativePath": {
				"!type": "string"
			},
			"standardizedURL": {
				"!type": "+NSURL"
			},
			"baseURL": {
				"!type": "+NSURL"
			},
			"port": {
				"!type": "number"
			},
			"host": {
				"!type": "string"
			},
			"filePathURL": {
				"!type": "+NSURL"
			},
			"relativeString": {
				"!type": "string"
			},
			"query": {
				"!type": "string"
			},
			"path": {
				"!type": "string"
			},
			"fileURL": {
				"!type": "bool"
			},
			"scheme": {
				"!type": "string"
			},
			"dataRepresentation": {
				"!type": "+NSData"
			},
			"user": {
				"!type": "string"
			},
			"initFileURLWithPath": {
				"!type": "fn(path: string) -> +NSURL"
			},
			"checkResourceIsReachableAndReturnError": {
				"!type": "fn(error: +Object) -> bool"
			},
			"initWithString": {
				"!type": "fn(URLString: string) -> +NSURL"
			},
			"fileReferenceURL": {
				"!type": "fn() -> +NSURL"
			},
			"removeAllCachedResourceValues": {
				"!type": "fn() -> void"
			},
			"initFileURLWithPathIsDirectory": {
				"!type": "fn(path: string, isDir: bool) -> +NSURL"
			},
			"initFileURLWithPathIsDirectoryRelativeToURL": {
				"!type": "fn(path: string, isDir: bool, baseURL: +NSURL) -> +NSURL"
			},
			"startAccessingSecurityScopedResource": {
				"!type": "fn() -> bool"
			},
			"initFileURLWithPathRelativeToURL": {
				"!type": "fn(path: string, baseURL: +NSURL) -> +NSURL"
			},
			"initAbsoluteURLWithDataRepresentationRelativeToURL": {
				"!type": "fn(data: +NSData, baseURL: +NSURL) -> +NSURL"
			},
			"removeCachedResourceValueForKey": {
				"!type": "fn(key: string) -> void"
			},
			"initWithStringRelativeToURL": {
				"!type": "fn(URLString: string, baseURL: +NSURL) -> +NSURL"
			},
			"resourceValuesForKeysError": {
				"!type": "fn(keys: +Array, error: +Object) -> +Object"
			},
			"initWithDataRepresentationRelativeToURL": {
				"!type": "fn(data: +NSData, baseURL: +NSURL) -> +NSURL"
			},
			"stopAccessingSecurityScopedResource": {
				"!type": "fn() -> void"
			},
			"initByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError": {
				"!type": "fn(bookmarkData: +NSData, options: number, relativeURL: +NSURL, isStale: +Object, error: +Object) -> +NSURL"
			},
			"getResourceValueForKeyError": {
				"!type": "fn(value: +Object, key: string, error: +Object) -> bool"
			},
			"bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError": {
				"!type": "fn(options: number, keys: +Array, relativeURL: +NSURL, error: +Object) -> +NSData"
			},
			"setResourceValueForKeyError": {
				"!type": "fn(value: +Object, key: string, error: +Object) -> bool"
			},
			"isFileReferenceURL": {
				"!type": "fn() -> bool"
			},
			"setTemporaryResourceValueForKey": {
				"!type": "fn(value: +Object, key: string) -> void"
			},
			"initWithSchemeHostPath": {
				"!type": "fn(scheme: string, host: string, path: string) -> +NSURL"
			},
			"setResourceValuesError": {
				"!type": "fn(keyedValues: +Object, error: +Object) -> bool"
			},
			"initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL": {
				"!type": "fn(path: +Object, isDir: bool, baseURL: +NSURL) -> +NSURL"
			},
			"getFileSystemRepresentationMaxLength": {
				"!type": "fn(buffer: +Object, maxBufferLength: number) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURL"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPencilInteraction": {
		"preferredTapAction": {
			"!type": "fn() -> number"
		},
		"prefersPencilOnlyDrawing": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPencilInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPencilInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPencilInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"enabled": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPencilInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsPDFRenderer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsPDFRenderer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsPDFRenderer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsPDFRenderer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsImageOutput": {
				"!type": "bool"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"writePDFToURLWithActionsError": {
				"!type": "fn(url: +NSURL, actions: +Function, error: +Object) -> bool"
			},
			"PDFDataWithActions": {
				"!type": "fn(actions: +Function) -> +NSData"
			},
			"initWithBoundsFormat": {
				"!type": "fn(bounds: +Object, format: +UIGraphicsPDFRendererFormat) -> +UIGraphicsPDFRenderer"
			},
			"initWithBounds": {
				"!type": "fn(bounds: +Object) -> +UIGraphicsPDFRenderer"
			},
			"initWithBoundsFormat": {
				"!type": "fn(bounds: +Object, format: +UIGraphicsRendererFormat) -> +UIGraphicsPDFRenderer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsPDFRenderer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNumber": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> number"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> number"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> number"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"longLongValue": {
				"!type": "number"
			},
			"unsignedLongValue": {
				"!type": "number"
			},
			"boolValue": {
				"!type": "bool"
			},
			"floatValue": {
				"!type": "number"
			},
			"longValue": {
				"!type": "number"
			},
			"doubleValue": {
				"!type": "number"
			},
			"unsignedLongLongValue": {
				"!type": "number"
			},
			"intValue": {
				"!type": "number"
			},
			"shortValue": {
				"!type": "number"
			},
			"unsignedCharValue": {
				"!type": "number"
			},
			"unsignedShortValue": {
				"!type": "number"
			},
			"unsignedIntegerValue": {
				"!type": "number"
			},
			"stringValue": {
				"!type": "string"
			},
			"unsignedIntValue": {
				"!type": "number"
			},
			"integerValue": {
				"!type": "number"
			},
			"charValue": {
				"!type": "number"
			},
			"initWithUnsignedLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithInteger": {
				"!type": "fn(value: number) -> number"
			},
			"initWithDouble": {
				"!type": "fn(value: number) -> number"
			},
			"initWithChar": {
				"!type": "fn(value: number) -> number"
			},
			"initWithLongLong": {
				"!type": "fn(value: number) -> number"
			},
			"isEqualToNumber": {
				"!type": "fn(number: number) -> bool"
			},
			"initWithFloat": {
				"!type": "fn(value: number) -> number"
			},
			"initWithBool": {
				"!type": "fn(value: bool) -> number"
			},
			"descriptionWithLocale": {
				"!type": "fn(locale: +Object) -> string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> number"
			},
			"initWithInt": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedChar": {
				"!type": "fn(value: number) -> number"
			},
			"initWithShort": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedInteger": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedShort": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedLongLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedInt": {
				"!type": "fn(value: number) -> number"
			},
			"compare": {
				"!type": "fn(otherNumber: number) -> number"
			},
			"getValueSize": {
				"!type": "fn(value: +Object, size: number) -> void"
			},
			"initWithBytesObjCType": {
				"!type": "fn(value: +Object, type: +Object) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> number"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIViewPropertyAnimator": {
		"runningPropertyAnimatorWithDurationDelayOptionsAnimationsCompletion": {
			"!type": "fn(duration: number, delay: number, options: number, animations: +Function, completion: +Function) -> +UIViewPropertyAnimator"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIViewPropertyAnimator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIViewPropertyAnimator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIViewPropertyAnimator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"interruptible": {
				"!type": "bool"
			},
			"scrubsLinearly": {
				"!type": "bool"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"delay": {
				"!type": "number"
			},
			"manualHitTestingEnabled": {
				"!type": "bool"
			},
			"pausesOnCompletion": {
				"!type": "bool"
			},
			"duration": {
				"!type": "number"
			},
			"timingParameters": {
				"!type": "+Object"
			},
			"initWithDurationControlPoint1ControlPoint2Animations": {
				"!type": "fn(duration: number, point1: +Object, point2: +Object, animations: +Function) -> +UIViewPropertyAnimator"
			},
			"addAnimations": {
				"!type": "fn(animation: +Function) -> void"
			},
			"initWithDurationDampingRatioAnimations": {
				"!type": "fn(duration: number, ratio: number, animations: +Function) -> +UIViewPropertyAnimator"
			},
			"addAnimationsDelayFactor": {
				"!type": "fn(animation: +Function, delayFactor: number) -> void"
			},
			"continueAnimationWithTimingParametersDurationFactor": {
				"!type": "fn(parameters: +Object, durationFactor: number) -> void"
			},
			"initWithDurationCurveAnimations": {
				"!type": "fn(duration: number, curve: number, animations: +Function) -> +UIViewPropertyAnimator"
			},
			"addCompletion": {
				"!type": "fn(completion: +Function) -> void"
			},
			"initWithDurationTimingParameters": {
				"!type": "fn(duration: number, parameters: +Object) -> +UIViewPropertyAnimator"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIViewPropertyAnimator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIListContentConfiguration": {
		"sidebarSubtitleCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"accompaniedSidebarCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"sidebarHeaderConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"subtitleCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"groupedFooterConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"groupedHeaderConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"accompaniedSidebarSubtitleCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"valueCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"cellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"sidebarCellConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"plainHeaderConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"plainFooterConfiguration": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIListContentConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIListContentConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"imageToTextPadding": {
				"!type": "number"
			},
			"imageProperties": {
				"!type": "+UIListContentImageProperties"
			},
			"textProperties": {
				"!type": "+UIListContentTextProperties"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"text": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"directionalLayoutMargins": {
				"!type": "+Object"
			},
			"prefersSideBySideTextAndSecondaryText": {
				"!type": "bool"
			},
			"textToSecondaryTextVerticalPadding": {
				"!type": "number"
			},
			"axesPreservingSuperviewLayoutMargins": {
				"!type": "number"
			},
			"secondaryTextProperties": {
				"!type": "+UIListContentTextProperties"
			},
			"secondaryAttributedText": {
				"!type": "+NSAttributedString"
			},
			"textToSecondaryTextHorizontalPadding": {
				"!type": "number"
			},
			"secondaryText": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIListContentConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewRowAction": {
		"rowActionWithStyleTitleHandler": {
			"!type": "fn(style: number, title: string, handler: +Function) -> +UITableViewRowAction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewRowAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewRowAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewRowAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"style": {
				"!type": "number"
			},
			"backgroundEffect": {
				"!type": "+UIVisualEffect"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"title": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewRowAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusAnimationCoordinator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusAnimationCoordinator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusAnimationCoordinator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusAnimationCoordinator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"addCoordinatedUnfocusingAnimationsCompletion": {
				"!type": "fn(animations: +Function, completion: +Function) -> void"
			},
			"addCoordinatedAnimationsCompletion": {
				"!type": "fn(animations: +Function, completion: +Function) -> void"
			},
			"addCoordinatedFocusingAnimationsCompletion": {
				"!type": "fn(animations: +Function, completion: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusAnimationCoordinator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitElectricResistance": {
		"microohms": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"ohms": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"kiloohms": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"milliohms": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"megaohms": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitElectricResistance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitElectricResistance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitElectricResistance"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitElectricResistance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitElectricResistance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIFilterShape": {
		"shapeWithRect": {
			"!type": "fn(r: +Object) -> +CIFilterShape"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIFilterShape"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIFilterShape"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIFilterShape"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"extent": {
				"!type": "+Object"
			},
			"intersectWithRect": {
				"!type": "fn(r: +Object) -> +CIFilterShape"
			},
			"intersectWith": {
				"!type": "fn(s2: +CIFilterShape) -> +CIFilterShape"
			},
			"insetByXY": {
				"!type": "fn(dx: number, dy: number) -> +CIFilterShape"
			},
			"initWithRect": {
				"!type": "fn(r: +Object) -> +CIFilterShape"
			},
			"unionWith": {
				"!type": "fn(s2: +CIFilterShape) -> +CIFilterShape"
			},
			"transformByInterior": {
				"!type": "fn(m: +Object, flag: bool) -> +CIFilterShape"
			},
			"unionWithRect": {
				"!type": "fn(r: +Object) -> +CIFilterShape"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIFilterShape"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitElectricCharge": {
		"megaampereHours": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"ampereHours": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"kiloampereHours": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"milliampereHours": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"coulombs": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"microampereHours": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitElectricCharge"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitElectricCharge"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitElectricCharge"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitElectricCharge"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitElectricCharge"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIPDF417CodeDescriptor": {
		"descriptorWithPayloadIsCompactRowCountColumnCount": {
			"!type": "fn(errorCorrectedPayload: +NSData, isCompact: bool, rowCount: number, columnCount: number) -> +CIPDF417CodeDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIPDF417CodeDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIPDF417CodeDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIPDF417CodeDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"columnCount": {
				"!type": "number"
			},
			"rowCount": {
				"!type": "number"
			},
			"errorCorrectedPayload": {
				"!type": "+NSData"
			},
			"isCompact": {
				"!type": "bool"
			},
			"initWithPayloadIsCompactRowCountColumnCount": {
				"!type": "fn(errorCorrectedPayload: +NSData, isCompact: bool, rowCount: number, columnCount: number) -> +CIPDF417CodeDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIPDF417CodeDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSAssertionHandler": {
		"currentHandler": {
			"!type": "fn() -> +NSAssertionHandler"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSAssertionHandler"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSAssertionHandler"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSAssertionHandler"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"handleFailureInFunctionFileLineNumberDescription": {
				"!type": "fn(functionName: string, fileName: string, line: number, format: string, args: Array.prototype) -> void"
			},
			"handleFailureInMethodObjectFileLineNumberDescription": {
				"!type": "fn(selector: string, object: +Object, fileName: string, line: number, format: string, args: Array.prototype) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSAssertionHandler"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitEnergy": {
		"joules": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"calories": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"kilojoules": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"kilocalories": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"kilowattHours": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitEnergy"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitEnergy"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitEnergy"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitEnergy"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitEnergy"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSHTTPURLResponse": {
		"localizedStringForStatusCode": {
			"!type": "fn(statusCode: number) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSHTTPURLResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSHTTPURLResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSHTTPURLResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allHeaderFields": {
				"!type": "+Object"
			},
			"statusCode": {
				"!type": "number"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"MIMEType": {
				"!type": "string"
			},
			"expectedContentLength": {
				"!type": "number"
			},
			"suggestedFilename": {
				"!type": "string"
			},
			"textEncodingName": {
				"!type": "string"
			},
			"valueForHTTPHeaderField": {
				"!type": "fn(field: string) -> string"
			},
			"initWithURLStatusCodeHTTPVersionHeaderFields": {
				"!type": "fn(url: +NSURL, statusCode: number, HTTPVersion: string, headerFields: +Object) -> +NSHTTPURLResponse"
			},
			"initWithURLMIMETypeExpectedContentLengthTextEncodingName": {
				"!type": "fn(URL: +NSURL, MIMEType: string, length: number, name: string) -> +NSHTTPURLResponse"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSHTTPURLResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerRegion": {
		"regionWithRectIdentifier": {
			"!type": "fn(rect: +Object, identifier: +Object) -> +UIPointerRegion"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerRegion"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerRegion"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerRegion"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "+Object"
			},
			"rect": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerRegion"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsPDFRendererFormat": {
		"preferredFormat": {
			"!type": "fn() -> +UIGraphicsPDFRendererFormat"
		},
		"defaultFormat": {
			"!type": "fn() -> +UIGraphicsPDFRendererFormat"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsPDFRendererFormat"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsPDFRendererFormat"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsPDFRendererFormat"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"documentInfo": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsPDFRendererFormat"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileProviderService": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileProviderService"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileProviderService"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileProviderService"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"getFileProviderConnectionWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileProviderService"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitVolume": {
		"imperialFluidOunces": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"pints": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"kiloliters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"teaspoons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicMiles": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"metricCups": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"acreFeet": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicDecimeters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicYards": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"deciliters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"liters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"centiliters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicMeters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"imperialGallons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"milliliters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"imperialTeaspoons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cups": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"quarts": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicInches": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicCentimeters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"bushels": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicFeet": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicKilometers": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"megaliters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"imperialQuarts": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"tablespoons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"fluidOunces": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"cubicMillimeters": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"imperialTablespoons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"gallons": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"imperialPints": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitVolume"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitVolume"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitVolume"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitVolume"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitVolume"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSExtensionContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSExtensionContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSExtensionContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSExtensionContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"inputItems": {
				"!type": "+Array"
			},
			"completeRequestReturningItemsCompletionHandler": {
				"!type": "fn(items: +Array, completionHandler: +Function) -> void"
			},
			"cancelRequestWithError": {
				"!type": "fn(error: +NSError) -> void"
			},
			"openURLCompletionHandler": {
				"!type": "fn(URL: +NSURL, completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSExtensionContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIDataMatrixCodeDescriptor": {
		"descriptorWithPayloadRowCountColumnCountEccVersion": {
			"!type": "fn(errorCorrectedPayload: +NSData, rowCount: number, columnCount: number, eccVersion: number) -> +CIDataMatrixCodeDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIDataMatrixCodeDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIDataMatrixCodeDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIDataMatrixCodeDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"columnCount": {
				"!type": "number"
			},
			"rowCount": {
				"!type": "number"
			},
			"errorCorrectedPayload": {
				"!type": "+NSData"
			},
			"eccVersion": {
				"!type": "number"
			},
			"initWithPayloadRowCountColumnCountEccVersion": {
				"!type": "fn(errorCorrectedPayload: +NSData, rowCount: number, columnCount: number, eccVersion: number) -> +CIDataMatrixCodeDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIDataMatrixCodeDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDecimalNumber": {
		"decimalNumberWithStringLocale": {
			"!type": "fn(numberValue: string, locale: +Object) -> +NSDecimalNumber"
		},
		"setDefaultBehavior": {
			"!type": "fn(defaultBehavior: +Object) -> void"
		},
		"minimumDecimalNumber": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"one": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"notANumber": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"zero": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"decimalNumberWithMantissaExponentIsNegative": {
			"!type": "fn(mantissa: number, exponent: number, flag: bool) -> +NSDecimalNumber"
		},
		"decimalNumberWithString": {
			"!type": "fn(numberValue: string) -> +NSDecimalNumber"
		},
		"decimalNumberWithDecimal": {
			"!type": "fn(dcm: +Object) -> +NSDecimalNumber"
		},
		"maximumDecimalNumber": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"defaultBehavior": {
			"!type": "fn() -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDecimalNumber"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDecimalNumber"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"doubleValue": {
				"!type": "number"
			},
			"longLongValue": {
				"!type": "number"
			},
			"unsignedLongValue": {
				"!type": "number"
			},
			"boolValue": {
				"!type": "bool"
			},
			"floatValue": {
				"!type": "number"
			},
			"longValue": {
				"!type": "number"
			},
			"doubleValue": {
				"!type": "number"
			},
			"unsignedLongLongValue": {
				"!type": "number"
			},
			"intValue": {
				"!type": "number"
			},
			"shortValue": {
				"!type": "number"
			},
			"unsignedCharValue": {
				"!type": "number"
			},
			"unsignedShortValue": {
				"!type": "number"
			},
			"unsignedIntegerValue": {
				"!type": "number"
			},
			"stringValue": {
				"!type": "string"
			},
			"unsignedIntValue": {
				"!type": "number"
			},
			"integerValue": {
				"!type": "number"
			},
			"charValue": {
				"!type": "number"
			},
			"decimalNumberByRaisingToPower": {
				"!type": "fn(power: number) -> +NSDecimalNumber"
			},
			"decimalNumberByDividingBy": {
				"!type": "fn(decimalNumber: +NSDecimalNumber) -> +NSDecimalNumber"
			},
			"decimalNumberByAddingWithBehavior": {
				"!type": "fn(decimalNumber: +NSDecimalNumber, behavior: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByMultiplyingByWithBehavior": {
				"!type": "fn(decimalNumber: +NSDecimalNumber, behavior: +Object) -> +NSDecimalNumber"
			},
			"initWithString": {
				"!type": "fn(numberValue: string) -> +NSDecimalNumber"
			},
			"decimalNumberBySubtracting": {
				"!type": "fn(decimalNumber: +NSDecimalNumber) -> +NSDecimalNumber"
			},
			"initWithStringLocale": {
				"!type": "fn(numberValue: string, locale: +Object) -> +NSDecimalNumber"
			},
			"descriptionWithLocale": {
				"!type": "fn(locale: +Object) -> string"
			},
			"decimalNumberByDividingByWithBehavior": {
				"!type": "fn(decimalNumber: +NSDecimalNumber, behavior: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByMultiplyingByPowerOf10WithBehavior": {
				"!type": "fn(power: number, behavior: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByRoundingAccordingToBehavior": {
				"!type": "fn(behavior: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByMultiplyingBy": {
				"!type": "fn(decimalNumber: +NSDecimalNumber) -> +NSDecimalNumber"
			},
			"decimalNumberBySubtractingWithBehavior": {
				"!type": "fn(decimalNumber: +NSDecimalNumber, behavior: +Object) -> +NSDecimalNumber"
			},
			"initWithDecimal": {
				"!type": "fn(dcm: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByRaisingToPowerWithBehavior": {
				"!type": "fn(power: number, behavior: +Object) -> +NSDecimalNumber"
			},
			"decimalNumberByMultiplyingByPowerOf10": {
				"!type": "fn(power: number) -> +NSDecimalNumber"
			},
			"decimalNumberByAdding": {
				"!type": "fn(decimalNumber: +NSDecimalNumber) -> +NSDecimalNumber"
			},
			"initWithMantissaExponentIsNegative": {
				"!type": "fn(mantissa: number, exponent: number, flag: bool) -> +NSDecimalNumber"
			},
			"compare": {
				"!type": "fn(decimalNumber: number) -> number"
			},
			"initWithUnsignedLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithInteger": {
				"!type": "fn(value: number) -> number"
			},
			"initWithDouble": {
				"!type": "fn(value: number) -> number"
			},
			"initWithChar": {
				"!type": "fn(value: number) -> number"
			},
			"initWithLongLong": {
				"!type": "fn(value: number) -> number"
			},
			"isEqualToNumber": {
				"!type": "fn(number: number) -> bool"
			},
			"initWithFloat": {
				"!type": "fn(value: number) -> number"
			},
			"initWithBool": {
				"!type": "fn(value: bool) -> number"
			},
			"descriptionWithLocale": {
				"!type": "fn(locale: +Object) -> string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSDecimalNumber"
			},
			"initWithInt": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedChar": {
				"!type": "fn(value: number) -> number"
			},
			"initWithShort": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedInteger": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedShort": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedLongLong": {
				"!type": "fn(value: number) -> number"
			},
			"initWithUnsignedInt": {
				"!type": "fn(value: number) -> number"
			},
			"compare": {
				"!type": "fn(otherNumber: number) -> number"
			},
			"getValueSize": {
				"!type": "fn(value: +Object, size: number) -> void"
			},
			"initWithBytesObjCType": {
				"!type": "fn(value: +Object, type: +Object) -> +NSDecimalNumber"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSDecimalNumber"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDecimalNumber"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDiffableDataSourceSectionTransaction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDiffableDataSourceSectionTransaction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDiffableDataSourceSectionTransaction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDiffableDataSourceSectionTransaction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"finalSnapshot": {
				"!type": "+NSDiffableDataSourceSectionSnapshot"
			},
			"difference": {
				"!type": "+NSOrderedCollectionDifference"
			},
			"initialSnapshot": {
				"!type": "+NSDiffableDataSourceSectionSnapshot"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDiffableDataSourceSectionTransaction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UNNotificationResponse": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UNNotificationResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UNNotificationResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UNNotificationResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"notification": {
				"!type": "+UNNotification"
			},
			"actionIdentifier": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UNNotificationResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScreenMode": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScreenMode"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScreenMode"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScreenMode"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"pixelAspectRatio": {
				"!type": "number"
			},
			"size": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScreenMode"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXPCConnection": {
		"currentConnection": {
			"!type": "fn() -> +NSXPCConnection"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXPCConnection"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXPCConnection"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXPCConnection"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"auditSessionIdentifier": {
				"!type": "number"
			},
			"exportedObject": {
				"!type": "+Object"
			},
			"endpoint": {
				"!type": "+NSXPCListenerEndpoint"
			},
			"effectiveGroupIdentifier": {
				"!type": "number"
			},
			"processIdentifier": {
				"!type": "number"
			},
			"jsinvalidationHandler": {
				"!type": "+Function"
			},
			"jsinterruptionHandler": {
				"!type": "+Function"
			},
			"exportedInterface": {
				"!type": "+NSXPCInterface"
			},
			"effectiveUserIdentifier": {
				"!type": "number"
			},
			"remoteObjectInterface": {
				"!type": "+NSXPCInterface"
			},
			"remoteObjectProxy": {
				"!type": "+Object"
			},
			"serviceName": {
				"!type": "string"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"synchronousRemoteObjectProxyWithErrorHandler": {
				"!type": "fn(handler: +Function) -> +Object"
			},
			"scheduleSendBarrierBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"initWithListenerEndpoint": {
				"!type": "fn(endpoint: +NSXPCListenerEndpoint) -> +NSXPCConnection"
			},
			"remoteObjectProxyWithErrorHandler": {
				"!type": "fn(handler: +Function) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXPCConnection"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActivityItemProvider": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActivityItemProvider"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActivityItemProvider"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActivityItemProvider"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"item": {
				"!type": "+Object"
			},
			"activityType": {
				"!type": "string"
			},
			"placeholderItem": {
				"!type": "+Object"
			},
			"ready": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"jscompletionBlock": {
				"!type": "+Function"
			},
			"concurrent": {
				"!type": "bool"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"queuePriority": {
				"!type": "number"
			},
			"executing": {
				"!type": "bool"
			},
			"finished": {
				"!type": "bool"
			},
			"dependencies": {
				"!type": "+Array"
			},
			"asynchronous": {
				"!type": "bool"
			},
			"threadPriority": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"initWithPlaceholderItem": {
				"!type": "fn(placeholderItem: +Object) -> +UIActivityItemProvider"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"waitUntilFinished": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"main": {
				"!type": "fn() -> void"
			},
			"addDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"removeDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActivityItemProvider"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITargetedPreview": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITargetedPreview"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITargetedPreview"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITargetedPreview"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"size": {
				"!type": "+Object"
			},
			"target": {
				"!type": "+UIPreviewTarget"
			},
			"parameters": {
				"!type": "+UIPreviewParameters"
			},
			"view": {
				"!type": "+UIView"
			},
			"initWithView": {
				"!type": "fn(view: +UIView) -> +UITargetedPreview"
			},
			"retargetedPreviewWithTarget": {
				"!type": "fn(newTarget: +UIPreviewTarget) -> +UITargetedPreview"
			},
			"initWithViewParametersTarget": {
				"!type": "fn(view: +UIView, parameters: +UIPreviewParameters, target: +UIPreviewTarget) -> +UITargetedPreview"
			},
			"initWithViewParameters": {
				"!type": "fn(view: +UIView, parameters: +UIPreviewParameters) -> +UITargetedPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITargetedPreview"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSRelativeDateTimeFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSRelativeDateTimeFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSRelativeDateTimeFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSRelativeDateTimeFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"locale": {
				"!type": "+NSLocale"
			},
			"unitsStyle": {
				"!type": "number"
			},
			"formattingContext": {
				"!type": "number"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"dateTimeStyle": {
				"!type": "number"
			},
			"localizedStringForDateRelativeToDate": {
				"!type": "fn(date: +Date, referenceDate: +Date) -> string"
			},
			"localizedStringFromDateComponents": {
				"!type": "fn(dateComponents: +NSDateComponents) -> string"
			},
			"localizedStringFromTimeInterval": {
				"!type": "fn(timeInterval: number) -> string"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSRelativeDateTimeFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAlertAction": {
		"actionWithTitleStyleHandler": {
			"!type": "fn(title: string, style: number, handler: +Function) -> +UIAlertAction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAlertAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAlertAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAlertAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"style": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"title": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAlertAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerEffect": {
		"effectWithPreview": {
			"!type": "fn(preview: +UITargetedPreview) -> +UIPointerEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preview": {
				"!type": "+UITargetedPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextPlaceholder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextPlaceholder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextPlaceholder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextPlaceholder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"rects": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextPlaceholder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLConnection": {
		"connectionWithRequestDelegate": {
			"!type": "fn(request: +NSURLRequest, delegate: +Object) -> +NSURLConnection"
		},
		"canHandleRequest": {
			"!type": "fn(request: +NSURLRequest) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLConnection"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLConnection"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLConnection"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"initWithRequestDelegateStartImmediately": {
				"!type": "fn(request: +NSURLRequest, delegate: +Object, startImmediately: bool) -> +NSURLConnection"
			},
			"unscheduleFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"initWithRequestDelegate": {
				"!type": "fn(request: +NSURLRequest, delegate: +Object) -> +NSURLConnection"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"setDelegateQueue": {
				"!type": "fn(queue: +NSOperationQueue) -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLConnection"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSProgress": {
		"progressWithTotalUnitCount": {
			"!type": "fn(unitCount: number) -> +NSProgress"
		},
		"currentProgress": {
			"!type": "fn() -> +NSProgress"
		},
		"discreteProgressWithTotalUnitCount": {
			"!type": "fn(unitCount: number) -> +NSProgress"
		},
		"progressWithTotalUnitCountParentPendingUnitCount": {
			"!type": "fn(unitCount: number, parent: +NSProgress, portionOfParentTotalUnitCount: number) -> +NSProgress"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSProgress"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSProgress"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSProgress"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"localizedDescription": {
				"!type": "string"
			},
			"paused": {
				"!type": "bool"
			},
			"fractionCompleted": {
				"!type": "number"
			},
			"fileOperationKind": {
				"!type": "string"
			},
			"estimatedTimeRemaining": {
				"!type": "number"
			},
			"indeterminate": {
				"!type": "bool"
			},
			"jscancellationHandler": {
				"!type": "+Function"
			},
			"fileURL": {
				"!type": "+NSURL"
			},
			"fileCompletedCount": {
				"!type": "number"
			},
			"pausable": {
				"!type": "bool"
			},
			"totalUnitCount": {
				"!type": "number"
			},
			"finished": {
				"!type": "bool"
			},
			"fileTotalCount": {
				"!type": "number"
			},
			"completedUnitCount": {
				"!type": "number"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"kind": {
				"!type": "string"
			},
			"jsresumingHandler": {
				"!type": "+Function"
			},
			"cancellable": {
				"!type": "bool"
			},
			"localizedAdditionalDescription": {
				"!type": "string"
			},
			"jspausingHandler": {
				"!type": "+Function"
			},
			"throughput": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"becomeCurrentWithPendingUnitCount": {
				"!type": "fn(unitCount: number) -> void"
			},
			"setUserInfoObjectForKey": {
				"!type": "fn(objectOrNil: +Object, key: string) -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"pause": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"initWithParentUserInfo": {
				"!type": "fn(parentProgressOrNil: +NSProgress, userInfoOrNil: +Object) -> +NSProgress"
			},
			"addChildWithPendingUnitCount": {
				"!type": "fn(child: +NSProgress, inUnitCount: number) -> void"
			},
			"performAsCurrentWithPendingUnitCountUsingBlock": {
				"!type": "fn(unitCount: number, work: +Function) -> void"
			},
			"resignCurrent": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSProgress"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSKeyedArchiver": {
		"archivedDataWithRootObjectRequiringSecureCodingError": {
			"!type": "fn(object: +Object, requiresSecureCoding: bool, error: +Object) -> +NSData"
		},
		"setClassNameForClass": {
			"!type": "fn(codedName: string, cls: +Object) -> void"
		},
		"archivedDataWithRootObject": {
			"!type": "fn(rootObject: +Object) -> +NSData"
		},
		"archiveRootObjectToFile": {
			"!type": "fn(rootObject: +Object, path: string) -> bool"
		},
		"classNameForClass": {
			"!type": "fn(cls: +Object) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSKeyedArchiver"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSKeyedArchiver"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSKeyedArchiver"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"requiresSecureCoding": {
				"!type": "bool"
			},
			"outputFormat": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"encodedData": {
				"!type": "+NSData"
			},
			"initRequiringSecureCoding": {
				"!type": "fn(requiresSecureCoding: bool) -> +NSKeyedArchiver"
			},
			"classNameForClass": {
				"!type": "fn(cls: +Object) -> string"
			},
			"encodeBoolForKey": {
				"!type": "fn(value: bool, key: string) -> void"
			},
			"setClassNameForClass": {
				"!type": "fn(codedName: string, cls: +Object) -> void"
			},
			"encodeInt32ForKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"encodeInt64ForKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"encodeFloatForKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSKeyedArchiver"
			},
			"finishEncoding": {
				"!type": "fn() -> void"
			},
			"encodeBytesLengthForKey": {
				"!type": "fn(bytes: +Object, length: number, key: string) -> void"
			},
			"encodeDoubleForKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"encodeIntForKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"initForWritingWithMutableData": {
				"!type": "fn(data: +NSMutableData) -> +NSKeyedArchiver"
			},
			"encodeObjectForKey": {
				"!type": "fn(object: +Object, key: string) -> void"
			},
			"encodeConditionalObjectForKey": {
				"!type": "fn(object: +Object, key: string) -> void"
			},
			"encodeValueOfObjCTypeAt": {
				"!type": "fn(type: +Object, addr: +Object) -> void"
			},
			"versionForClassName": {
				"!type": "fn(className: string) -> number"
			},
			"encodeDataObject": {
				"!type": "fn(data: +NSData) -> void"
			},
			"decodeDataObject": {
				"!type": "fn() -> +NSData"
			},
			"decodeValueOfObjCTypeAtSize": {
				"!type": "fn(type: +Object, data: +Object, size: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSKeyedArchiver"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIRegion": {
		"infiniteRegion": {
			"!type": "fn() -> +UIRegion"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIRegion"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIRegion"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIRegion"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithSize": {
				"!type": "fn(size: +Object) -> +UIRegion"
			},
			"initWithRadius": {
				"!type": "fn(radius: number) -> +UIRegion"
			},
			"regionByIntersectionWithRegion": {
				"!type": "fn(region: +UIRegion) -> +UIRegion"
			},
			"inverseRegion": {
				"!type": "fn() -> +UIRegion"
			},
			"containsPoint": {
				"!type": "fn(point: +Object) -> bool"
			},
			"regionByUnionWithRegion": {
				"!type": "fn(region: +UIRegion) -> +UIRegion"
			},
			"regionByDifferenceFromRegion": {
				"!type": "fn(region: +UIRegion) -> +UIRegion"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIRegion"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryOutlineDisclosure": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryOutlineDisclosure"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryOutlineDisclosure"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryOutlineDisclosure"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"style": {
				"!type": "number"
			},
			"jsactionHandler": {
				"!type": "+Function"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryOutlineDisclosure"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryOutlineDisclosure"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryOutlineDisclosure"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryCheckmark": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryCheckmark"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryCheckmark"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryCheckmark"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryCheckmark"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryCheckmark"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryCheckmark"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDragPreviewTarget": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDragPreviewTarget"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDragPreviewTarget"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDragPreviewTarget"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"container": {
				"!type": "+UIView"
			},
			"center": {
				"!type": "+Object"
			},
			"transform": {
				"!type": "+Object"
			},
			"initWithContainerCenterTransform": {
				"!type": "fn(container: +UIView, center: +Object, transform: +Object) -> +UIDragPreviewTarget"
			},
			"initWithContainerCenter": {
				"!type": "fn(container: +UIView, center: +Object) -> +UIDragPreviewTarget"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragPreviewTarget"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitAcceleration": {
		"metersPerSecondSquared": {
			"!type": "fn() -> +NSUnitAcceleration"
		},
		"gravity": {
			"!type": "fn() -> +NSUnitAcceleration"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitAcceleration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitAcceleration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitAcceleration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitAcceleration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitAcceleration"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitAcceleration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitAcceleration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewDiffableDataSourceSectionSnapshotHandlers": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewDiffableDataSourceSectionSnapshotHandlers"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewDiffableDataSourceSectionSnapshotHandlers"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewDiffableDataSourceSectionSnapshotHandlers"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jswillExpandItemHandler": {
				"!type": "+Function"
			},
			"jswillCollapseItemHandler": {
				"!type": "+Function"
			},
			"jsshouldCollapseItemHandler": {
				"!type": "+Function"
			},
			"jssnapshotForExpandingParentItemHandler": {
				"!type": "+Function"
			},
			"jsshouldExpandItemHandler": {
				"!type": "+Function"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewDiffableDataSourceSectionSnapshotHandlers"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitFuelEfficiency": {
		"litersPer100Kilometers": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"milesPerImperialGallon": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"milesPerGallon": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitFuelEfficiency"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitFuelEfficiency"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitFuelEfficiency"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitFuelEfficiency"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitFuelEfficiency"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAKeyframeAnimation": {
		"animationWithKeyPath": {
			"!type": "fn(path: string) -> +CAKeyframeAnimation"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CAKeyframeAnimation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAKeyframeAnimation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAKeyframeAnimation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAKeyframeAnimation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timingFunctions": {
				"!type": "+Array"
			},
			"rotationMode": {
				"!type": "string"
			},
			"continuityValues": {
				"!type": "+Array"
			},
			"calculationMode": {
				"!type": "string"
			},
			"biasValues": {
				"!type": "+Array"
			},
			"values": {
				"!type": "+Array"
			},
			"tensionValues": {
				"!type": "+Array"
			},
			"path": {
				"!type": "+Object"
			},
			"keyTimes": {
				"!type": "+Array"
			},
			"valueFunction": {
				"!type": "+CAValueFunction"
			},
			"cumulative": {
				"!type": "bool"
			},
			"additive": {
				"!type": "bool"
			},
			"keyPath": {
				"!type": "string"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAKeyframeAnimation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIOpenURLContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIOpenURLContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIOpenURLContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIOpenURLContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"URL": {
				"!type": "+NSURL"
			},
			"options": {
				"!type": "+UISceneOpenURLOptions"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIOpenURLContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitConverterLinear": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitConverterLinear"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitConverterLinear"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitConverterLinear"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"coefficient": {
				"!type": "number"
			},
			"constant": {
				"!type": "number"
			},
			"initWithCoefficientConstant": {
				"!type": "fn(coefficient: number, constant: number) -> +NSUnitConverterLinear"
			},
			"initWithCoefficient": {
				"!type": "fn(coefficient: number) -> +NSUnitConverterLinear"
			},
			"baseUnitValueFromValue": {
				"!type": "fn(value: number) -> number"
			},
			"valueFromBaseUnitValue": {
				"!type": "fn(baseUnitValue: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitConverterLinear"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusMovementHint": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusMovementHint"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusMovementHint"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusMovementHint"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"interactionTransform": {
				"!type": "+Object"
			},
			"perspectiveTransform": {
				"!type": "+Object"
			},
			"translation": {
				"!type": "+Object"
			},
			"rotation": {
				"!type": "+Object"
			},
			"movementDirection": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusMovementHint"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUbiquitousKeyValueStore": {
		"defaultStore": {
			"!type": "fn() -> +NSUbiquitousKeyValueStore"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUbiquitousKeyValueStore"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUbiquitousKeyValueStore"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUbiquitousKeyValueStore"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"dictionaryRepresentation": {
				"!type": "+Object"
			},
			"doubleForKey": {
				"!type": "fn(aKey: string) -> number"
			},
			"setDataForKey": {
				"!type": "fn(aData: +NSData, aKey: string) -> void"
			},
			"setArrayForKey": {
				"!type": "fn(anArray: +Array, aKey: string) -> void"
			},
			"boolForKey": {
				"!type": "fn(aKey: string) -> bool"
			},
			"setLongLongForKey": {
				"!type": "fn(value: number, aKey: string) -> void"
			},
			"synchronize": {
				"!type": "fn() -> bool"
			},
			"dataForKey": {
				"!type": "fn(aKey: string) -> +NSData"
			},
			"setStringForKey": {
				"!type": "fn(aString: string, aKey: string) -> void"
			},
			"arrayForKey": {
				"!type": "fn(aKey: string) -> +Array"
			},
			"setObjectForKey": {
				"!type": "fn(anObject: +Object, aKey: string) -> void"
			},
			"setDoubleForKey": {
				"!type": "fn(value: number, aKey: string) -> void"
			},
			"setBoolForKey": {
				"!type": "fn(value: bool, aKey: string) -> void"
			},
			"removeObjectForKey": {
				"!type": "fn(aKey: string) -> void"
			},
			"dictionaryForKey": {
				"!type": "fn(aKey: string) -> +Object"
			},
			"longLongForKey": {
				"!type": "fn(aKey: string) -> number"
			},
			"stringForKey": {
				"!type": "fn(aKey: string) -> string"
			},
			"objectForKey": {
				"!type": "fn(aKey: string) -> +Object"
			},
			"setDictionaryForKey": {
				"!type": "fn(aDictionary: +Object, aKey: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUbiquitousKeyValueStore"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDropInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDropInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDropInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDropInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsSimultaneousDropSessions": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIDropInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDropInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStepper": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStepper"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStepper"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStepper"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"stepValue": {
				"!type": "number"
			},
			"wraps": {
				"!type": "bool"
			},
			"maximumValue": {
				"!type": "number"
			},
			"autorepeat": {
				"!type": "bool"
			},
			"continuous": {
				"!type": "bool"
			},
			"value": {
				"!type": "number"
			},
			"minimumValue": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"backgroundImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"setDividerImageForLeftSegmentStateRightSegmentState": {
				"!type": "fn(image: +UIImage, leftState: number, rightState: number) -> void"
			},
			"dividerImageForLeftSegmentStateRightSegmentState": {
				"!type": "fn(state: number, state: number) -> +UIImage"
			},
			"setBackgroundImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"setIncrementImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"decrementImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"incrementImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"setDecrementImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIStepper"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIStepper"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIStepper"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIStepper"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIStepper"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStepper"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIRefreshControl": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIRefreshControl"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIRefreshControl"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIRefreshControl"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"tintColor": {
				"!type": "+UIColor"
			},
			"refreshing": {
				"!type": "bool"
			},
			"attributedTitle": {
				"!type": "+NSAttributedString"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"endRefreshing": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UIRefreshControl"
			},
			"beginRefreshing": {
				"!type": "fn() -> void"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIRefreshControl"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIRefreshControl"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIRefreshControl"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIRefreshControl"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIRefreshControl"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIRefreshControl"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneSession": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneSession"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneSession"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneSession"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"stateRestorationActivity": {
				"!type": "+NSUserActivity"
			},
			"scene": {
				"!type": "+UIScene"
			},
			"persistentIdentifier": {
				"!type": "string"
			},
			"role": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"configuration": {
				"!type": "+UISceneConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneSession"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIContextMenuConfiguration": {
		"configurationWithIdentifierPreviewProviderActionProvider": {
			"!type": "fn(identifier: +Object, previewProvider: +Function, actionProvider: +Function) -> +UIContextMenuConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIContextMenuConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIContextMenuConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIContextMenuConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIContextMenuConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewHeaderFooterView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewHeaderFooterView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewHeaderFooterView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewHeaderFooterView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"backgroundView": {
				"!type": "+UIView"
			},
			"contentView": {
				"!type": "+UIView"
			},
			"automaticallyUpdatesBackgroundConfiguration": {
				"!type": "bool"
			},
			"detailTextLabel": {
				"!type": "+UILabel"
			},
			"textLabel": {
				"!type": "+UILabel"
			},
			"contentConfiguration": {
				"!type": "+Object"
			},
			"automaticallyUpdatesContentConfiguration": {
				"!type": "bool"
			},
			"backgroundConfiguration": {
				"!type": "+UIBackgroundConfiguration"
			},
			"configurationState": {
				"!type": "+UIViewConfigurationState"
			},
			"reuseIdentifier": {
				"!type": "string"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"prepareForReuse": {
				"!type": "fn() -> void"
			},
			"initWithReuseIdentifier": {
				"!type": "fn(reuseIdentifier: string) -> +UITableViewHeaderFooterView"
			},
			"updateConfigurationUsingState": {
				"!type": "fn(state: +UIViewConfigurationState) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewHeaderFooterView"
			},
			"setNeedsUpdateConfiguration": {
				"!type": "fn() -> void"
			},
			"defaultContentConfiguration": {
				"!type": "fn() -> +UIListContentConfiguration"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewHeaderFooterView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITableViewHeaderFooterView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewHeaderFooterView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewTransitionLayout": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewTransitionLayout"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewTransitionLayout"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewTransitionLayout"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentLayout": {
				"!type": "+UICollectionViewLayout"
			},
			"nextLayout": {
				"!type": "+UICollectionViewLayout"
			},
			"transitionProgress": {
				"!type": "number"
			},
			"collectionView": {
				"!type": "+UICollectionView"
			},
			"valueForAnimatedKey": {
				"!type": "fn(key: string) -> number"
			},
			"updateValueForAnimatedKey": {
				"!type": "fn(value: number, key: string) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewTransitionLayout"
			},
			"initWithCurrentLayoutNextLayout": {
				"!type": "fn(currentLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> +UICollectionViewTransitionLayout"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewTransitionLayout"
			},
			"invalidateLayoutWithContext": {
				"!type": "fn(context: +UICollectionViewLayoutInvalidationContext) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewTransitionLayout"
			},
			"registerNibForDecorationViewOfKind": {
				"!type": "fn(nib: +UINib, elementKind: string) -> void"
			},
			"invalidateLayout": {
				"!type": "fn() -> void"
			},
			"registerClassForDecorationViewOfKind": {
				"!type": "fn(viewClass: +Object, elementKind: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewTransitionLayout"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDataDetector": {
		"dataDetectorWithTypesError": {
			"!type": "fn(checkingTypes: number, error: +Object) -> +NSDataDetector"
		},
		"regularExpressionWithPatternOptionsError": {
			"!type": "fn(pattern: string, options: number, error: +Object) -> +NSRegularExpression"
		},
		"escapedPatternForString": {
			"!type": "fn(string: string) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDataDetector"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDataDetector"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDataDetector"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"checkingTypes": {
				"!type": "number"
			},
			"pattern": {
				"!type": "string"
			},
			"options": {
				"!type": "number"
			},
			"numberOfCaptureGroups": {
				"!type": "number"
			},
			"initWithTypesError": {
				"!type": "fn(checkingTypes: number, error: +Object) -> +NSDataDetector"
			},
			"initWithPatternOptionsError": {
				"!type": "fn(pattern: string, options: number, error: +Object) -> +NSDataDetector"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDataDetector"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPurgeableData": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPurgeableData"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPurgeableData"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPurgeableData"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"length": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPurgeableData"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSHashTable": {
		"weakObjectsHashTable": {
			"!type": "fn() -> +NSHashTable"
		},
		"hashTableWithOptions": {
			"!type": "fn(options: number) -> +NSHashTable"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSHashTable"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSHashTable"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSHashTable"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"allObjects": {
				"!type": "+Array"
			},
			"anyObject": {
				"!type": "+Object"
			},
			"setRepresentation": {
				"!type": "+NSSet"
			},
			"pointerFunctions": {
				"!type": "+NSPointerFunctions"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"containsObject": {
				"!type": "fn(anObject: +Object) -> bool"
			},
			"isEqualToHashTable": {
				"!type": "fn(other: +NSHashTable) -> bool"
			},
			"addObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"minusHashTable": {
				"!type": "fn(other: +NSHashTable) -> void"
			},
			"unionHashTable": {
				"!type": "fn(other: +NSHashTable) -> void"
			},
			"isSubsetOfHashTable": {
				"!type": "fn(other: +NSHashTable) -> bool"
			},
			"initWithOptionsCapacity": {
				"!type": "fn(options: number, initialCapacity: number) -> +NSHashTable"
			},
			"removeAllObjects": {
				"!type": "fn() -> void"
			},
			"initWithPointerFunctionsCapacity": {
				"!type": "fn(functions: +NSPointerFunctions, initialCapacity: number) -> +NSHashTable"
			},
			"intersectHashTable": {
				"!type": "fn(other: +NSHashTable) -> void"
			},
			"member": {
				"!type": "fn(object: +Object) -> +Object"
			},
			"intersectsHashTable": {
				"!type": "fn(other: +NSHashTable) -> bool"
			},
			"removeObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSHashTable"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBarController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBarController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBarController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBarController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"viewControllers": {
				"!type": "+Array"
			},
			"selectedViewController": {
				"!type": "+UIViewController"
			},
			"delegate": {
				"!type": "+Object"
			},
			"tabBar": {
				"!type": "+UITabBar"
			},
			"moreNavigationController": {
				"!type": "+UINavigationController"
			},
			"selectedIndex": {
				"!type": "number"
			},
			"customizableViewControllers": {
				"!type": "+Array"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setViewControllersAnimated": {
				"!type": "fn(viewControllers: +Array, animated: bool) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UITabBarController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBarController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPreviewParameters": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPreviewParameters"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPreviewParameters"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPreviewParameters"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"visiblePath": {
				"!type": "+UIBezierPath"
			},
			"shadowPath": {
				"!type": "+UIBezierPath"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"initWithTextLineRects": {
				"!type": "fn(textLineRects: +Array) -> +UIPreviewParameters"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewParameters"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewParameters"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentBrowserAction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentBrowserAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentBrowserAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentBrowserAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"supportsMultipleItems": {
				"!type": "bool"
			},
			"image": {
				"!type": "+UIImage"
			},
			"localizedTitle": {
				"!type": "string"
			},
			"supportedContentTypes": {
				"!type": "+Array"
			},
			"identifier": {
				"!type": "string"
			},
			"availability": {
				"!type": "number"
			},
			"initWithIdentifierLocalizedTitleAvailabilityHandler": {
				"!type": "fn(identifier: string, localizedTitle: string, availability: number, handler: +Function) -> +UIDocumentBrowserAction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentBrowserAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDiffableDataSourceSectionSnapshot": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDiffableDataSourceSectionSnapshot"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDiffableDataSourceSectionSnapshot"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDiffableDataSourceSectionSnapshot"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"items": {
				"!type": "+Array"
			},
			"rootItems": {
				"!type": "+Array"
			},
			"visibleItems": {
				"!type": "+Array"
			},
			"deleteAllItems": {
				"!type": "fn() -> void"
			},
			"containsItem": {
				"!type": "fn(item: +Object) -> bool"
			},
			"indexOfItem": {
				"!type": "fn(item: +Object) -> number"
			},
			"insertItemsBeforeItem": {
				"!type": "fn(items: +Array, beforeIdentifier: +Object) -> void"
			},
			"expandedItems": {
				"!type": "fn() -> +Array"
			},
			"replaceChildrenOfParentItemWithSnapshot": {
				"!type": "fn(parentItem: +Object, snapshot: +NSDiffableDataSourceSectionSnapshot) -> void"
			},
			"snapshotOfParentItemIncludingParentItem": {
				"!type": "fn(parentItem: +Object, includingParentItem: bool) -> +NSDiffableDataSourceSectionSnapshot"
			},
			"deleteItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"insertSnapshotAfterItem": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSectionSnapshot, item: +Object) -> +Object"
			},
			"visualDescription": {
				"!type": "fn() -> string"
			},
			"expandItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"isExpanded": {
				"!type": "fn(item: +Object) -> bool"
			},
			"jsinit": {
				"!type": "fn() -> +NSDiffableDataSourceSectionSnapshot"
			},
			"insertItemsAfterItem": {
				"!type": "fn(items: +Array, afterIdentifier: +Object) -> void"
			},
			"snapshotOfParentItem": {
				"!type": "fn(parentItem: +Object) -> +NSDiffableDataSourceSectionSnapshot"
			},
			"isVisible": {
				"!type": "fn(item: +Object) -> bool"
			},
			"insertSnapshotBeforeItem": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSectionSnapshot, item: +Object) -> void"
			},
			"levelOfItem": {
				"!type": "fn(item: +Object) -> number"
			},
			"appendItemsIntoParentItem": {
				"!type": "fn(items: +Array, parentItem: +Object) -> void"
			},
			"collapseItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"parentOfChildItem": {
				"!type": "fn(childItem: +Object) -> +Object"
			},
			"items": {
				"!type": "fn() -> +Array"
			},
			"appendItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDiffableDataSourceSectionSnapshot"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNetServiceBrowser": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNetServiceBrowser"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNetServiceBrowser"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNetServiceBrowser"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"includesPeerToPeer": {
				"!type": "bool"
			},
			"searchForServicesOfTypeInDomain": {
				"!type": "fn(type: string, domainString: string) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"stop": {
				"!type": "fn() -> void"
			},
			"searchForRegistrationDomains": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSNetServiceBrowser"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"searchForBrowsableDomains": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNetServiceBrowser"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentInteractionController": {
		"interactionControllerWithURL": {
			"!type": "fn(url: +NSURL) -> +UIDocumentInteractionController"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentInteractionController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentInteractionController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentInteractionController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"gestureRecognizers": {
				"!type": "+Array"
			},
			"name": {
				"!type": "string"
			},
			"icons": {
				"!type": "+Array"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"UTI": {
				"!type": "string"
			},
			"delegate": {
				"!type": "+Object"
			},
			"annotation": {
				"!type": "+Object"
			},
			"dismissPreviewAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"presentOpenInMenuFromRectInViewAnimated": {
				"!type": "fn(rect: +Object, view: +UIView, animated: bool) -> bool"
			},
			"dismissMenuAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"presentOptionsMenuFromRectInViewAnimated": {
				"!type": "fn(rect: +Object, view: +UIView, animated: bool) -> bool"
			},
			"presentOptionsMenuFromBarButtonItemAnimated": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool) -> bool"
			},
			"presentOpenInMenuFromBarButtonItemAnimated": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool) -> bool"
			},
			"presentPreviewAnimated": {
				"!type": "fn(animated: bool) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentInteractionController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableDictionary": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableDictionary"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableDictionary"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableDictionary"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"removeObjectForKey": {
				"!type": "fn(aKey: +Object) -> void"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSMutableDictionary"
			},
			"setObjectForKey": {
				"!type": "fn(anObject: +Object, aKey: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableDictionary"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableDictionary"
			},
			"initWithObjectsForKeysCount": {
				"!type": "fn(objects: +Object, keys: +Object, cnt: number) -> +NSMutableDictionary"
			},
			"keyEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableDictionary"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableDictionary"
			},
			"objectForKey": {
				"!type": "fn(aKey: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableDictionary"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILabel": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILabel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILabel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILabel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preferredMaxLayoutWidth": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"textColor": {
				"!type": "+UIColor"
			},
			"adjustsFontSizeToFitWidth": {
				"!type": "bool"
			},
			"baselineAdjustment": {
				"!type": "number"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"numberOfLines": {
				"!type": "number"
			},
			"text": {
				"!type": "string"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"enabled": {
				"!type": "bool"
			},
			"minimumFontSize": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"adjustsLetterSpacingToFitWidth": {
				"!type": "bool"
			},
			"shadowColor": {
				"!type": "+UIColor"
			},
			"highlightedTextColor": {
				"!type": "+UIColor"
			},
			"allowsDefaultTighteningForTruncation": {
				"!type": "bool"
			},
			"minimumScaleFactor": {
				"!type": "number"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"font": {
				"!type": "+UIFont"
			},
			"lineBreakStrategy": {
				"!type": "number"
			},
			"textAlignment": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"textRectForBoundsLimitedToNumberOfLines": {
				"!type": "fn(bounds: +Object, numberOfLines: number) -> +Object"
			},
			"drawTextInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UILabel"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UILabel"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILabel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSExpression": {
		"expressionForKeyPath": {
			"!type": "fn(keyPath: string) -> +NSExpression"
		},
		"expressionForConditionalTrueExpressionFalseExpression": {
			"!type": "fn(predicate: +NSPredicate, trueExpression: +NSExpression, falseExpression: +NSExpression) -> +NSExpression"
		},
		"expressionWithFormat": {
			"!type": "fn(expressionFormat: string, args: Array.prototype) -> +NSExpression"
		},
		"expressionForUnionSetWith": {
			"!type": "fn(left: +NSExpression, right: +NSExpression) -> +NSExpression"
		},
		"expressionForVariable": {
			"!type": "fn(string: string) -> +NSExpression"
		},
		"expressionWithFormatArgumentArray": {
			"!type": "fn(expressionFormat: string, arguments: +Array) -> +NSExpression"
		},
		"expressionForConstantValue": {
			"!type": "fn(obj: +Object) -> +NSExpression"
		},
		"expressionForSubqueryUsingIteratorVariablePredicate": {
			"!type": "fn(expression: +NSExpression, variable: string, predicate: +NSPredicate) -> +NSExpression"
		},
		"expressionWithFormatArguments": {
			"!type": "fn(expressionFormat: string, argList: +Object) -> +NSExpression"
		},
		"expressionForFunctionArguments": {
			"!type": "fn(name: string, parameters: +Array) -> +NSExpression"
		},
		"expressionForAggregate": {
			"!type": "fn(subexpressions: +Array) -> +NSExpression"
		},
		"expressionForAnyKey": {
			"!type": "fn() -> +NSExpression"
		},
		"expressionForIntersectSetWith": {
			"!type": "fn(left: +NSExpression, right: +NSExpression) -> +NSExpression"
		},
		"expressionForBlockArguments": {
			"!type": "fn(block: +Function, arguments: +Array) -> +NSExpression"
		},
		"expressionForFunctionSelectorNameArguments": {
			"!type": "fn(target: +NSExpression, name: string, parameters: +Array) -> +NSExpression"
		},
		"expressionForEvaluatedObject": {
			"!type": "fn() -> +NSExpression"
		},
		"expressionForMinusSetWith": {
			"!type": "fn(left: +NSExpression, right: +NSExpression) -> +NSExpression"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSExpression"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSExpression"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSExpression"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"function": {
				"!type": "string"
			},
			"trueExpression": {
				"!type": "+NSExpression"
			},
			"constantValue": {
				"!type": "+Object"
			},
			"leftExpression": {
				"!type": "+NSExpression"
			},
			"jsexpressionBlock": {
				"!type": "+Function"
			},
			"expressionType": {
				"!type": "number"
			},
			"falseExpression": {
				"!type": "+NSExpression"
			},
			"predicate": {
				"!type": "+NSPredicate"
			},
			"collection": {
				"!type": "+Object"
			},
			"rightExpression": {
				"!type": "+NSExpression"
			},
			"operand": {
				"!type": "+NSExpression"
			},
			"arguments": {
				"!type": "+Array"
			},
			"variable": {
				"!type": "string"
			},
			"keyPath": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSExpression"
			},
			"expressionValueWithObjectContext": {
				"!type": "fn(object: +Object, context: +NSMutableDictionary) -> +Object"
			},
			"allowEvaluation": {
				"!type": "fn() -> void"
			},
			"initWithExpressionType": {
				"!type": "fn(type: number) -> +NSExpression"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSExpression"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKMutablePayment": {
		"paymentWithProduct": {
			"!type": "fn(product: +SKProduct) -> +SKMutablePayment"
		},
		"paymentWithProductIdentifier": {
			"!type": "fn(identifier: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKMutablePayment"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKMutablePayment"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKMutablePayment"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paymentDiscount": {
				"!type": "+SKPaymentDiscount"
			},
			"productIdentifier": {
				"!type": "string"
			},
			"simulatesAskToBuyInSandbox": {
				"!type": "bool"
			},
			"requestData": {
				"!type": "+NSData"
			},
			"applicationUsername": {
				"!type": "string"
			},
			"quantity": {
				"!type": "number"
			},
			"paymentDiscount": {
				"!type": "+SKPaymentDiscount"
			},
			"productIdentifier": {
				"!type": "string"
			},
			"simulatesAskToBuyInSandbox": {
				"!type": "bool"
			},
			"requestData": {
				"!type": "+NSData"
			},
			"applicationUsername": {
				"!type": "string"
			},
			"quantity": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKMutablePayment"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStoryboardSegue": {
		"segueWithIdentifierSourceDestinationPerformHandler": {
			"!type": "fn(identifier: string, source: +UIViewController, destination: +UIViewController, performHandler: +Function) -> +UIStoryboardSegue"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStoryboardSegue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStoryboardSegue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStoryboardSegue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "string"
			},
			"sourceViewController": {
				"!type": "+UIViewController"
			},
			"destinationViewController": {
				"!type": "+UIViewController"
			},
			"perform": {
				"!type": "fn() -> void"
			},
			"initWithIdentifierSourceDestination": {
				"!type": "fn(identifier: string, source: +UIViewController, destination: +UIViewController) -> +UIStoryboardSegue"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStoryboardSegue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIVisualEffect": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIVisualEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIVisualEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIVisualEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIVisualEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMenuElement": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMenuElement"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMenuElement"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMenuElement"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMenuElement"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMenuElement"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDragPreview": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDragPreview"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDragPreview"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDragPreview"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"parameters": {
				"!type": "+UIDragPreviewParameters"
			},
			"view": {
				"!type": "+UIView"
			},
			"initWithView": {
				"!type": "fn(view: +UIView) -> +UIDragPreview"
			},
			"initWithViewParameters": {
				"!type": "fn(view: +UIView, parameters: +UIDragPreviewParameters) -> +UIDragPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragPreview"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitInformationStorage": {
		"petabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"zebibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"exabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"yottabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"gibibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"gigabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"terabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"kibibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"megabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"gibibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"exbibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"megabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"kilobits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"yottabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"zettabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"mebibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"kilobytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"tebibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"bits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"yobibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"exbibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"mebibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"gigabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"yobibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"petabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"pebibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"zebibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"zettabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"tebibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"nibbles": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"kibibits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"bytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"terabits": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"pebibytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"exabytes": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitInformationStorage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitInformationStorage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitInformationStorage"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitInformationStorage"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitInformationStorage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOrderedSet": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOrderedSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOrderedSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOrderedSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"objectAtIndex": {
				"!type": "fn(idx: number) -> +Object"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSOrderedSet"
			},
			"indexOfObject": {
				"!type": "fn(object: +Object) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSOrderedSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSOrderedSet"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOrderedSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIToolbar": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIToolbar"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIToolbar"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIToolbar"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"items": {
				"!type": "+Array"
			},
			"barStyle": {
				"!type": "number"
			},
			"barTintColor": {
				"!type": "+UIColor"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"compactAppearance": {
				"!type": "+UIToolbarAppearance"
			},
			"delegate": {
				"!type": "+Object"
			},
			"standardAppearance": {
				"!type": "+UIToolbarAppearance"
			},
			"translucent": {
				"!type": "bool"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setItemsAnimated": {
				"!type": "fn(items: +Array, animated: bool) -> void"
			},
			"shadowImageForToolbarPosition": {
				"!type": "fn(topOrBottom: number) -> +UIImage"
			},
			"setBackgroundImageForToolbarPositionBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, topOrBottom: number, barMetrics: number) -> void"
			},
			"backgroundImageForToolbarPositionBarMetrics": {
				"!type": "fn(topOrBottom: number, barMetrics: number) -> +UIImage"
			},
			"setShadowImageForToolbarPosition": {
				"!type": "fn(shadowImage: +UIImage, topOrBottom: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIToolbar"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIToolbar"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIToolbar"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNotificationCenter": {
		"defaultCenter": {
			"!type": "fn() -> +NSNotificationCenter"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNotificationCenter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNotificationCenter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNotificationCenter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"removeObserver": {
				"!type": "fn(observer: +Object) -> void"
			},
			"removeObserverNameObject": {
				"!type": "fn(observer: +Object, aName: string, anObject: +Object) -> void"
			},
			"addObserverForNameObjectQueueUsingBlock": {
				"!type": "fn(name: string, obj: +Object, queue: +NSOperationQueue, block: +Function) -> +Object"
			},
			"postNotification": {
				"!type": "fn(notification: +NSNotification) -> void"
			},
			"addObserverSelectorNameObject": {
				"!type": "fn(observer: +Object, aSelector: string, aName: string, anObject: +Object) -> void"
			},
			"postNotificationNameObject": {
				"!type": "fn(aName: string, anObject: +Object) -> void"
			},
			"postNotificationNameObjectUserInfo": {
				"!type": "fn(aName: string, anObject: +Object, aUserInfo: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNotificationCenter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIApplication": {
		"sharedApplication": {
			"!type": "fn() -> +UIApplication"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIApplication"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIApplication"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIApplication"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"connectedScenes": {
				"!type": "+NSSet"
			},
			"applicationState": {
				"!type": "number"
			},
			"backgroundRefreshStatus": {
				"!type": "number"
			},
			"statusBarOrientation": {
				"!type": "number"
			},
			"statusBarHidden": {
				"!type": "bool"
			},
			"applicationIconBadgeNumber": {
				"!type": "number"
			},
			"supportsMultipleScenes": {
				"!type": "bool"
			},
			"protectedDataAvailable": {
				"!type": "bool"
			},
			"openSessions": {
				"!type": "+NSSet"
			},
			"statusBarOrientationAnimationDuration": {
				"!type": "number"
			},
			"ignoringInteractionEvents": {
				"!type": "bool"
			},
			"backgroundTimeRemaining": {
				"!type": "number"
			},
			"preferredContentSizeCategory": {
				"!type": "string"
			},
			"keyWindow": {
				"!type": "+UIWindow"
			},
			"applicationSupportsShakeToEdit": {
				"!type": "bool"
			},
			"statusBarFrame": {
				"!type": "+Object"
			},
			"windows": {
				"!type": "+Array"
			},
			"idleTimerDisabled": {
				"!type": "bool"
			},
			"statusBarStyle": {
				"!type": "number"
			},
			"userInterfaceLayoutDirection": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"networkActivityIndicatorVisible": {
				"!type": "bool"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setMinimumBackgroundFetchInterval": {
				"!type": "fn(minimumBackgroundFetchInterval: number) -> void"
			},
			"endIgnoringInteractionEvents": {
				"!type": "fn() -> void"
			},
			"sendEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"sendActionToFromForEvent": {
				"!type": "fn(action: string, target: +Object, sender: +Object, event: +UIEvent) -> bool"
			},
			"requestSceneSessionActivationUserActivityOptionsErrorHandler": {
				"!type": "fn(sceneSession: +UISceneSession, userActivity: +NSUserActivity, options: +UISceneActivationRequestOptions, errorHandler: +Function) -> void"
			},
			"openURL": {
				"!type": "fn(url: +NSURL) -> bool"
			},
			"beginBackgroundTaskWithExpirationHandler": {
				"!type": "fn(handler: +Function) -> number"
			},
			"openURLOptionsCompletionHandler": {
				"!type": "fn(url: +NSURL, options: +Object, completion: +Function) -> void"
			},
			"requestSceneSessionRefresh": {
				"!type": "fn(sceneSession: +UISceneSession) -> void"
			},
			"canOpenURL": {
				"!type": "fn(url: +NSURL) -> bool"
			},
			"requestSceneSessionDestructionOptionsErrorHandler": {
				"!type": "fn(sceneSession: +UISceneSession, options: +UISceneDestructionRequestOptions, errorHandler: +Function) -> void"
			},
			"endBackgroundTask": {
				"!type": "fn(identifier: number) -> void"
			},
			"beginIgnoringInteractionEvents": {
				"!type": "fn() -> void"
			},
			"beginBackgroundTaskWithNameExpirationHandler": {
				"!type": "fn(taskName: string, handler: +Function) -> number"
			},
			"supportedInterfaceOrientationsForWindow": {
				"!type": "fn(window: +UIWindow) -> number"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIApplication"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAMetalLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAMetalLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAMetalLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAMetalLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAMetalLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"drawableSize": {
				"!type": "+Object"
			},
			"colorspace": {
				"!type": "+Object"
			},
			"allowsNextDrawableTimeout": {
				"!type": "bool"
			},
			"presentsWithTransaction": {
				"!type": "bool"
			},
			"framebufferOnly": {
				"!type": "bool"
			},
			"maximumDrawableCount": {
				"!type": "number"
			},
			"pixelFormat": {
				"!type": "number"
			},
			"device": {
				"!type": "+Object"
			},
			"preferredDevice": {
				"!type": "+Object"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"nextDrawable": {
				"!type": "fn() -> +Object"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAMetalLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAMetalLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAMetalLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAMetalLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAMetalLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLocale": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLocale"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLocale"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLocale"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithLocaleIdentifier": {
				"!type": "fn(string: string) -> +NSLocale"
			},
			"displayNameForKeyValue": {
				"!type": "fn(key: string, value: +Object) -> string"
			},
			"objectForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSLocale"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLocale"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImageConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImageConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImageConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImageConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"configurationWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> +UIImageConfiguration"
			},
			"configurationByApplyingConfiguration": {
				"!type": "fn(otherConfiguration: +UIImageConfiguration) -> +UIImageConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImageConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTimeZone": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTimeZone"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTimeZone"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTimeZone"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"data": {
				"!type": "+NSData"
			},
			"name": {
				"!type": "string"
			},
			"isDaylightSavingTimeForDate": {
				"!type": "fn(aDate: +Date) -> bool"
			},
			"secondsFromGMTForDate": {
				"!type": "fn(aDate: +Date) -> number"
			},
			"abbreviationForDate": {
				"!type": "fn(aDate: +Date) -> string"
			},
			"daylightSavingTimeOffsetForDate": {
				"!type": "fn(aDate: +Date) -> number"
			},
			"nextDaylightSavingTimeTransitionAfterDate": {
				"!type": "fn(aDate: +Date) -> +Date"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTimeZone"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIManagedDocument": {
		"persistentStoreName": {
			"!type": "fn() -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIManagedDocument"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIManagedDocument"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIManagedDocument"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"modelConfiguration": {
				"!type": "string"
			},
			"managedObjectModel": {
				"!type": "+NSManagedObjectModel"
			},
			"persistentStoreOptions": {
				"!type": "+Object"
			},
			"managedObjectContext": {
				"!type": "+NSManagedObjectContext"
			},
			"hasUnsavedChanges": {
				"!type": "bool"
			},
			"fileModificationDate": {
				"!type": "+Date"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"fileType": {
				"!type": "string"
			},
			"localizedName": {
				"!type": "string"
			},
			"documentState": {
				"!type": "number"
			},
			"savingFileType": {
				"!type": "string"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"fileURL": {
				"!type": "+NSURL"
			},
			"readAdditionalContentFromURLError": {
				"!type": "fn(absoluteURL: +NSURL, error: +Object) -> bool"
			},
			"configurePersistentStoreCoordinatorForURLOfTypeModelConfigurationStoreOptionsError": {
				"!type": "fn(storeURL: +NSURL, fileType: string, configuration: string, storeOptions: +Object, error: +Object) -> bool"
			},
			"persistentStoreTypeForFileType": {
				"!type": "fn(fileType: string) -> string"
			},
			"additionalContentForURLError": {
				"!type": "fn(absoluteURL: +NSURL, error: +Object) -> +Object"
			},
			"writeAdditionalContentToURLOriginalContentsURLError": {
				"!type": "fn(content: +Object, absoluteURL: +NSURL, absoluteOriginalContentsURL: +NSURL, error: +Object) -> bool"
			},
			"performAsynchronousFileAccessUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"closeWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"updateChangeCountWithTokenForSaveOperation": {
				"!type": "fn(changeCountToken: +Object, saveOperation: number) -> void"
			},
			"writeContentsToURLForSaveOperationOriginalContentsURLError": {
				"!type": "fn(contents: +Object, url: +NSURL, saveOperation: number, originalContentsURL: +NSURL, outError: +Object) -> bool"
			},
			"revertToContentsOfURLCompletionHandler": {
				"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
			},
			"updateChangeCount": {
				"!type": "fn(change: number) -> void"
			},
			"disableEditing": {
				"!type": "fn() -> void"
			},
			"initWithFileURL": {
				"!type": "fn(url: +NSURL) -> +UIManagedDocument"
			},
			"handleErrorUserInteractionPermitted": {
				"!type": "fn(error: +NSError, userInteractionPermitted: bool) -> void"
			},
			"enableEditing": {
				"!type": "fn() -> void"
			},
			"fileAttributesToWriteToURLForSaveOperationError": {
				"!type": "fn(url: +NSURL, saveOperation: number, outError: +Object) -> +Object"
			},
			"readFromURLError": {
				"!type": "fn(url: +NSURL, outError: +Object) -> bool"
			},
			"userInteractionNoLongerPermittedForError": {
				"!type": "fn(error: +NSError) -> void"
			},
			"saveToURLForSaveOperationCompletionHandler": {
				"!type": "fn(url: +NSURL, saveOperation: number, completionHandler: +Function) -> void"
			},
			"fileNameExtensionForTypeSaveOperation": {
				"!type": "fn(typeName: string, saveOperation: number) -> string"
			},
			"contentsForTypeError": {
				"!type": "fn(typeName: string, outError: +Object) -> +Object"
			},
			"autosaveWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"finishedHandlingErrorRecovered": {
				"!type": "fn(error: +NSError, recovered: bool) -> void"
			},
			"loadFromContentsOfTypeError": {
				"!type": "fn(contents: +Object, typeName: string, outError: +Object) -> bool"
			},
			"changeCountTokenForSaveOperation": {
				"!type": "fn(saveOperation: number) -> +Object"
			},
			"writeContentsAndAttributesSafelyToURLForSaveOperationError": {
				"!type": "fn(contents: +Object, additionalFileAttributes: +Object, url: +NSURL, saveOperation: number, outError: +Object) -> bool"
			},
			"openWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIManagedDocument"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMutableUserNotificationAction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMutableUserNotificationAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMutableUserNotificationAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMutableUserNotificationAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"destructive": {
				"!type": "bool"
			},
			"parameters": {
				"!type": "+Object"
			},
			"title": {
				"!type": "string"
			},
			"authenticationRequired": {
				"!type": "bool"
			},
			"behavior": {
				"!type": "number"
			},
			"identifier": {
				"!type": "string"
			},
			"activationMode": {
				"!type": "number"
			},
			"destructive": {
				"!type": "bool"
			},
			"parameters": {
				"!type": "+Object"
			},
			"title": {
				"!type": "string"
			},
			"authenticationRequired": {
				"!type": "bool"
			},
			"behavior": {
				"!type": "number"
			},
			"identifier": {
				"!type": "string"
			},
			"activationMode": {
				"!type": "number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMutableUserNotificationAction"
			},
			"jsinit": {
				"!type": "fn() -> +UIMutableUserNotificationAction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMutableUserNotificationAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSInvocationOperation": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSInvocationOperation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSInvocationOperation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSInvocationOperation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invocation": {
				"!type": "+NSInvocation"
			},
			"result": {
				"!type": "+Object"
			},
			"ready": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"jscompletionBlock": {
				"!type": "+Function"
			},
			"concurrent": {
				"!type": "bool"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"queuePriority": {
				"!type": "number"
			},
			"executing": {
				"!type": "bool"
			},
			"finished": {
				"!type": "bool"
			},
			"dependencies": {
				"!type": "+Array"
			},
			"asynchronous": {
				"!type": "bool"
			},
			"threadPriority": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"initWithInvocation": {
				"!type": "fn(inv: +NSInvocation) -> +NSInvocationOperation"
			},
			"initWithTargetSelectorObject": {
				"!type": "fn(target: +Object, sel: string, arg: +Object) -> +NSInvocationOperation"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"waitUntilFinished": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"main": {
				"!type": "fn() -> void"
			},
			"addDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"removeDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSInvocationOperation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIContextualAction": {
		"contextualActionWithStyleTitleHandler": {
			"!type": "fn(style: number, title: string, handler: +Function) -> +UIContextualAction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIContextualAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIContextualAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIContextualAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"style": {
				"!type": "number"
			},
			"jshandler": {
				"!type": "+Function"
			},
			"image": {
				"!type": "+UIImage"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"title": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIContextualAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAttachmentBehavior": {
		"limitAttachmentWithItemOffsetFromCenterAttachedToItemOffsetFromCenter": {
			"!type": "fn(item1: +Object, offset1: +Object, item2: +Object, offset2: +Object) -> +UIAttachmentBehavior"
		},
		"slidingAttachmentWithItemAttachedToItemAttachmentAnchorAxisOfTranslation": {
			"!type": "fn(item1: +Object, item2: +Object, point: +Object, axis: +Object) -> +UIAttachmentBehavior"
		},
		"pinAttachmentWithItemAttachedToItemAttachmentAnchor": {
			"!type": "fn(item1: +Object, item2: +Object, point: +Object) -> +UIAttachmentBehavior"
		},
		"slidingAttachmentWithItemAttachmentAnchorAxisOfTranslation": {
			"!type": "fn(item: +Object, point: +Object, axis: +Object) -> +UIAttachmentBehavior"
		},
		"fixedAttachmentWithItemAttachedToItemAttachmentAnchor": {
			"!type": "fn(item1: +Object, item2: +Object, point: +Object) -> +UIAttachmentBehavior"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAttachmentBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAttachmentBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAttachmentBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attachmentRange": {
				"!type": "+Object"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"frictionTorque": {
				"!type": "number"
			},
			"items": {
				"!type": "+Array"
			},
			"attachedBehaviorType": {
				"!type": "number"
			},
			"length": {
				"!type": "number"
			},
			"frequency": {
				"!type": "number"
			},
			"damping": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"initWithItemAttachedToAnchor": {
				"!type": "fn(item: +Object, point: +Object) -> +UIAttachmentBehavior"
			},
			"initWithItemOffsetFromCenterAttachedToItemOffsetFromCenter": {
				"!type": "fn(item1: +Object, offset1: +Object, item2: +Object, offset2: +Object) -> +UIAttachmentBehavior"
			},
			"initWithItemOffsetFromCenterAttachedToAnchor": {
				"!type": "fn(item: +Object, offset: +Object, point: +Object) -> +UIAttachmentBehavior"
			},
			"initWithItemAttachedToItem": {
				"!type": "fn(item1: +Object, item2: +Object) -> +UIAttachmentBehavior"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAttachmentBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutDimension": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutDimension"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutDimension"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutDimension"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"constraintEqualToAnchorMultiplierConstant": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number, c: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToConstant": {
				"!type": "fn(c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorMultiplierConstant": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number, c: number) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorMultiplierConstant": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number, c: number) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorMultiplier": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToConstant": {
				"!type": "fn(c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToConstant": {
				"!type": "fn(c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorMultiplier": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchorMultiplier": {
				"!type": "fn(anchor: +NSLayoutDimension, m: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutDimension"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrinterPickerController": {
		"printerPickerControllerWithInitiallySelectedPrinter": {
			"!type": "fn(printer: +UIPrinter) -> +UIPrinterPickerController"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrinterPickerController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrinterPickerController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrinterPickerController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"selectedPrinter": {
				"!type": "+UIPrinter"
			},
			"presentFromBarButtonItemAnimatedCompletionHandler": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool, completion: +Function) -> bool"
			},
			"dismissAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"presentAnimatedCompletionHandler": {
				"!type": "fn(animated: bool, completion: +Function) -> bool"
			},
			"presentFromRectInViewAnimatedCompletionHandler": {
				"!type": "fn(rect: +Object, view: +UIView, animated: bool, completion: +Function) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrinterPickerController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIListContentImageProperties": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIListContentImageProperties"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIListContentImageProperties"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIListContentImageProperties"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedLayoutSize": {
				"!type": "+Object"
			},
			"accessibilityIgnoresInvertColors": {
				"!type": "bool"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"preferredSymbolConfiguration": {
				"!type": "+UIImageSymbolConfiguration"
			},
			"jstintColorTransformer": {
				"!type": "+Function"
			},
			"maximumSize": {
				"!type": "+Object"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"resolvedTintColorForTintColor": {
				"!type": "fn(tintColor: +UIColor) -> +UIColor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIListContentImageProperties"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarButtonItemGroup": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarButtonItemGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarButtonItemGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarButtonItemGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"displayingRepresentativeItem": {
				"!type": "bool"
			},
			"representativeItem": {
				"!type": "+UIBarButtonItem"
			},
			"barButtonItems": {
				"!type": "+Array"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarButtonItemGroup"
			},
			"initWithBarButtonItemsRepresentativeItem": {
				"!type": "fn(barButtonItems: +Array, representativeItem: +UIBarButtonItem) -> +UIBarButtonItemGroup"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItemGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CATiledLayer": {
		"fadeDuration": {
			"!type": "fn() -> number"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CATiledLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CATiledLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CATiledLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CATiledLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"tileSize": {
				"!type": "+Object"
			},
			"levelsOfDetailBias": {
				"!type": "number"
			},
			"levelsOfDetail": {
				"!type": "number"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CATiledLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CATiledLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CATiledLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CATiledLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CATiledLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIViewConfigurationState": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIViewConfigurationState"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIViewConfigurationState"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIViewConfigurationState"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"disabled": {
				"!type": "bool"
			},
			"highlighted": {
				"!type": "bool"
			},
			"selected": {
				"!type": "bool"
			},
			"focused": {
				"!type": "bool"
			},
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIViewConfigurationState"
			},
			"initWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> +UIViewConfigurationState"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIViewConfigurationState"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXPCInterface": {
		"interfaceWithProtocol": {
			"!type": "fn(protocol: +Protocol) -> +NSXPCInterface"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXPCInterface"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXPCInterface"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXPCInterface"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"protocol": {
				"!type": "+Protocol"
			},
			"setInterfaceForSelectorArgumentIndexOfReply": {
				"!type": "fn(ifc: +NSXPCInterface, sel: string, arg: number, ofReply: bool) -> void"
			},
			"classesForSelectorArgumentIndexOfReply": {
				"!type": "fn(sel: string, arg: number, ofReply: bool) -> +NSSet"
			},
			"setClassesForSelectorArgumentIndexOfReply": {
				"!type": "fn(classes: +NSSet, sel: string, arg: number, ofReply: bool) -> void"
			},
			"interfaceForSelectorArgumentIndexOfReply": {
				"!type": "fn(sel: string, arg: number, ofReply: bool) -> +NSXPCInterface"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXPCInterface"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSEnergyFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSEnergyFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSEnergyFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSEnergyFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unitStyle": {
				"!type": "number"
			},
			"numberFormatter": {
				"!type": "+NSNumberFormatter"
			},
			"forFoodEnergyUse": {
				"!type": "bool"
			},
			"unitStringFromJoulesUsedUnit": {
				"!type": "fn(numberInJoules: number, unitp: +Object) -> string"
			},
			"stringFromJoules": {
				"!type": "fn(numberInJoules: number) -> string"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"unitStringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"stringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSEnergyFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGravityBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGravityBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGravityBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGravityBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"items": {
				"!type": "+Array"
			},
			"magnitude": {
				"!type": "number"
			},
			"angle": {
				"!type": "number"
			},
			"gravityDirection": {
				"!type": "+Object"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"removeItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"setAngleMagnitude": {
				"!type": "fn(angle: number, magnitude: number) -> void"
			},
			"initWithItems": {
				"!type": "fn(items: +Array) -> +UIGravityBehavior"
			},
			"addItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGravityBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPointerArray": {
		"pointerArrayWithOptions": {
			"!type": "fn(options: number) -> +NSPointerArray"
		},
		"pointerArrayWithPointerFunctions": {
			"!type": "fn(functions: +NSPointerFunctions) -> +NSPointerArray"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPointerArray"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPointerArray"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPointerArray"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"pointerFunctions": {
				"!type": "+NSPointerFunctions"
			},
			"compact": {
				"!type": "fn() -> void"
			},
			"replacePointerAtIndexWithPointer": {
				"!type": "fn(index: number, item: +Object) -> void"
			},
			"insertPointerAtIndex": {
				"!type": "fn(item: +Object, index: number) -> void"
			},
			"addPointer": {
				"!type": "fn(pointer: +Object) -> void"
			},
			"initWithOptions": {
				"!type": "fn(options: number) -> +NSPointerArray"
			},
			"pointerAtIndex": {
				"!type": "fn(index: number) -> +Object"
			},
			"initWithPointerFunctions": {
				"!type": "fn(functions: +NSPointerFunctions) -> +NSPointerArray"
			},
			"removePointerAtIndex": {
				"!type": "fn(index: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPointerArray"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBlurEffect": {
		"effectWithStyle": {
			"!type": "fn(style: number) -> +UIBlurEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBlurEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBlurEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBlurEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBlurEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKPaymentTransaction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKPaymentTransaction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKPaymentTransaction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKPaymentTransaction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"transactionReceipt": {
				"!type": "+NSData"
			},
			"originalTransaction": {
				"!type": "+SKPaymentTransaction"
			},
			"downloads": {
				"!type": "+Array"
			},
			"transactionDate": {
				"!type": "+Date"
			},
			"transactionIdentifier": {
				"!type": "string"
			},
			"error": {
				"!type": "+NSError"
			},
			"payment": {
				"!type": "+SKPayment"
			},
			"transactionState": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKPaymentTransaction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICloudSharingController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICloudSharingController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICloudSharingController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICloudSharingController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"availablePermissions": {
				"!type": "number"
			},
			"share": {
				"!type": "+CKShare"
			},
			"delegate": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithShareContainer": {
				"!type": "fn(share: +CKShare, container: +CKContainer) -> +UICloudSharingController"
			},
			"initWithPreparationHandler": {
				"!type": "fn(preparationHandler: +Function) -> +UICloudSharingController"
			},
			"activityItemSource": {
				"!type": "fn() -> +Object"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UICloudSharingController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICloudSharingController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICloudSharingController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSExtensionItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSExtensionItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSExtensionItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSExtensionItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attributedTitle": {
				"!type": "+NSAttributedString"
			},
			"attributedContentText": {
				"!type": "+NSAttributedString"
			},
			"attachments": {
				"!type": "+Array"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSExtensionItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewLayout": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewLayout"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewLayout"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewLayout"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"collectionView": {
				"!type": "+UICollectionView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewLayout"
			},
			"invalidateLayoutWithContext": {
				"!type": "fn(context: +UICollectionViewLayoutInvalidationContext) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewLayout"
			},
			"registerNibForDecorationViewOfKind": {
				"!type": "fn(nib: +UINib, elementKind: string) -> void"
			},
			"invalidateLayout": {
				"!type": "fn() -> void"
			},
			"registerClassForDecorationViewOfKind": {
				"!type": "fn(viewClass: +Object, elementKind: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewLayout"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDynamicItemBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDynamicItemBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDynamicItemBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDynamicItemBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"density": {
				"!type": "number"
			},
			"items": {
				"!type": "+Array"
			},
			"resistance": {
				"!type": "number"
			},
			"friction": {
				"!type": "number"
			},
			"elasticity": {
				"!type": "number"
			},
			"anchored": {
				"!type": "bool"
			},
			"charge": {
				"!type": "number"
			},
			"angularResistance": {
				"!type": "number"
			},
			"allowsRotation": {
				"!type": "bool"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"initWithItems": {
				"!type": "fn(items: +Array) -> +UIDynamicItemBehavior"
			},
			"addLinearVelocityForItem": {
				"!type": "fn(velocity: +Object, item: +Object) -> void"
			},
			"angularVelocityForItem": {
				"!type": "fn(item: +Object) -> number"
			},
			"linearVelocityForItem": {
				"!type": "fn(item: +Object) -> +Object"
			},
			"addItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"addAngularVelocityForItem": {
				"!type": "fn(velocity: number, item: +Object) -> void"
			},
			"removeItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDynamicItemBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPasteConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPasteConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPasteConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPasteConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"acceptableTypeIdentifiers": {
				"!type": "+Array"
			},
			"initWithTypeIdentifiersForAcceptingClass": {
				"!type": "fn(aClass: +Object) -> +UIPasteConfiguration"
			},
			"addTypeIdentifiersForAcceptingClass": {
				"!type": "fn(aClass: +Object) -> void"
			},
			"addAcceptableTypeIdentifiers": {
				"!type": "fn(acceptableTypeIdentifiers: +Array) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UIPasteConfiguration"
			},
			"initWithAcceptableTypeIdentifiers": {
				"!type": "fn(acceptableTypeIdentifiers: +Array) -> +UIPasteConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPasteConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDevice": {
		"currentDevice": {
			"!type": "fn() -> +UIDevice"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDevice"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDevice"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDevice"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"proximityState": {
				"!type": "bool"
			},
			"generatesDeviceOrientationNotifications": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"userInterfaceIdiom": {
				"!type": "number"
			},
			"localizedModel": {
				"!type": "string"
			},
			"batteryMonitoringEnabled": {
				"!type": "bool"
			},
			"proximityMonitoringEnabled": {
				"!type": "bool"
			},
			"multitaskingSupported": {
				"!type": "bool"
			},
			"systemVersion": {
				"!type": "string"
			},
			"batteryState": {
				"!type": "number"
			},
			"systemName": {
				"!type": "string"
			},
			"model": {
				"!type": "string"
			},
			"identifierForVendor": {
				"!type": "+NSUUID"
			},
			"batteryLevel": {
				"!type": "number"
			},
			"orientation": {
				"!type": "number"
			},
			"endGeneratingDeviceOrientationNotifications": {
				"!type": "fn() -> void"
			},
			"beginGeneratingDeviceOrientationNotifications": {
				"!type": "fn() -> void"
			},
			"playInputClick": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDevice"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryDelete": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryDelete"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryDelete"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryDelete"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsactionHandler": {
				"!type": "+Function"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryDelete"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryDelete"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryDelete"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitConverter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitConverter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitConverter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitConverter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"baseUnitValueFromValue": {
				"!type": "fn(value: number) -> number"
			},
			"valueFromBaseUnitValue": {
				"!type": "fn(baseUnitValue: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitConverter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutDecorationItem": {
		"backgroundDecorationItemWithElementKind": {
			"!type": "fn(elementKind: string) -> +NSCollectionLayoutDecorationItem"
		},
		"itemWithLayoutSize": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize) -> +NSCollectionLayoutDecorationItem"
		},
		"itemWithLayoutSizeSupplementaryItems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, supplementaryItems: +Array) -> +NSCollectionLayoutDecorationItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutDecorationItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutDecorationItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutDecorationItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"zIndex": {
				"!type": "number"
			},
			"elementKind": {
				"!type": "string"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"edgeSpacing": {
				"!type": "+NSCollectionLayoutEdgeSpacing"
			},
			"supplementaryItems": {
				"!type": "+Array"
			},
			"layoutSize": {
				"!type": "+NSCollectionLayoutSize"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutDecorationItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBar": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBar"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBar"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBar"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unselectedItemTintColor": {
				"!type": "+UIColor"
			},
			"itemPositioning": {
				"!type": "number"
			},
			"items": {
				"!type": "+Array"
			},
			"selectedItem": {
				"!type": "+UITabBarItem"
			},
			"selectionIndicatorImage": {
				"!type": "+UIImage"
			},
			"barTintColor": {
				"!type": "+UIColor"
			},
			"shadowImage": {
				"!type": "+UIImage"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"itemWidth": {
				"!type": "number"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"delegate": {
				"!type": "+Object"
			},
			"standardAppearance": {
				"!type": "+UITabBarAppearance"
			},
			"customizing": {
				"!type": "bool"
			},
			"selectedImageTintColor": {
				"!type": "+UIColor"
			},
			"barStyle": {
				"!type": "number"
			},
			"translucent": {
				"!type": "bool"
			},
			"itemSpacing": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"beginCustomizingItems": {
				"!type": "fn(items: +Array) -> void"
			},
			"setItemsAnimated": {
				"!type": "fn(items: +Array, animated: bool) -> void"
			},
			"endCustomizingAnimated": {
				"!type": "fn(animated: bool) -> bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBar"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITabBar"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBar"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneConfiguration": {
		"configurationWithNameSessionRole": {
			"!type": "fn(name: string, sessionRole: string) -> +UISceneConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jssceneClass": {
				"!type": "+Object"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"role": {
				"!type": "string"
			},
			"name": {
				"!type": "string"
			},
			"jsdelegateClass": {
				"!type": "+Object"
			},
			"initWithNameSessionRole": {
				"!type": "fn(name: string, sessionRole: string) -> +UISceneConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusUpdateContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusUpdateContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusUpdateContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusUpdateContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"nextFocusedItem": {
				"!type": "+Object"
			},
			"previouslyFocusedItem": {
				"!type": "+Object"
			},
			"nextFocusedView": {
				"!type": "+UIView"
			},
			"focusHeading": {
				"!type": "number"
			},
			"previouslyFocusedView": {
				"!type": "+UIView"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusUpdateContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextInputMode": {
		"currentInputMode": {
			"!type": "fn() -> +UITextInputMode"
		},
		"activeInputModes": {
			"!type": "fn() -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextInputMode"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextInputMode"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextInputMode"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"primaryLanguage": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextInputMode"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIInterpolatingMotionEffect": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIInterpolatingMotionEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIInterpolatingMotionEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIInterpolatingMotionEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"maximumRelativeValue": {
				"!type": "+Object"
			},
			"minimumRelativeValue": {
				"!type": "+Object"
			},
			"type": {
				"!type": "number"
			},
			"keyPath": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIInterpolatingMotionEffect"
			},
			"initWithKeyPathType": {
				"!type": "fn(keyPath: string, type: number) -> +UIInterpolatingMotionEffect"
			},
			"keyPathsAndRelativeValuesForViewerOffset": {
				"!type": "fn(viewerOffset: +Object) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIInterpolatingMotionEffect"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIInterpolatingMotionEffect"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIInterpolatingMotionEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneOpenExternalURLOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneOpenExternalURLOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneOpenExternalURLOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneOpenExternalURLOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"universalLinksOnly": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneOpenExternalURLOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutSection": {
		"sectionWithGroup": {
			"!type": "fn(group: +NSCollectionLayoutGroup) -> +NSCollectionLayoutSection"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutSection"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutSection"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutSection"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"decorationItems": {
				"!type": "+Array"
			},
			"contentInsetsReference": {
				"!type": "number"
			},
			"boundarySupplementaryItems": {
				"!type": "+Array"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"supplementariesFollowContentInsets": {
				"!type": "bool"
			},
			"jsvisibleItemsInvalidationHandler": {
				"!type": "+Function"
			},
			"interGroupSpacing": {
				"!type": "number"
			},
			"orthogonalScrollingBehavior": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutSection"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPipe": {
		"pipe": {
			"!type": "fn() -> +NSPipe"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPipe"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPipe"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPipe"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"fileHandleForReading": {
				"!type": "+NSFileHandle"
			},
			"fileHandleForWriting": {
				"!type": "+NSFileHandle"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPipe"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProductStorePromotionController": {
		"defaultController": {
			"!type": "fn() -> +SKProductStorePromotionController"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProductStorePromotionController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProductStorePromotionController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProductStorePromotionController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"fetchStorePromotionOrderWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"updateStorePromotionVisibilityForProductCompletionHandler": {
				"!type": "fn(promotionVisibility: number, product: +SKProduct, completionHandler: +Function) -> void"
			},
			"fetchStorePromotionVisibilityForProductCompletionHandler": {
				"!type": "fn(product: +SKProduct, completionHandler: +Function) -> void"
			},
			"updateStorePromotionOrderCompletionHandler": {
				"!type": "fn(storePromotionOrder: +Array, completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProductStorePromotionController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMenuItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMenuItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMenuItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMenuItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsaction": {
				"!type": "string"
			},
			"title": {
				"!type": "string"
			},
			"initWithTitleAction": {
				"!type": "fn(title: string, action: string) -> +UIMenuItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMenuItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMetadataItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMetadataItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMetadataItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMetadataItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attributes": {
				"!type": "+Array"
			},
			"valuesForAttributes": {
				"!type": "fn(keys: +Array) -> +Object"
			},
			"valueForAttribute": {
				"!type": "fn(key: string) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMetadataItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPresentationController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPresentationController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPresentationController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPresentationController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"adaptivePresentationStyle": {
				"!type": "number"
			},
			"frameOfPresentedViewInContainerView": {
				"!type": "+Object"
			},
			"presentationStyle": {
				"!type": "number"
			},
			"presentedView": {
				"!type": "+UIView"
			},
			"overrideTraitCollection": {
				"!type": "+UITraitCollection"
			},
			"shouldPresentInFullscreen": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"delegate": {
				"!type": "+Object"
			},
			"containerView": {
				"!type": "+UIView"
			},
			"shouldRemovePresentersView": {
				"!type": "bool"
			},
			"dismissalTransitionDidEnd": {
				"!type": "fn(completed: bool) -> void"
			},
			"containerViewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"containerViewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentationTransitionDidEnd": {
				"!type": "fn(completed: bool) -> void"
			},
			"presentationTransitionWillBegin": {
				"!type": "fn() -> void"
			},
			"adaptivePresentationStyleForTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> number"
			},
			"initWithPresentedViewControllerPresentingViewController": {
				"!type": "fn(presentedViewController: +UIViewController, presentingViewController: +UIViewController) -> +UIPresentationController"
			},
			"dismissalTransitionWillBegin": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPresentationController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentBrowserViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentBrowserViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentBrowserViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentBrowserViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsDocumentCreation": {
				"!type": "bool"
			},
			"recentDocumentsContentTypes": {
				"!type": "+Array"
			},
			"customActions": {
				"!type": "+Array"
			},
			"defaultDocumentAspectRatio": {
				"!type": "number"
			},
			"browserUserInterfaceStyle": {
				"!type": "number"
			},
			"shouldShowFileExtensions": {
				"!type": "bool"
			},
			"additionalLeadingNavigationBarButtonItems": {
				"!type": "+Array"
			},
			"contentTypesForRecentDocuments": {
				"!type": "+Array"
			},
			"delegate": {
				"!type": "+Object"
			},
			"additionalTrailingNavigationBarButtonItems": {
				"!type": "+Array"
			},
			"localizedCreateDocumentActionTitle": {
				"!type": "string"
			},
			"allowedContentTypes": {
				"!type": "+Array"
			},
			"allowsPickingMultipleItems": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"revealDocumentAtURLImportIfNeededCompletion": {
				"!type": "fn(url: +NSURL, importIfNeeded: bool, completion: +Function) -> void"
			},
			"transitionControllerForDocumentAtURL": {
				"!type": "fn(documentURL: +NSURL) -> +UIDocumentBrowserTransitionController"
			},
			"transitionControllerForDocumentURL": {
				"!type": "fn(documentURL: +NSURL) -> +UIDocumentBrowserTransitionController"
			},
			"initForOpeningFilesWithContentTypes": {
				"!type": "fn(allowedContentTypes: +Array) -> +UIDocumentBrowserViewController"
			},
			"importDocumentAtURLNextToDocumentAtURLModeCompletionHandler": {
				"!type": "fn(documentURL: +NSURL, neighbourURL: +NSURL, importMode: number, completion: +Function) -> void"
			},
			"initForOpeningContentTypes": {
				"!type": "fn(contentTypes: +Array) -> +UIDocumentBrowserViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIDocumentBrowserViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentBrowserViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentBrowserViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIApplicationShortcutItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIApplicationShortcutItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIApplicationShortcutItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIApplicationShortcutItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"localizedSubtitle": {
				"!type": "string"
			},
			"localizedTitle": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"targetContentIdentifier": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"icon": {
				"!type": "+UIApplicationShortcutIcon"
			},
			"initWithTypeLocalizedTitleLocalizedSubtitleIconUserInfo": {
				"!type": "fn(type: string, localizedTitle: string, localizedSubtitle: string, icon: +UIApplicationShortcutIcon, userInfo: +Object) -> +UIApplicationShortcutItem"
			},
			"initWithTypeLocalizedTitle": {
				"!type": "fn(type: string, localizedTitle: string) -> +UIApplicationShortcutItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIApplicationShortcutItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSISO8601DateFormatter": {
		"stringFromDateTimeZoneFormatOptions": {
			"!type": "fn(date: +Date, timeZone: +NSTimeZone, formatOptions: number) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSISO8601DateFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSISO8601DateFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSISO8601DateFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"formatOptions": {
				"!type": "number"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"dateFromString": {
				"!type": "fn(string: string) -> +Date"
			},
			"jsinit": {
				"!type": "fn() -> +NSISO8601DateFormatter"
			},
			"stringFromDate": {
				"!type": "fn(date: +Date) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSISO8601DateFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutAnchor": {
		"layoutAnchorWithEdgesFractionalOffset": {
			"!type": "fn(edges: number, fractionalOffset: +Object) -> +NSCollectionLayoutAnchor"
		},
		"layoutAnchorWithEdgesAbsoluteOffset": {
			"!type": "fn(edges: number, absoluteOffset: +Object) -> +NSCollectionLayoutAnchor"
		},
		"layoutAnchorWithEdges": {
			"!type": "fn(edges: number) -> +NSCollectionLayoutAnchor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutAnchor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutAnchor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutAnchor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"edges": {
				"!type": "number"
			},
			"isFractionalOffset": {
				"!type": "bool"
			},
			"isAbsoluteOffset": {
				"!type": "bool"
			},
			"offset": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutAnchor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStoryboardPopoverSegue": {
		"segueWithIdentifierSourceDestinationPerformHandler": {
			"!type": "fn(identifier: string, source: +UIViewController, destination: +UIViewController, performHandler: +Function) -> +UIStoryboardPopoverSegue"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStoryboardPopoverSegue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStoryboardPopoverSegue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStoryboardPopoverSegue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"popoverController": {
				"!type": "+UIPopoverController"
			},
			"identifier": {
				"!type": "string"
			},
			"sourceViewController": {
				"!type": "+UIViewController"
			},
			"destinationViewController": {
				"!type": "+UIViewController"
			},
			"perform": {
				"!type": "fn() -> void"
			},
			"initWithIdentifierSourceDestination": {
				"!type": "fn(identifier: string, source: +UIViewController, destination: +UIViewController) -> +UIStoryboardPopoverSegue"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStoryboardPopoverSegue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILexiconEntry": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILexiconEntry"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILexiconEntry"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILexiconEntry"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"documentText": {
				"!type": "string"
			},
			"userInput": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILexiconEntry"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIWindow": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIWindow"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIWindow"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIWindow"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"windowScene": {
				"!type": "+UIWindowScene"
			},
			"screen": {
				"!type": "+UIScreen"
			},
			"rootViewController": {
				"!type": "+UIViewController"
			},
			"canResizeToFitContent": {
				"!type": "bool"
			},
			"keyWindow": {
				"!type": "bool"
			},
			"windowLevel": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"convertPointFromWindow": {
				"!type": "fn(point: +Object, window: +UIWindow) -> +Object"
			},
			"convertRectFromWindow": {
				"!type": "fn(rect: +Object, window: +UIWindow) -> +Object"
			},
			"makeKeyWindow": {
				"!type": "fn() -> void"
			},
			"becomeKeyWindow": {
				"!type": "fn() -> void"
			},
			"initWithWindowScene": {
				"!type": "fn(windowScene: +UIWindowScene) -> +UIWindow"
			},
			"convertPointToWindow": {
				"!type": "fn(point: +Object, window: +UIWindow) -> +Object"
			},
			"resignKeyWindow": {
				"!type": "fn() -> void"
			},
			"convertRectToWindow": {
				"!type": "fn(rect: +Object, window: +UIWindow) -> +Object"
			},
			"setScreen": {
				"!type": "fn(screen: +UIScreen) -> void"
			},
			"makeKeyAndVisible": {
				"!type": "fn() -> void"
			},
			"sendEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIWindow"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIWindow"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIWindow"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINavigationController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINavigationController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINavigationController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINavigationController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"barHideOnSwipeGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"viewControllers": {
				"!type": "+Array"
			},
			"topViewController": {
				"!type": "+UIViewController"
			},
			"hidesBarsOnSwipe": {
				"!type": "bool"
			},
			"hidesBarsWhenKeyboardAppears": {
				"!type": "bool"
			},
			"navigationBarHidden": {
				"!type": "bool"
			},
			"barHideOnTapGestureRecognizer": {
				"!type": "+UITapGestureRecognizer"
			},
			"toolbarHidden": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"hidesBarsWhenVerticallyCompact": {
				"!type": "bool"
			},
			"visibleViewController": {
				"!type": "+UIViewController"
			},
			"interactivePopGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"navigationBar": {
				"!type": "+UINavigationBar"
			},
			"toolbar": {
				"!type": "+UIToolbar"
			},
			"hidesBarsOnTap": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNavigationBarClassToolbarClass": {
				"!type": "fn(navigationBarClass: +Object, toolbarClass: +Object) -> +UINavigationController"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UINavigationController"
			},
			"popViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +UIViewController"
			},
			"pushViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> void"
			},
			"popToViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> +Array"
			},
			"initWithRootViewController": {
				"!type": "fn(rootViewController: +UIViewController) -> +UINavigationController"
			},
			"initWithCoder": {
				"!type": "fn(aDecoder: +NSCoder) -> +UINavigationController"
			},
			"setViewControllersAnimated": {
				"!type": "fn(viewControllers: +Array, animated: bool) -> void"
			},
			"popToRootViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +Array"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"setToolbarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"setNavigationBarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UINavigationController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UINavigationController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINavigationController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSHTTPCookie": {
		"cookieWithProperties": {
			"!type": "fn(properties: +Object) -> +NSHTTPCookie"
		},
		"requestHeaderFieldsWithCookies": {
			"!type": "fn(cookies: +Array) -> +Object"
		},
		"cookiesWithResponseHeaderFieldsForURL": {
			"!type": "fn(headerFields: +Object, URL: +NSURL) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSHTTPCookie"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSHTTPCookie"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSHTTPCookie"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"comment": {
				"!type": "string"
			},
			"domain": {
				"!type": "string"
			},
			"sameSitePolicy": {
				"!type": "string"
			},
			"name": {
				"!type": "string"
			},
			"sessionOnly": {
				"!type": "bool"
			},
			"expiresDate": {
				"!type": "+Date"
			},
			"value": {
				"!type": "string"
			},
			"commentURL": {
				"!type": "+NSURL"
			},
			"version": {
				"!type": "number"
			},
			"portList": {
				"!type": "+Array"
			},
			"path": {
				"!type": "string"
			},
			"properties": {
				"!type": "+Object"
			},
			"HTTPOnly": {
				"!type": "bool"
			},
			"secure": {
				"!type": "bool"
			},
			"initWithProperties": {
				"!type": "fn(properties: +Object) -> +NSHTTPCookie"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSHTTPCookie"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLResponse": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"URL": {
				"!type": "+NSURL"
			},
			"MIMEType": {
				"!type": "string"
			},
			"expectedContentLength": {
				"!type": "number"
			},
			"suggestedFilename": {
				"!type": "string"
			},
			"textEncodingName": {
				"!type": "string"
			},
			"initWithURLMIMETypeExpectedContentLengthTextEncodingName": {
				"!type": "fn(URL: +NSURL, MIMEType: string, length: number, name: string) -> +NSURLResponse"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIColorKernel": {
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIColorKernel"
		},
		"kernelNamesFromMetalLibraryData": {
			"!type": "fn(data: +NSData) -> +Array"
		},
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIColorKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError": {
			"!type": "fn(name: string, data: +NSData, format: number, error: +Object) -> +CIColorKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataError": {
			"!type": "fn(name: string, data: +NSData, error: +Object) -> +CIColorKernel"
		},
		"kernelsWithString": {
			"!type": "fn(string: string) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIColorKernel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIColorKernel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIColorKernel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"applyWithExtentArguments": {
				"!type": "fn(extent: +Object, args: +Array) -> +CIImage"
			},
			"applyWithExtentRoiCallbackArguments": {
				"!type": "fn(extent: +Object, callback: +Function, args: +Array) -> +CIImage"
			},
			"setROISelector": {
				"!type": "fn(method: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIColorKernel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOrthography": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOrthography"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOrthography"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOrthography"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"dominantScript": {
				"!type": "string"
			},
			"languageMap": {
				"!type": "+Object"
			},
			"initWithDominantScriptLanguageMap": {
				"!type": "fn(script: string, map: +Object) -> +NSOrthography"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSOrthography"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOrthography"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionUploadTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionUploadTask"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionUploadTask"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionUploadTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionUploadTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionUploadTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionUploadTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionUploadTask"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionUploadTask"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionUploadTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionUploadTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFieldBehavior": {
		"radialGravityFieldWithPosition": {
			"!type": "fn(position: +Object) -> +UIFieldBehavior"
		},
		"magneticField": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"noiseFieldWithSmoothnessAnimationSpeed": {
			"!type": "fn(smoothness: number, speed: number) -> +UIFieldBehavior"
		},
		"turbulenceFieldWithSmoothnessAnimationSpeed": {
			"!type": "fn(smoothness: number, speed: number) -> +UIFieldBehavior"
		},
		"dragField": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"velocityFieldWithVector": {
			"!type": "fn(direction: +Object) -> +UIFieldBehavior"
		},
		"electricField": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"fieldWithEvaluationBlock": {
			"!type": "fn(block: +Function) -> +UIFieldBehavior"
		},
		"vortexField": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"springField": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"linearGravityFieldWithVector": {
			"!type": "fn(direction: +Object) -> +UIFieldBehavior"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFieldBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFieldBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"direction": {
				"!type": "+Object"
			},
			"strength": {
				"!type": "number"
			},
			"items": {
				"!type": "+Array"
			},
			"region": {
				"!type": "+UIRegion"
			},
			"minimumRadius": {
				"!type": "number"
			},
			"falloff": {
				"!type": "number"
			},
			"animationSpeed": {
				"!type": "number"
			},
			"position": {
				"!type": "+Object"
			},
			"smoothness": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"removeItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"addItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFieldBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCharacterSet": {
		"punctuationCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"letterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"nonBaseCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"symbolCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"alphanumericCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"uppercaseLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"whitespaceCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"lowercaseLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithBitmapRepresentation": {
			"!type": "fn(data: +NSData) -> +NSCharacterSet"
		},
		"whitespaceAndNewlineCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"controlCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"newlineCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithCharactersInString": {
			"!type": "fn(aString: string) -> +NSCharacterSet"
		},
		"capitalizedLetterCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"characterSetWithContentsOfFile": {
			"!type": "fn(fName: string) -> +NSCharacterSet"
		},
		"characterSetWithRange": {
			"!type": "fn(aRange: +Object) -> +NSCharacterSet"
		},
		"decomposableCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"illegalCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"decimalDigitCharacterSet": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCharacterSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCharacterSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invertedSet": {
				"!type": "+NSCharacterSet"
			},
			"bitmapRepresentation": {
				"!type": "+NSData"
			},
			"isSupersetOfSet": {
				"!type": "fn(theOtherSet: +NSCharacterSet) -> bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSCharacterSet"
			},
			"characterIsMember": {
				"!type": "fn(aCharacter: number) -> bool"
			},
			"longCharacterIsMember": {
				"!type": "fn(theLongChar: number) -> bool"
			},
			"hasMemberInPlane": {
				"!type": "fn(thePlane: number) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCharacterSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewDropPlaceholder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewDropPlaceholder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewDropPlaceholder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewDropPlaceholder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jspreviewParametersProvider": {
				"!type": "+Function"
			},
			"jscellUpdateHandler": {
				"!type": "+Function"
			},
			"initWithInsertionIndexPathReuseIdentifier": {
				"!type": "fn(insertionIndexPath: +NSIndexPath, reuseIdentifier: string) -> +UICollectionViewDropPlaceholder"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewDropPlaceholder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"EAGLContext": {
		"currentContext": {
			"!type": "fn() -> +EAGLContext"
		},
		"setCurrentContext": {
			"!type": "fn(context: +EAGLContext) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +EAGLContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +EAGLContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +EAGLContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"API": {
				"!type": "number"
			},
			"sharegroup": {
				"!type": "+EAGLSharegroup"
			},
			"multiThreaded": {
				"!type": "bool"
			},
			"debugLabel": {
				"!type": "string"
			},
			"initWithAPI": {
				"!type": "fn(api: number) -> +EAGLContext"
			},
			"initWithAPISharegroup": {
				"!type": "fn(api: number, sharegroup: +EAGLSharegroup) -> +EAGLContext"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +EAGLContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"clearsSelectionOnViewWillAppear": {
				"!type": "bool"
			},
			"collectionView": {
				"!type": "+UICollectionView"
			},
			"useLayoutToLayoutNavigationTransitions": {
				"!type": "bool"
			},
			"installsStandardGestureForInteractiveMovement": {
				"!type": "bool"
			},
			"collectionViewLayout": {
				"!type": "+UICollectionViewLayout"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UICollectionViewController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewController"
			},
			"initWithCollectionViewLayout": {
				"!type": "fn(layout: +UICollectionViewLayout) -> +UICollectionViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UICollectionViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsImageRenderer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsImageRenderer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsImageRenderer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsImageRenderer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsImageOutput": {
				"!type": "bool"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"JPEGDataWithCompressionQualityActions": {
				"!type": "fn(compressionQuality: number, actions: +Function) -> +NSData"
			},
			"initWithSize": {
				"!type": "fn(size: +Object) -> +UIGraphicsImageRenderer"
			},
			"imageWithActions": {
				"!type": "fn(actions: +Function) -> +UIImage"
			},
			"PNGDataWithActions": {
				"!type": "fn(actions: +Function) -> +NSData"
			},
			"initWithBoundsFormat": {
				"!type": "fn(bounds: +Object, format: +UIGraphicsImageRendererFormat) -> +UIGraphicsImageRenderer"
			},
			"initWithSizeFormat": {
				"!type": "fn(size: +Object, format: +UIGraphicsImageRendererFormat) -> +UIGraphicsImageRenderer"
			},
			"initWithBounds": {
				"!type": "fn(bounds: +Object) -> +UIGraphicsImageRenderer"
			},
			"initWithBoundsFormat": {
				"!type": "fn(bounds: +Object, format: +UIGraphicsRendererFormat) -> +UIGraphicsImageRenderer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsImageRenderer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityCustomRotor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityCustomRotor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityCustomRotor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityCustomRotor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"systemRotorType": {
				"!type": "number"
			},
			"attributedName": {
				"!type": "+NSAttributedString"
			},
			"name": {
				"!type": "string"
			},
			"jsitemSearchBlock": {
				"!type": "+Function"
			},
			"initWithAttributedNameItemSearchBlock": {
				"!type": "fn(attributedName: +NSAttributedString, itemSearchBlock: +Function) -> +UIAccessibilityCustomRotor"
			},
			"initWithNameItemSearchBlock": {
				"!type": "fn(name: string, itemSearchBlock: +Function) -> +UIAccessibilityCustomRotor"
			},
			"initWithSystemTypeItemSearchBlock": {
				"!type": "fn(type: number, itemSearchBlock: +Function) -> +UIAccessibilityCustomRotor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityCustomRotor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewCompositionalLayoutConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewCompositionalLayoutConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewCompositionalLayoutConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewCompositionalLayoutConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"interSectionSpacing": {
				"!type": "number"
			},
			"contentInsetsReference": {
				"!type": "number"
			},
			"scrollDirection": {
				"!type": "number"
			},
			"boundarySupplementaryItems": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewCompositionalLayoutConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIColor": {
		"colorWithString": {
			"!type": "fn(representation: string) -> +CIColor"
		},
		"colorWithRedGreenBlueAlpha": {
			"!type": "fn(r: number, g: number, b: number, a: number) -> +CIColor"
		},
		"grayColor": {
			"!type": "fn() -> +CIColor"
		},
		"colorWithRedGreenBlueAlphaColorSpace": {
			"!type": "fn(r: number, g: number, b: number, a: number, colorSpace: +Object) -> +CIColor"
		},
		"blueColor": {
			"!type": "fn() -> +CIColor"
		},
		"colorWithRedGreenBlue": {
			"!type": "fn(r: number, g: number, b: number) -> +CIColor"
		},
		"redColor": {
			"!type": "fn() -> +CIColor"
		},
		"cyanColor": {
			"!type": "fn() -> +CIColor"
		},
		"blackColor": {
			"!type": "fn() -> +CIColor"
		},
		"magentaColor": {
			"!type": "fn() -> +CIColor"
		},
		"yellowColor": {
			"!type": "fn() -> +CIColor"
		},
		"colorWithRedGreenBlueColorSpace": {
			"!type": "fn(r: number, g: number, b: number, colorSpace: +Object) -> +CIColor"
		},
		"colorWithCGColor": {
			"!type": "fn(c: +Object) -> +CIColor"
		},
		"whiteColor": {
			"!type": "fn() -> +CIColor"
		},
		"clearColor": {
			"!type": "fn() -> +CIColor"
		},
		"greenColor": {
			"!type": "fn() -> +CIColor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIColor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIColor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIColor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"blue": {
				"!type": "number"
			},
			"numberOfComponents": {
				"!type": "number"
			},
			"stringRepresentation": {
				"!type": "string"
			},
			"colorSpace": {
				"!type": "+Object"
			},
			"green": {
				"!type": "number"
			},
			"alpha": {
				"!type": "number"
			},
			"red": {
				"!type": "number"
			},
			"initWithRedGreenBlueAlphaColorSpace": {
				"!type": "fn(r: number, g: number, b: number, a: number, colorSpace: +Object) -> +CIColor"
			},
			"initWithRedGreenBlueAlpha": {
				"!type": "fn(r: number, g: number, b: number, a: number) -> +CIColor"
			},
			"initWithRedGreenBlue": {
				"!type": "fn(r: number, g: number, b: number) -> +CIColor"
			},
			"initWithRedGreenBlueColorSpace": {
				"!type": "fn(r: number, g: number, b: number, colorSpace: +Object) -> +CIColor"
			},
			"initWithCGColor": {
				"!type": "fn(c: +Object) -> +CIColor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIColor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIWindowScene": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIWindowScene"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIWindowScene"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIWindowScene"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"windows": {
				"!type": "+Array"
			},
			"interfaceOrientation": {
				"!type": "number"
			},
			"screen": {
				"!type": "+UIScreen"
			},
			"coordinateSpace": {
				"!type": "+Object"
			},
			"sizeRestrictions": {
				"!type": "+UISceneSizeRestrictions"
			},
			"activationState": {
				"!type": "number"
			},
			"activationConditions": {
				"!type": "+UISceneActivationConditions"
			},
			"session": {
				"!type": "+UISceneSession"
			},
			"delegate": {
				"!type": "+Object"
			},
			"title": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithSessionConnectionOptions": {
				"!type": "fn(session: +UISceneSession, connectionOptions: +UISceneConnectionOptions) -> +UIWindowScene"
			},
			"openURLOptionsCompletionHandler": {
				"!type": "fn(url: +NSURL, options: +UISceneOpenExternalURLOptions, completion: +Function) -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIWindowScene"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitElectricCurrent": {
		"amperes": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"kiloamperes": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"milliamperes": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"megaamperes": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"microamperes": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitElectricCurrent"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitElectricCurrent"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitElectricCurrent"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitElectricCurrent"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitElectricCurrent"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIKernel": {
		"kernelNamesFromMetalLibraryData": {
			"!type": "fn(data: +NSData) -> +Array"
		},
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError": {
			"!type": "fn(name: string, data: +NSData, format: number, error: +Object) -> +CIKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataError": {
			"!type": "fn(name: string, data: +NSData, error: +Object) -> +CIKernel"
		},
		"kernelsWithString": {
			"!type": "fn(string: string) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIKernel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIKernel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIKernel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"applyWithExtentRoiCallbackArguments": {
				"!type": "fn(extent: +Object, callback: +Function, args: +Array) -> +CIImage"
			},
			"setROISelector": {
				"!type": "fn(method: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIKernel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAGradientLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAGradientLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAGradientLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAGradientLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAGradientLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"type": {
				"!type": "string"
			},
			"colors": {
				"!type": "+Array"
			},
			"endPoint": {
				"!type": "+Object"
			},
			"startPoint": {
				"!type": "+Object"
			},
			"locations": {
				"!type": "+Array"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAGradientLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAGradientLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAGradientLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAGradientLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAGradientLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileProviderExtension": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileProviderExtension"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileProviderExtension"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileProviderExtension"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"startProvidingItemAtURLCompletionHandler": {
				"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
			},
			"itemForIdentifierError": {
				"!type": "fn(identifier: string, error: +Object) -> +id<NSFileProviderItem>"
			},
			"providePlaceholderAtURLCompletionHandler": {
				"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
			},
			"URLForItemWithPersistentIdentifier": {
				"!type": "fn(identifier: string) -> +NSURL"
			},
			"itemChangedAtURL": {
				"!type": "fn(url: +NSURL) -> void"
			},
			"stopProvidingItemAtURL": {
				"!type": "fn(url: +NSURL) -> void"
			},
			"persistentIdentifierForItemAtURL": {
				"!type": "fn(url: +NSURL) -> string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileProviderExtension"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXPCListenerEndpoint": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXPCListenerEndpoint"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXPCListenerEndpoint"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXPCListenerEndpoint"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXPCListenerEndpoint"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINavigationBar": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINavigationBar"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINavigationBar"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINavigationBar"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"topItem": {
				"!type": "+UINavigationItem"
			},
			"items": {
				"!type": "+Array"
			},
			"barStyle": {
				"!type": "number"
			},
			"largeTitleTextAttributes": {
				"!type": "+Object"
			},
			"backItem": {
				"!type": "+UINavigationItem"
			},
			"barTintColor": {
				"!type": "+UIColor"
			},
			"backIndicatorImage": {
				"!type": "+UIImage"
			},
			"shadowImage": {
				"!type": "+UIImage"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"backIndicatorTransitionMaskImage": {
				"!type": "+UIImage"
			},
			"delegate": {
				"!type": "+Object"
			},
			"standardAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"compactAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"titleTextAttributes": {
				"!type": "+Object"
			},
			"scrollEdgeAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"translucent": {
				"!type": "bool"
			},
			"prefersLargeTitles": {
				"!type": "bool"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"pushNavigationItemAnimated": {
				"!type": "fn(item: +UINavigationItem, animated: bool) -> void"
			},
			"titleVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(barMetrics: number) -> number"
			},
			"setTitleVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(adjustment: number, barMetrics: number) -> void"
			},
			"backgroundImageForBarMetrics": {
				"!type": "fn(barMetrics: number) -> +UIImage"
			},
			"setBackgroundImageForBarPositionBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, barPosition: number, barMetrics: number) -> void"
			},
			"setBackgroundImageForBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, barMetrics: number) -> void"
			},
			"backgroundImageForBarPositionBarMetrics": {
				"!type": "fn(barPosition: number, barMetrics: number) -> +UIImage"
			},
			"setItemsAnimated": {
				"!type": "fn(items: +Array, animated: bool) -> void"
			},
			"popNavigationItemAnimated": {
				"!type": "fn(animated: bool) -> +UINavigationItem"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UINavigationBar"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UINavigationBar"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINavigationBar"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneOpenURLOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneOpenURLOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneOpenURLOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneOpenURLOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"openInPlace": {
				"!type": "bool"
			},
			"annotation": {
				"!type": "+Object"
			},
			"sourceApplication": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneOpenURLOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableAttributedString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableAttributedString"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableAttributedString"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableAttributedString"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"string": {
				"!type": "string"
			},
			"setAttributesRange": {
				"!type": "fn(attrs: +Object, range: +Object) -> void"
			},
			"replaceCharactersInRangeWithString": {
				"!type": "fn(range: +Object, str: string) -> void"
			},
			"attributesAtIndexEffectiveRange": {
				"!type": "fn(location: number, range: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableAttributedString"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPopoverController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPopoverController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPopoverController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPopoverController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"popoverContentSize": {
				"!type": "+Object"
			},
			"popoverArrowDirection": {
				"!type": "number"
			},
			"contentViewController": {
				"!type": "+UIViewController"
			},
			"popoverLayoutMargins": {
				"!type": "+Object"
			},
			"jspopoverBackgroundViewClass": {
				"!type": "+Object"
			},
			"popoverVisible": {
				"!type": "bool"
			},
			"passthroughViews": {
				"!type": "+Array"
			},
			"delegate": {
				"!type": "+Object"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"presentPopoverFromRectInViewPermittedArrowDirectionsAnimated": {
				"!type": "fn(rect: +Object, view: +UIView, arrowDirections: number, animated: bool) -> void"
			},
			"initWithContentViewController": {
				"!type": "fn(viewController: +UIViewController) -> +UIPopoverController"
			},
			"dismissPopoverAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"setContentViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> void"
			},
			"presentPopoverFromBarButtonItemPermittedArrowDirectionsAnimated": {
				"!type": "fn(item: +UIBarButtonItem, arrowDirections: number, animated: bool) -> void"
			},
			"setPopoverContentSizeAnimated": {
				"!type": "fn(size: +Object, animated: bool) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPopoverController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitArea": {
		"squareKilometers": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareNanometers": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareFeet": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareMillimeters": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareMiles": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareYards": {
			"!type": "fn() -> +NSUnitArea"
		},
		"acres": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareMicrometers": {
			"!type": "fn() -> +NSUnitArea"
		},
		"hectares": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareMeters": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareMegameters": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareInches": {
			"!type": "fn() -> +NSUnitArea"
		},
		"squareCentimeters": {
			"!type": "fn() -> +NSUnitArea"
		},
		"ares": {
			"!type": "fn() -> +NSUnitArea"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitArea"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitArea"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitArea"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitArea"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitArea"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitArea"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitArea"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CATextLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CATextLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CATextLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CATextLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CATextLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"foregroundColor": {
				"!type": "+Object"
			},
			"string": {
				"!type": "+Object"
			},
			"truncationMode": {
				"!type": "string"
			},
			"alignmentMode": {
				"!type": "string"
			},
			"fontSize": {
				"!type": "number"
			},
			"wrapped": {
				"!type": "bool"
			},
			"font": {
				"!type": "+Object"
			},
			"allowsFontSubpixelQuantization": {
				"!type": "bool"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CATextLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CATextLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CATextLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CATextLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CATextLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINavigationBarAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINavigationBarAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINavigationBarAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINavigationBarAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"buttonAppearance": {
				"!type": "+UIBarButtonItemAppearance"
			},
			"largeTitleTextAttributes": {
				"!type": "+Object"
			},
			"backIndicatorImage": {
				"!type": "+UIImage"
			},
			"titlePositionAdjustment": {
				"!type": "+Object"
			},
			"backIndicatorTransitionMaskImage": {
				"!type": "+UIImage"
			},
			"titleTextAttributes": {
				"!type": "+Object"
			},
			"doneButtonAppearance": {
				"!type": "+UIBarButtonItemAppearance"
			},
			"backButtonAppearance": {
				"!type": "+UIBarButtonItemAppearance"
			},
			"shadowImage": {
				"!type": "+UIImage"
			},
			"idiom": {
				"!type": "number"
			},
			"shadowColor": {
				"!type": "+UIColor"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"backgroundImageContentMode": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"backgroundEffect": {
				"!type": "+UIBlurEffect"
			},
			"setBackIndicatorImageTransitionMaskImage": {
				"!type": "fn(backIndicatorImage: +UIImage, backIndicatorTransitionMaskImage: +UIImage) -> void"
			},
			"configureWithTransparentBackground": {
				"!type": "fn() -> void"
			},
			"initWithBarAppearance": {
				"!type": "fn(barAppearance: +UIBarAppearance) -> +UINavigationBarAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UINavigationBarAppearance"
			},
			"initWithIdiom": {
				"!type": "fn(idiom: number) -> +UINavigationBarAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UINavigationBarAppearance"
			},
			"configureWithOpaqueBackground": {
				"!type": "fn() -> void"
			},
			"configureWithDefaultBackground": {
				"!type": "fn() -> void"
			},
			"jscopy": {
				"!type": "fn() -> +UINavigationBarAppearance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINavigationBarAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNotificationQueue": {
		"defaultQueue": {
			"!type": "fn() -> +NSNotificationQueue"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNotificationQueue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNotificationQueue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNotificationQueue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"enqueueNotificationPostingStyleCoalesceMaskForModes": {
				"!type": "fn(notification: +NSNotification, postingStyle: number, coalesceMask: number, modes: +Array) -> void"
			},
			"initWithNotificationCenter": {
				"!type": "fn(notificationCenter: +NSNotificationCenter) -> +NSNotificationQueue"
			},
			"dequeueNotificationsMatchingCoalesceMask": {
				"!type": "fn(notification: +NSNotification, coalesceMask: number) -> void"
			},
			"enqueueNotificationPostingStyle": {
				"!type": "fn(notification: +NSNotification, postingStyle: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNotificationQueue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentBrowserTransitionController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentBrowserTransitionController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentBrowserTransitionController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentBrowserTransitionController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"loadingProgress": {
				"!type": "+NSProgress"
			},
			"targetView": {
				"!type": "+UIView"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentBrowserTransitionController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSValue": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSValue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSValue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSValue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"getValueSize": {
				"!type": "fn(value: +Object, size: number) -> void"
			},
			"initWithBytesObjCType": {
				"!type": "fn(value: +Object, type: +Object) -> +NSValue"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSValue"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSValue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableIndexSet": {
		"indexSetWithIndex": {
			"!type": "fn(value: number) -> +NSMutableIndexSet"
		},
		"indexSetWithIndexesInRange": {
			"!type": "fn(range: +Object) -> +NSMutableIndexSet"
		},
		"indexSet": {
			"!type": "fn() -> +NSMutableIndexSet"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableIndexSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableIndexSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableIndexSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"firstIndex": {
				"!type": "number"
			},
			"lastIndex": {
				"!type": "number"
			},
			"removeIndexes": {
				"!type": "fn(indexSet: +NSIndexSet) -> void"
			},
			"removeIndexesInRange": {
				"!type": "fn(range: +Object) -> void"
			},
			"removeAllIndexes": {
				"!type": "fn() -> void"
			},
			"removeIndex": {
				"!type": "fn(value: number) -> void"
			},
			"addIndexesInRange": {
				"!type": "fn(range: +Object) -> void"
			},
			"addIndexes": {
				"!type": "fn(indexSet: +NSIndexSet) -> void"
			},
			"addIndex": {
				"!type": "fn(value: number) -> void"
			},
			"shiftIndexesStartingAtIndexBy": {
				"!type": "fn(index: number, delta: number) -> void"
			},
			"getIndexesMaxCountInIndexRange": {
				"!type": "fn(indexBuffer: +Object, bufferSize: number, range: +Object) -> number"
			},
			"indexPassingTest": {
				"!type": "fn(predicate: +Function) -> number"
			},
			"intersectsIndexesInRange": {
				"!type": "fn(range: +Object) -> bool"
			},
			"enumerateIndexesWithOptionsUsingBlock": {
				"!type": "fn(opts: number, block: +Function) -> void"
			},
			"enumerateRangesInRangeOptionsUsingBlock": {
				"!type": "fn(range: +Object, opts: number, block: +Function) -> void"
			},
			"containsIndex": {
				"!type": "fn(value: number) -> bool"
			},
			"enumerateIndexesInRangeOptionsUsingBlock": {
				"!type": "fn(range: +Object, opts: number, block: +Function) -> void"
			},
			"indexInRangeOptionsPassingTest": {
				"!type": "fn(range: +Object, opts: number, predicate: +Function) -> number"
			},
			"enumerateIndexesUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"initWithIndexesInRange": {
				"!type": "fn(range: +Object) -> +NSMutableIndexSet"
			},
			"indexesWithOptionsPassingTest": {
				"!type": "fn(opts: number, predicate: +Function) -> +NSIndexSet"
			},
			"containsIndexes": {
				"!type": "fn(indexSet: +NSIndexSet) -> bool"
			},
			"indexGreaterThanOrEqualToIndex": {
				"!type": "fn(value: number) -> number"
			},
			"initWithIndex": {
				"!type": "fn(value: number) -> +NSMutableIndexSet"
			},
			"enumerateRangesWithOptionsUsingBlock": {
				"!type": "fn(opts: number, block: +Function) -> void"
			},
			"indexGreaterThanIndex": {
				"!type": "fn(value: number) -> number"
			},
			"indexesInRangeOptionsPassingTest": {
				"!type": "fn(range: +Object, opts: number, predicate: +Function) -> +NSIndexSet"
			},
			"isEqualToIndexSet": {
				"!type": "fn(indexSet: +NSIndexSet) -> bool"
			},
			"enumerateRangesUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"indexWithOptionsPassingTest": {
				"!type": "fn(opts: number, predicate: +Function) -> number"
			},
			"containsIndexesInRange": {
				"!type": "fn(range: +Object) -> bool"
			},
			"countOfIndexesInRange": {
				"!type": "fn(range: +Object) -> number"
			},
			"indexLessThanIndex": {
				"!type": "fn(value: number) -> number"
			},
			"indexesPassingTest": {
				"!type": "fn(predicate: +Function) -> +NSIndexSet"
			},
			"initWithIndexSet": {
				"!type": "fn(indexSet: +NSIndexSet) -> +NSMutableIndexSet"
			},
			"indexLessThanOrEqualToIndex": {
				"!type": "fn(value: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableIndexSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPreviewAction": {
		"actionWithTitleStyleHandler": {
			"!type": "fn(title: string, style: number, handler: +Function) -> +UIPreviewAction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPreviewAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPreviewAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPreviewAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jshandler": {
				"!type": "+Function"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionTaskTransactionMetrics": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTaskTransactionMetrics"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionTaskTransactionMetrics"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionTaskTransactionMetrics"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTaskTransactionMetrics"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"multipath": {
				"!type": "bool"
			},
			"remotePort": {
				"!type": "number"
			},
			"responseStartDate": {
				"!type": "+Date"
			},
			"localPort": {
				"!type": "number"
			},
			"connectStartDate": {
				"!type": "+Date"
			},
			"connectEndDate": {
				"!type": "+Date"
			},
			"responseEndDate": {
				"!type": "+Date"
			},
			"localAddress": {
				"!type": "string"
			},
			"countOfRequestBodyBytesBeforeEncoding": {
				"!type": "number"
			},
			"expensive": {
				"!type": "bool"
			},
			"constrained": {
				"!type": "bool"
			},
			"remoteAddress": {
				"!type": "string"
			},
			"countOfRequestBodyBytesSent": {
				"!type": "number"
			},
			"requestStartDate": {
				"!type": "+Date"
			},
			"domainLookupStartDate": {
				"!type": "+Date"
			},
			"domainResolutionProtocol": {
				"!type": "number"
			},
			"reusedConnection": {
				"!type": "bool"
			},
			"countOfResponseBodyBytesReceived": {
				"!type": "number"
			},
			"countOfRequestHeaderBytesSent": {
				"!type": "number"
			},
			"proxyConnection": {
				"!type": "bool"
			},
			"domainLookupEndDate": {
				"!type": "+Date"
			},
			"resourceFetchType": {
				"!type": "number"
			},
			"negotiatedTLSCipherSuite": {
				"!type": "number"
			},
			"cellular": {
				"!type": "bool"
			},
			"secureConnectionEndDate": {
				"!type": "+Date"
			},
			"countOfResponseBodyBytesAfterDecoding": {
				"!type": "number"
			},
			"requestEndDate": {
				"!type": "+Date"
			},
			"request": {
				"!type": "+NSURLRequest"
			},
			"secureConnectionStartDate": {
				"!type": "+Date"
			},
			"fetchStartDate": {
				"!type": "+Date"
			},
			"negotiatedTLSProtocolVersion": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"networkProtocolName": {
				"!type": "string"
			},
			"countOfResponseHeaderBytesReceived": {
				"!type": "number"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTaskTransactionMetrics"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTaskTransactionMetrics"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFontMetrics": {
		"defaultMetrics": {
			"!type": "fn() -> +UIFontMetrics"
		},
		"metricsForTextStyle": {
			"!type": "fn(textStyle: string) -> +UIFontMetrics"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFontMetrics"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFontMetrics"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFontMetrics"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"scaledFontForFontCompatibleWithTraitCollection": {
				"!type": "fn(font: +UIFont, traitCollection: +UITraitCollection) -> +UIFont"
			},
			"scaledFontForFontMaximumPointSize": {
				"!type": "fn(font: +UIFont, maximumPointSize: number) -> +UIFont"
			},
			"scaledValueForValueCompatibleWithTraitCollection": {
				"!type": "fn(value: number, traitCollection: +UITraitCollection) -> number"
			},
			"initForTextStyle": {
				"!type": "fn(textStyle: string) -> +UIFontMetrics"
			},
			"scaledFontForFont": {
				"!type": "fn(font: +UIFont) -> +UIFont"
			},
			"scaledValueForValue": {
				"!type": "fn(value: number) -> number"
			},
			"scaledFontForFontMaximumPointSizeCompatibleWithTraitCollection": {
				"!type": "fn(font: +UIFont, maximumPointSize: number, traitCollection: +UITraitCollection) -> +UIFont"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFontMetrics"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTextCheckingResult": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTextCheckingResult"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTextCheckingResult"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTextCheckingResult"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"resultType": {
				"!type": "number"
			},
			"range": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTextCheckingResult"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKPaymentDiscount": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKPaymentDiscount"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKPaymentDiscount"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKPaymentDiscount"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"nonce": {
				"!type": "+NSUUID"
			},
			"keyIdentifier": {
				"!type": "string"
			},
			"identifier": {
				"!type": "string"
			},
			"timestamp": {
				"!type": "number"
			},
			"signature": {
				"!type": "string"
			},
			"initWithIdentifierKeyIdentifierNonceSignatureTimestamp": {
				"!type": "fn(identifier: string, keyIdentifier: string, nonce: +NSUUID, signature: string, timestamp: number) -> +SKPaymentDiscount"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKPaymentDiscount"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocument": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocument"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocument"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocument"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"hasUnsavedChanges": {
				"!type": "bool"
			},
			"fileModificationDate": {
				"!type": "+Date"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"fileType": {
				"!type": "string"
			},
			"localizedName": {
				"!type": "string"
			},
			"documentState": {
				"!type": "number"
			},
			"savingFileType": {
				"!type": "string"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"fileURL": {
				"!type": "+NSURL"
			},
			"performAsynchronousFileAccessUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"closeWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"updateChangeCountWithTokenForSaveOperation": {
				"!type": "fn(changeCountToken: +Object, saveOperation: number) -> void"
			},
			"writeContentsToURLForSaveOperationOriginalContentsURLError": {
				"!type": "fn(contents: +Object, url: +NSURL, saveOperation: number, originalContentsURL: +NSURL, outError: +Object) -> bool"
			},
			"revertToContentsOfURLCompletionHandler": {
				"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
			},
			"updateChangeCount": {
				"!type": "fn(change: number) -> void"
			},
			"disableEditing": {
				"!type": "fn() -> void"
			},
			"initWithFileURL": {
				"!type": "fn(url: +NSURL) -> +UIDocument"
			},
			"handleErrorUserInteractionPermitted": {
				"!type": "fn(error: +NSError, userInteractionPermitted: bool) -> void"
			},
			"enableEditing": {
				"!type": "fn() -> void"
			},
			"fileAttributesToWriteToURLForSaveOperationError": {
				"!type": "fn(url: +NSURL, saveOperation: number, outError: +Object) -> +Object"
			},
			"readFromURLError": {
				"!type": "fn(url: +NSURL, outError: +Object) -> bool"
			},
			"userInteractionNoLongerPermittedForError": {
				"!type": "fn(error: +NSError) -> void"
			},
			"saveToURLForSaveOperationCompletionHandler": {
				"!type": "fn(url: +NSURL, saveOperation: number, completionHandler: +Function) -> void"
			},
			"fileNameExtensionForTypeSaveOperation": {
				"!type": "fn(typeName: string, saveOperation: number) -> string"
			},
			"contentsForTypeError": {
				"!type": "fn(typeName: string, outError: +Object) -> +Object"
			},
			"autosaveWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"finishedHandlingErrorRecovered": {
				"!type": "fn(error: +NSError, recovered: bool) -> void"
			},
			"loadFromContentsOfTypeError": {
				"!type": "fn(contents: +Object, typeName: string, outError: +Object) -> bool"
			},
			"changeCountTokenForSaveOperation": {
				"!type": "fn(saveOperation: number) -> +Object"
			},
			"writeContentsAndAttributesSafelyToURLForSaveOperationError": {
				"!type": "fn(contents: +Object, additionalFileAttributes: +Object, url: +NSURL, saveOperation: number, outError: +Object) -> bool"
			},
			"openWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocument"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLCredentialStorage": {
		"sharedCredentialStorage": {
			"!type": "fn() -> +NSURLCredentialStorage"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLCredentialStorage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLCredentialStorage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLCredentialStorage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allCredentials": {
				"!type": "+Object"
			},
			"setCredentialForProtectionSpace": {
				"!type": "fn(credential: +NSURLCredential, space: +NSURLProtectionSpace) -> void"
			},
			"removeCredentialForProtectionSpaceOptions": {
				"!type": "fn(credential: +NSURLCredential, space: +NSURLProtectionSpace, options: +Object) -> void"
			},
			"removeCredentialForProtectionSpace": {
				"!type": "fn(credential: +NSURLCredential, space: +NSURLProtectionSpace) -> void"
			},
			"defaultCredentialForProtectionSpace": {
				"!type": "fn(space: +NSURLProtectionSpace) -> +NSURLCredential"
			},
			"setDefaultCredentialForProtectionSpace": {
				"!type": "fn(credential: +NSURLCredential, space: +NSURLProtectionSpace) -> void"
			},
			"credentialsForProtectionSpace": {
				"!type": "fn(space: +NSURLProtectionSpace) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLCredentialStorage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKDownload": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKDownload"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKDownload"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKDownload"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"contentURL": {
				"!type": "+NSURL"
			},
			"timeRemaining": {
				"!type": "number"
			},
			"expectedContentLength": {
				"!type": "number"
			},
			"transaction": {
				"!type": "+SKPaymentTransaction"
			},
			"downloadState": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"contentVersion": {
				"!type": "string"
			},
			"error": {
				"!type": "+NSError"
			},
			"progress": {
				"!type": "number"
			},
			"contentIdentifier": {
				"!type": "string"
			},
			"contentLength": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKDownload"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIViewPrintFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIViewPrintFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIViewPrintFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIViewPrintFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"view": {
				"!type": "+UIView"
			},
			"pageCount": {
				"!type": "number"
			},
			"printPageRenderer": {
				"!type": "+UIPrintPageRenderer"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"perPageContentInsets": {
				"!type": "+Object"
			},
			"maximumContentWidth": {
				"!type": "number"
			},
			"maximumContentHeight": {
				"!type": "number"
			},
			"startPage": {
				"!type": "number"
			},
			"rectForPageAtIndex": {
				"!type": "fn(pageIndex: number) -> +Object"
			},
			"drawInRectForPageAtIndex": {
				"!type": "fn(rect: +Object, pageIndex: number) -> void"
			},
			"removeFromPrintPageRenderer": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIViewPrintFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewFocusUpdateContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewFocusUpdateContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewFocusUpdateContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewFocusUpdateContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"previouslyFocusedIndexPath": {
				"!type": "+NSIndexPath"
			},
			"nextFocusedIndexPath": {
				"!type": "+NSIndexPath"
			},
			"nextFocusedItem": {
				"!type": "+Object"
			},
			"previouslyFocusedItem": {
				"!type": "+Object"
			},
			"nextFocusedView": {
				"!type": "+UIView"
			},
			"focusHeading": {
				"!type": "number"
			},
			"previouslyFocusedView": {
				"!type": "+UIView"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewFocusUpdateContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchTextField": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchTextField"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchTextField"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchTextField"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"tokens": {
				"!type": "+Array"
			},
			"tokenBackgroundColor": {
				"!type": "+UIColor"
			},
			"allowsDeletingTokens": {
				"!type": "bool"
			},
			"textualRange": {
				"!type": "+UITextRange"
			},
			"allowsCopyingTokens": {
				"!type": "bool"
			},
			"text": {
				"!type": "string"
			},
			"disabledBackground": {
				"!type": "+UIImage"
			},
			"font": {
				"!type": "+UIFont"
			},
			"rightView": {
				"!type": "+UIView"
			},
			"rightViewMode": {
				"!type": "number"
			},
			"inputView": {
				"!type": "+UIView"
			},
			"placeholder": {
				"!type": "string"
			},
			"typingAttributes": {
				"!type": "+Object"
			},
			"leftView": {
				"!type": "+UIView"
			},
			"clearButtonMode": {
				"!type": "number"
			},
			"minimumFontSize": {
				"!type": "number"
			},
			"textColor": {
				"!type": "+UIColor"
			},
			"attributedPlaceholder": {
				"!type": "+NSAttributedString"
			},
			"background": {
				"!type": "+UIImage"
			},
			"editing": {
				"!type": "bool"
			},
			"clearsOnBeginEditing": {
				"!type": "bool"
			},
			"clearsOnInsertion": {
				"!type": "bool"
			},
			"adjustsFontSizeToFitWidth": {
				"!type": "bool"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"leftViewMode": {
				"!type": "number"
			},
			"allowsEditingTextAttributes": {
				"!type": "bool"
			},
			"defaultTextAttributes": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"inputAccessoryView": {
				"!type": "+UIView"
			},
			"borderStyle": {
				"!type": "number"
			},
			"textAlignment": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"removeTokenAtIndex": {
				"!type": "fn(tokenIndex: number) -> void"
			},
			"tokensInRange": {
				"!type": "fn(textRange: +UITextRange) -> +Array"
			},
			"positionOfTokenAtIndex": {
				"!type": "fn(tokenIndex: number) -> +UITextPosition"
			},
			"replaceTextualPortionOfRangeWithTokenAtIndex": {
				"!type": "fn(textRange: +UITextRange, token: +UISearchToken, tokenIndex: number) -> void"
			},
			"insertTokenAtIndex": {
				"!type": "fn(token: +UISearchToken, tokenIndex: number) -> void"
			},
			"editingRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"clearButtonRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"drawTextInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"placeholderRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"borderRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"textRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"drawPlaceholderInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"rightViewRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"leftViewRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UISearchTextField"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISearchTextField"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchTextField"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchTextField"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISearchTextField"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchTextField"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAReplicatorLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAReplicatorLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAReplicatorLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAReplicatorLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAReplicatorLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"instanceCount": {
				"!type": "number"
			},
			"instanceDelay": {
				"!type": "number"
			},
			"instanceGreenOffset": {
				"!type": "number"
			},
			"instanceBlueOffset": {
				"!type": "number"
			},
			"instanceColor": {
				"!type": "+Object"
			},
			"instanceTransform": {
				"!type": "+Object"
			},
			"preservesDepth": {
				"!type": "bool"
			},
			"instanceRedOffset": {
				"!type": "number"
			},
			"instanceAlphaOffset": {
				"!type": "number"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAReplicatorLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAReplicatorLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAReplicatorLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAReplicatorLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAReplicatorLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrintPageRenderer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrintPageRenderer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrintPageRenderer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrintPageRenderer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfPages": {
				"!type": "number"
			},
			"footerHeight": {
				"!type": "number"
			},
			"paperRect": {
				"!type": "+Object"
			},
			"printFormatters": {
				"!type": "+Array"
			},
			"headerHeight": {
				"!type": "number"
			},
			"printableRect": {
				"!type": "+Object"
			},
			"drawPrintFormatterForPageAtIndex": {
				"!type": "fn(printFormatter: +UIPrintFormatter, pageIndex: number) -> void"
			},
			"drawFooterForPageAtIndexInRect": {
				"!type": "fn(pageIndex: number, footerRect: +Object) -> void"
			},
			"addPrintFormatterStartingAtPageAtIndex": {
				"!type": "fn(formatter: +UIPrintFormatter, pageIndex: number) -> void"
			},
			"drawHeaderForPageAtIndexInRect": {
				"!type": "fn(pageIndex: number, headerRect: +Object) -> void"
			},
			"drawPageAtIndexInRect": {
				"!type": "fn(pageIndex: number, printableRect: +Object) -> void"
			},
			"printFormattersForPageAtIndex": {
				"!type": "fn(pageIndex: number) -> +Array"
			},
			"drawContentForPageAtIndexInRect": {
				"!type": "fn(pageIndex: number, contentRect: +Object) -> void"
			},
			"prepareForDrawingPages": {
				"!type": "fn(range: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrintPageRenderer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUUID": {
		"UUID": {
			"!type": "fn() -> +NSUUID"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUUID"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUUID"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUUID"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"UUIDString": {
				"!type": "string"
			},
			"initWithUUIDBytes": {
				"!type": "fn(bytes: +Array) -> +NSUUID"
			},
			"jsinit": {
				"!type": "fn() -> +NSUUID"
			},
			"initWithUUIDString": {
				"!type": "fn(string: string) -> +NSUUID"
			},
			"getUUIDBytes": {
				"!type": "fn(uuid: +Array) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUUID"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneActivationConditions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneActivationConditions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneActivationConditions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneActivationConditions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"prefersToActivateForTargetContentIdentifierPredicate": {
				"!type": "+NSPredicate"
			},
			"canActivateForTargetContentIdentifierPredicate": {
				"!type": "+NSPredicate"
			},
			"initWithCoder": {
				"!type": "fn(aDecoder: +NSCoder) -> +UISceneActivationConditions"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneActivationConditions"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneActivationConditions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUserActivity": {
		"deleteSavedUserActivitiesWithPersistentIdentifiersCompletionHandler": {
			"!type": "fn(persistentIdentifiers: +Array, handler: +Function) -> void"
		},
		"deleteAllSavedUserActivitiesWithCompletionHandler": {
			"!type": "fn(handler: +Function) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUserActivity"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUserActivity"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUserActivity"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"needsSave": {
				"!type": "bool"
			},
			"persistentIdentifier": {
				"!type": "string"
			},
			"supportsContinuationStreams": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"eligibleForPublicIndexing": {
				"!type": "bool"
			},
			"title": {
				"!type": "string"
			},
			"webpageURL": {
				"!type": "+NSURL"
			},
			"eligibleForHandoff": {
				"!type": "bool"
			},
			"activityType": {
				"!type": "string"
			},
			"eligibleForPrediction": {
				"!type": "bool"
			},
			"targetContentIdentifier": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"referrerURL": {
				"!type": "+NSURL"
			},
			"keywords": {
				"!type": "+NSSet"
			},
			"requiredUserInfoKeys": {
				"!type": "+NSSet"
			},
			"eligibleForSearch": {
				"!type": "bool"
			},
			"expirationDate": {
				"!type": "+Date"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"resignCurrent": {
				"!type": "fn() -> void"
			},
			"getContinuationStreamsWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSUserActivity"
			},
			"addUserInfoEntriesFromDictionary": {
				"!type": "fn(otherDictionary: +Object) -> void"
			},
			"initWithActivityType": {
				"!type": "fn(activityType: string) -> +NSUserActivity"
			},
			"becomeCurrent": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUserActivity"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLRequest": {
		"supportsSecureCoding": {
			"!type": "fn() -> bool"
		},
		"requestWithURL": {
			"!type": "fn(URL: +NSURL) -> +NSURLRequest"
		},
		"requestWithURLCachePolicyTimeoutInterval": {
			"!type": "fn(URL: +NSURL, cachePolicy: number, timeoutInterval: number) -> +NSURLRequest"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timeoutInterval": {
				"!type": "number"
			},
			"allowsConstrainedNetworkAccess": {
				"!type": "bool"
			},
			"networkServiceType": {
				"!type": "number"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"allowsCellularAccess": {
				"!type": "bool"
			},
			"mainDocumentURL": {
				"!type": "+NSURL"
			},
			"allowsExpensiveNetworkAccess": {
				"!type": "bool"
			},
			"cachePolicy": {
				"!type": "number"
			},
			"initWithURL": {
				"!type": "fn(URL: +NSURL) -> +NSURLRequest"
			},
			"initWithURLCachePolicyTimeoutInterval": {
				"!type": "fn(URL: +NSURL, cachePolicy: number, timeoutInterval: number) -> +NSURLRequest"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIVector": {
		"vectorWithXY": {
			"!type": "fn(x: number, y: number) -> +CIVector"
		},
		"vectorWithCGPoint": {
			"!type": "fn(p: +Object) -> +CIVector"
		},
		"vectorWithCGRect": {
			"!type": "fn(r: +Object) -> +CIVector"
		},
		"vectorWithString": {
			"!type": "fn(representation: string) -> +CIVector"
		},
		"vectorWithXYZW": {
			"!type": "fn(x: number, y: number, z: number, w: number) -> +CIVector"
		},
		"vectorWithValuesCount": {
			"!type": "fn(values: +Object, count: number) -> +CIVector"
		},
		"vectorWithXYZ": {
			"!type": "fn(x: number, y: number, z: number) -> +CIVector"
		},
		"vectorWithX": {
			"!type": "fn(x: number) -> +CIVector"
		},
		"vectorWithCGAffineTransform": {
			"!type": "fn(t: +Object) -> +CIVector"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIVector"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIVector"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIVector"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"CGAffineTransformValue": {
				"!type": "+Object"
			},
			"CGRectValue": {
				"!type": "+Object"
			},
			"CGPointValue": {
				"!type": "+Object"
			},
			"stringRepresentation": {
				"!type": "string"
			},
			"W": {
				"!type": "number"
			},
			"Y": {
				"!type": "number"
			},
			"X": {
				"!type": "number"
			},
			"Z": {
				"!type": "number"
			},
			"initWithX": {
				"!type": "fn(x: number) -> +CIVector"
			},
			"initWithXYZ": {
				"!type": "fn(x: number, y: number, z: number) -> +CIVector"
			},
			"initWithCGAffineTransform": {
				"!type": "fn(r: +Object) -> +CIVector"
			},
			"initWithCGRect": {
				"!type": "fn(r: +Object) -> +CIVector"
			},
			"initWithXYZW": {
				"!type": "fn(x: number, y: number, z: number, w: number) -> +CIVector"
			},
			"initWithXY": {
				"!type": "fn(x: number, y: number) -> +CIVector"
			},
			"initWithString": {
				"!type": "fn(representation: string) -> +CIVector"
			},
			"initWithCGPoint": {
				"!type": "fn(p: +Object) -> +CIVector"
			},
			"initWithValuesCount": {
				"!type": "fn(values: +Object, count: number) -> +CIVector"
			},
			"valueAtIndex": {
				"!type": "fn(index: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIVector"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextFormattingCoordinator": {
		"isFontPanelVisible": {
			"!type": "fn() -> bool"
		},
		"toggleFontPanel": {
			"!type": "fn(sender: +Object) -> void"
		},
		"textFormattingCoordinatorForWindowScene": {
			"!type": "fn(windowScene: +UIWindowScene) -> +UITextFormattingCoordinator"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextFormattingCoordinator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextFormattingCoordinator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextFormattingCoordinator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"initWithWindowScene": {
				"!type": "fn(windowScene: +UIWindowScene) -> +UITextFormattingCoordinator"
			},
			"setSelectedAttributesIsMultiple": {
				"!type": "fn(attributes: +Object, flag: bool) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextFormattingCoordinator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPanGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPanGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPanGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPanGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"maximumNumberOfTouches": {
				"!type": "number"
			},
			"minimumNumberOfTouches": {
				"!type": "number"
			},
			"allowedScrollTypesMask": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"velocityInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"setTranslationInView": {
				"!type": "fn(translation: +Object, view: +UIView) -> void"
			},
			"translationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPanGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPanGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIPanGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPanGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionWebSocketTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionWebSocketTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionWebSocketTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionWebSocketTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionWebSocketTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"closeCode": {
				"!type": "number"
			},
			"closeReason": {
				"!type": "+NSData"
			},
			"maximumMessageSize": {
				"!type": "number"
			},
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"sendPingWithPongReceiveHandler": {
				"!type": "fn(pongReceiveHandler: +Function) -> void"
			},
			"cancelWithCloseCodeReason": {
				"!type": "fn(closeCode: number, reason: +NSData) -> void"
			},
			"receiveMessageWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"sendMessageCompletionHandler": {
				"!type": "fn(message: +NSURLSessionWebSocketMessage, completionHandler: +Function) -> void"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionWebSocketTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionWebSocketTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsPDFRendererContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsPDFRendererContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsPDFRendererContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsPDFRendererContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"pdfContextBounds": {
				"!type": "+Object"
			},
			"CGContext": {
				"!type": "+Object"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"setDestinationWithNameForRect": {
				"!type": "fn(name: string, rect: +Object) -> void"
			},
			"beginPage": {
				"!type": "fn() -> void"
			},
			"beginPageWithBoundsPageInfo": {
				"!type": "fn(bounds: +Object, pageInfo: +Object) -> void"
			},
			"addDestinationWithNameAtPoint": {
				"!type": "fn(name: string, point: +Object) -> void"
			},
			"setURLForRect": {
				"!type": "fn(url: +NSURL, rect: +Object) -> void"
			},
			"strokeRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"strokeRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"clipToRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsPDFRendererContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIQRCodeFeature": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIQRCodeFeature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIQRCodeFeature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIQRCodeFeature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"topLeft": {
				"!type": "+Object"
			},
			"bottomLeft": {
				"!type": "+Object"
			},
			"bottomRight": {
				"!type": "+Object"
			},
			"symbolDescriptor": {
				"!type": "+CIQRCodeDescriptor"
			},
			"bounds": {
				"!type": "+Object"
			},
			"topRight": {
				"!type": "+Object"
			},
			"messageString": {
				"!type": "string"
			},
			"type": {
				"!type": "string"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIQRCodeFeature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryDisclosureIndicator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryDisclosureIndicator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryDisclosureIndicator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryDisclosureIndicator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryDisclosureIndicator"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryDisclosureIndicator"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryDisclosureIndicator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryMultiselect": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryMultiselect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryMultiselect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryMultiselect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryMultiselect"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryMultiselect"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryMultiselect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKStoreReviewController": {
		"requestReviewInScene": {
			"!type": "fn(windowScene: +UIWindowScene) -> void"
		},
		"requestReview": {
			"!type": "fn() -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKStoreReviewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKStoreReviewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKStoreReviewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKStoreReviewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CATransformLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CATransformLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CATransformLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CATransformLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CATransformLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CATransformLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CATransformLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CATransformLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CATransformLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CATransformLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIContextMenuInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIContextMenuInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIContextMenuInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIContextMenuInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"menuAppearance": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"dismissMenu": {
				"!type": "fn() -> void"
			},
			"updateVisibleMenuWithBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIContextMenuInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIContextMenuInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAValueFunction": {
		"functionWithName": {
			"!type": "fn(name: string) -> +CAValueFunction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAValueFunction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAValueFunction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAValueFunction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAValueFunction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNotification": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNotification"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNotification"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNotification"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"object": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"initWithNameObjectUserInfo": {
				"!type": "fn(name: string, object: +Object, userInfo: +Object) -> +NSNotification"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSNotification"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNotification"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneDestructionRequestOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneDestructionRequestOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneDestructionRequestOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneDestructionRequestOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneDestructionRequestOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneSizeRestrictions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneSizeRestrictions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneSizeRestrictions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneSizeRestrictions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"minimumSize": {
				"!type": "+Object"
			},
			"maximumSize": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneSizeRestrictions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewDiffableDataSource": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewDiffableDataSource"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewDiffableDataSource"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewDiffableDataSource"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reorderingHandlers": {
				"!type": "+UICollectionViewDiffableDataSourceReorderingHandlers"
			},
			"jssupplementaryViewProvider": {
				"!type": "+Function"
			},
			"sectionSnapshotHandlers": {
				"!type": "+UICollectionViewDiffableDataSourceSectionSnapshotHandlers"
			},
			"applySnapshotToSectionAnimatingDifferencesCompletion": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSectionSnapshot, sectionIdentifier: +Object, animatingDifferences: bool, completion: +Function) -> void"
			},
			"snapshotForSection": {
				"!type": "fn(section: +Object) -> +NSDiffableDataSourceSectionSnapshot"
			},
			"applySnapshotAnimatingDifferences": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSnapshot, animatingDifferences: bool) -> void"
			},
			"snapshot": {
				"!type": "fn() -> +NSDiffableDataSourceSnapshot"
			},
			"applySnapshotToSectionAnimatingDifferences": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSectionSnapshot, sectionIdentifier: +Object, animatingDifferences: bool) -> void"
			},
			"indexPathForItemIdentifier": {
				"!type": "fn(identifier: +Object) -> +NSIndexPath"
			},
			"initWithCollectionViewCellProvider": {
				"!type": "fn(collectionView: +UICollectionView, cellProvider: +Function) -> +UICollectionViewDiffableDataSource"
			},
			"applySnapshotAnimatingDifferencesCompletion": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSnapshot, animatingDifferences: bool, completion: +Function) -> void"
			},
			"itemIdentifierForIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewDiffableDataSource"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActivityItemsConfiguration": {
		"activityItemsConfigurationWithObjects": {
			"!type": "fn(objects: +Array) -> +UIActivityItemsConfiguration"
		},
		"activityItemsConfigurationWithItemProviders": {
			"!type": "fn(itemProviders: +Array) -> +UIActivityItemsConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActivityItemsConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActivityItemsConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActivityItemsConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsapplicationActivitiesProvider": {
				"!type": "+Function"
			},
			"jspreviewProvider": {
				"!type": "+Function"
			},
			"jsperItemMetadataProvider": {
				"!type": "+Function"
			},
			"supportedInteractions": {
				"!type": "+Array"
			},
			"jsmetadataProvider": {
				"!type": "+Function"
			},
			"localObject": {
				"!type": "+Object"
			},
			"initWithItemProviders": {
				"!type": "fn(itemProviders: +Array) -> +UIActivityItemsConfiguration"
			},
			"initWithObjects": {
				"!type": "fn(objects: +Array) -> +UIActivityItemsConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActivityItemsConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDimension": {
		"baseUnit": {
			"!type": "fn() -> +NSDimension"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDimension"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDimension"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDimension"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSDimension"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSDimension"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDimension"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMapTable": {
		"mapTableWithKeyOptionsValueOptions": {
			"!type": "fn(keyOptions: number, valueOptions: number) -> +NSMapTable"
		},
		"weakToStrongObjectsMapTable": {
			"!type": "fn() -> +NSMapTable"
		},
		"strongToStrongObjectsMapTable": {
			"!type": "fn() -> +NSMapTable"
		},
		"weakToWeakObjectsMapTable": {
			"!type": "fn() -> +NSMapTable"
		},
		"strongToWeakObjectsMapTable": {
			"!type": "fn() -> +NSMapTable"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMapTable"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMapTable"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMapTable"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"valuePointerFunctions": {
				"!type": "+NSPointerFunctions"
			},
			"keyPointerFunctions": {
				"!type": "+NSPointerFunctions"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"keyEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"dictionaryRepresentation": {
				"!type": "fn() -> +Object"
			},
			"setObjectForKey": {
				"!type": "fn(anObject: +Object, aKey: +Object) -> void"
			},
			"removeAllObjects": {
				"!type": "fn() -> void"
			},
			"removeObjectForKey": {
				"!type": "fn(aKey: +Object) -> void"
			},
			"initWithKeyPointerFunctionsValuePointerFunctionsCapacity": {
				"!type": "fn(keyFunctions: +NSPointerFunctions, valueFunctions: +NSPointerFunctions, initialCapacity: number) -> +NSMapTable"
			},
			"initWithKeyOptionsValueOptionsCapacity": {
				"!type": "fn(keyOptions: number, valueOptions: number, initialCapacity: number) -> +NSMapTable"
			},
			"objectForKey": {
				"!type": "fn(aKey: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMapTable"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSSet": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSSet"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSSet"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"member": {
				"!type": "fn(object: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBarItemStateAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBarItemStateAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBarItemStateAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBarItemStateAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"badgeBackgroundColor": {
				"!type": "+UIColor"
			},
			"badgeTextAttributes": {
				"!type": "+Object"
			},
			"titlePositionAdjustment": {
				"!type": "+Object"
			},
			"badgeTitlePositionAdjustment": {
				"!type": "+Object"
			},
			"iconColor": {
				"!type": "+UIColor"
			},
			"badgePositionAdjustment": {
				"!type": "+Object"
			},
			"titleTextAttributes": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItemStateAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILexicon": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILexicon"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILexicon"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILexicon"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"entries": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILexicon"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellConfigurationState": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellConfigurationState"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellConfigurationState"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellConfigurationState"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"swiped": {
				"!type": "bool"
			},
			"expanded": {
				"!type": "bool"
			},
			"cellDropState": {
				"!type": "number"
			},
			"reordering": {
				"!type": "bool"
			},
			"editing": {
				"!type": "bool"
			},
			"cellDragState": {
				"!type": "number"
			},
			"disabled": {
				"!type": "bool"
			},
			"highlighted": {
				"!type": "bool"
			},
			"selected": {
				"!type": "bool"
			},
			"focused": {
				"!type": "bool"
			},
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellConfigurationState"
			},
			"initWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> +UICellConfigurationState"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellConfigurationState"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutConstraint": {
		"activateConstraints": {
			"!type": "fn(constraints: +Array) -> void"
		},
		"constraintWithItemAttributeRelatedByToItemAttributeMultiplierConstant": {
			"!type": "fn(view1: +Object, attr1: number, relation: number, view2: +Object, attr2: number, multiplier: number, c: number) -> +NSLayoutConstraint"
		},
		"constraintsWithVisualFormatOptionsMetricsViews": {
			"!type": "fn(format: string, opts: number, metrics: +Object, views: +Object) -> +Array"
		},
		"deactivateConstraints": {
			"!type": "fn(constraints: +Array) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutConstraint"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutConstraint"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutConstraint"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"firstAttribute": {
				"!type": "number"
			},
			"secondAnchor": {
				"!type": "+NSLayoutAnchor"
			},
			"shouldBeArchived": {
				"!type": "bool"
			},
			"secondItem": {
				"!type": "+Object"
			},
			"priority": {
				"!type": "number"
			},
			"relation": {
				"!type": "number"
			},
			"firstItem": {
				"!type": "+Object"
			},
			"multiplier": {
				"!type": "number"
			},
			"active": {
				"!type": "bool"
			},
			"constant": {
				"!type": "number"
			},
			"secondAttribute": {
				"!type": "number"
			},
			"firstAnchor": {
				"!type": "+NSLayoutAnchor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutConstraint"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewDropPlaceholder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewDropPlaceholder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewDropPlaceholder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewDropPlaceholder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jspreviewParametersProvider": {
				"!type": "+Function"
			},
			"jscellUpdateHandler": {
				"!type": "+Function"
			},
			"initWithInsertionIndexPathReuseIdentifierRowHeight": {
				"!type": "fn(insertionIndexPath: +NSIndexPath, reuseIdentifier: string, rowHeight: number) -> +UITableViewDropPlaceholder"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewDropPlaceholder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISlider": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISlider"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISlider"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISlider"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentMinimumTrackImage": {
				"!type": "+UIImage"
			},
			"maximumValue": {
				"!type": "number"
			},
			"continuous": {
				"!type": "bool"
			},
			"maximumValueImage": {
				"!type": "+UIImage"
			},
			"value": {
				"!type": "number"
			},
			"minimumValueImage": {
				"!type": "+UIImage"
			},
			"currentMaximumTrackImage": {
				"!type": "+UIImage"
			},
			"thumbTintColor": {
				"!type": "+UIColor"
			},
			"currentThumbImage": {
				"!type": "+UIImage"
			},
			"minimumValue": {
				"!type": "number"
			},
			"maximumTrackTintColor": {
				"!type": "+UIColor"
			},
			"minimumTrackTintColor": {
				"!type": "+UIColor"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"maximumValueImageRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"minimumValueImageRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"setThumbImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"setMaximumTrackImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"minimumTrackImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"trackRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"setMinimumTrackImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"thumbRectForBoundsTrackRectValue": {
				"!type": "fn(bounds: +Object, rect: +Object, value: number) -> +Object"
			},
			"setValueAnimated": {
				"!type": "fn(value: number, animated: bool) -> void"
			},
			"maximumTrackImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"thumbImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UISlider"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISlider"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISlider"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISlider"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISlider"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISlider"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerHoverEffect": {
		"effectWithPreview": {
			"!type": "fn(preview: +UITargetedPreview) -> +UIPointerHoverEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerHoverEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerHoverEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerHoverEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"prefersShadow": {
				"!type": "bool"
			},
			"preferredTintMode": {
				"!type": "number"
			},
			"prefersScaledContent": {
				"!type": "bool"
			},
			"preview": {
				"!type": "+UITargetedPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerHoverEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewCell": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewCell"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewCell"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewCell"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"backgroundView": {
				"!type": "+UIView"
			},
			"contentView": {
				"!type": "+UIView"
			},
			"automaticallyUpdatesBackgroundConfiguration": {
				"!type": "bool"
			},
			"contentConfiguration": {
				"!type": "+Object"
			},
			"selectedBackgroundView": {
				"!type": "+UIView"
			},
			"selected": {
				"!type": "bool"
			},
			"automaticallyUpdatesContentConfiguration": {
				"!type": "bool"
			},
			"backgroundConfiguration": {
				"!type": "+UIBackgroundConfiguration"
			},
			"configurationState": {
				"!type": "+UICellConfigurationState"
			},
			"highlighted": {
				"!type": "bool"
			},
			"reuseIdentifier": {
				"!type": "string"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"updateConfigurationUsingState": {
				"!type": "fn(state: +UICellConfigurationState) -> void"
			},
			"setNeedsUpdateConfiguration": {
				"!type": "fn() -> void"
			},
			"dragStateDidChange": {
				"!type": "fn(dragState: number) -> void"
			},
			"prepareForReuse": {
				"!type": "fn() -> void"
			},
			"preferredLayoutAttributesFittingAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> +UICollectionViewLayoutAttributes"
			},
			"applyLayoutAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> void"
			},
			"willTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"didTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewCell"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UICollectionViewCell"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewCell"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionTaskMetrics": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTaskMetrics"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionTaskMetrics"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionTaskMetrics"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionTaskMetrics"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"redirectCount": {
				"!type": "number"
			},
			"taskInterval": {
				"!type": "+NSDateInterval"
			},
			"transactionMetrics": {
				"!type": "+Array"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTaskMetrics"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionTaskMetrics"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitSpeed": {
		"metersPerSecond": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"knots": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"kilometersPerHour": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"milesPerHour": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitSpeed"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitSpeed"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitSpeed"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitSpeed"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitSpeed"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOperation": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOperation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOperation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOperation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"ready": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"jscompletionBlock": {
				"!type": "+Function"
			},
			"concurrent": {
				"!type": "bool"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"queuePriority": {
				"!type": "number"
			},
			"executing": {
				"!type": "bool"
			},
			"finished": {
				"!type": "bool"
			},
			"dependencies": {
				"!type": "+Array"
			},
			"asynchronous": {
				"!type": "bool"
			},
			"threadPriority": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"waitUntilFinished": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"main": {
				"!type": "fn() -> void"
			},
			"addDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"removeDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOperation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewDropProposal": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewDropProposal"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewDropProposal"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewDropProposal"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"intent": {
				"!type": "number"
			},
			"precise": {
				"!type": "bool"
			},
			"prefersFullSizePreview": {
				"!type": "bool"
			},
			"operation": {
				"!type": "number"
			},
			"initWithDropOperationIntent": {
				"!type": "fn(operation: number, intent: number) -> +UICollectionViewDropProposal"
			},
			"initWithDropOperation": {
				"!type": "fn(operation: number) -> +UICollectionViewDropProposal"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewDropProposal"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImageAsset": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImageAsset"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImageAsset"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImageAsset"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unregisterImageWithConfiguration": {
				"!type": "fn(configuration: +UIImageConfiguration) -> void"
			},
			"registerImageWithConfiguration": {
				"!type": "fn(image: +UIImage, configuration: +UIImageConfiguration) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIImageAsset"
			},
			"unregisterImageWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> void"
			},
			"imageWithConfiguration": {
				"!type": "fn(configuration: +UIImageConfiguration) -> +UIImage"
			},
			"jsinit": {
				"!type": "fn() -> +UIImageAsset"
			},
			"registerImageWithTraitCollection": {
				"!type": "fn(image: +UIImage, traitCollection: +UITraitCollection) -> void"
			},
			"imageWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> +UIImage"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImageAsset"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIListContentView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIListContentView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIListContentView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIListContentView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"secondaryTextLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"configuration": {
				"!type": "+UIListContentConfiguration"
			},
			"textLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"imageLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIListContentView"
			},
			"initWithConfiguration": {
				"!type": "fn(configuration: +UIListContentConfiguration) -> +UIListContentView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIListContentView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIListContentView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIListContentView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProductsResponse": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProductsResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProductsResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProductsResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invalidProductIdentifiers": {
				"!type": "+Array"
			},
			"products": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProductsResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryReorder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryReorder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryReorder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryReorder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"showsVerticalSeparator": {
				"!type": "bool"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryReorder"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryReorder"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryReorder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDragInteraction": {
		"isEnabledByDefault": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDragInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDragInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDragInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsSimultaneousRecognitionDuringLift": {
				"!type": "bool"
			},
			"enabled": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIDragInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMenu": {
		"menuWithChildren": {
			"!type": "fn(children: +Array) -> +UIMenu"
		},
		"menuWithTitleImageIdentifierOptionsChildren": {
			"!type": "fn(title: string, image: +UIImage, identifier: string, options: number, children: +Array) -> +UIMenu"
		},
		"menuWithTitleChildren": {
			"!type": "fn(title: string, children: +Array) -> +UIMenu"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMenu"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMenu"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMenu"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "string"
			},
			"options": {
				"!type": "number"
			},
			"children": {
				"!type": "+Array"
			},
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"menuByReplacingChildren": {
				"!type": "fn(newChildren: +Array) -> +UIMenu"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMenu"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMenu"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMenu"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryCustomView": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryCustomView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryCustomView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryCustomView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"customView": {
				"!type": "+UIView"
			},
			"maintainsFixedSize": {
				"!type": "bool"
			},
			"placement": {
				"!type": "number"
			},
			"jsposition": {
				"!type": "+Function"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryCustomView"
			},
			"initWithCustomViewPlacement": {
				"!type": "fn(customView: +UIView, placement: number) -> +UICellAccessoryCustomView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryCustomView"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryCustomView"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryCustomView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDynamicAnimator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDynamicAnimator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDynamicAnimator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDynamicAnimator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"behaviors": {
				"!type": "+Array"
			},
			"elapsedTime": {
				"!type": "number"
			},
			"running": {
				"!type": "bool"
			},
			"referenceView": {
				"!type": "+UIView"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithReferenceView": {
				"!type": "fn(view: +UIView) -> +UIDynamicAnimator"
			},
			"updateItemUsingCurrentState": {
				"!type": "fn(item: +Object) -> void"
			},
			"itemsInRect": {
				"!type": "fn(rect: +Object) -> +Array"
			},
			"removeAllBehaviors": {
				"!type": "fn() -> void"
			},
			"addBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"removeBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDynamicAnimator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableArray": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableArray"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableArray"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableArray"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"removeObjectAtIndex": {
				"!type": "fn(index: number) -> void"
			},
			"insertObjectAtIndex": {
				"!type": "fn(anObject: +Object, index: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableArray"
			},
			"addObject": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSMutableArray"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableArray"
			},
			"removeLastObject": {
				"!type": "fn() -> void"
			},
			"replaceObjectAtIndexWithObject": {
				"!type": "fn(index: number, anObject: +Object) -> void"
			},
			"objectAtIndex": {
				"!type": "fn(index: number) -> +Object"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSMutableArray"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableArray"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableArray"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableArray"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActivity": {
		"activityCategory": {
			"!type": "fn() -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActivity"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActivity"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActivity"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"activityImage": {
				"!type": "+UIImage"
			},
			"activityType": {
				"!type": "string"
			},
			"activityViewController": {
				"!type": "+UIViewController"
			},
			"activityTitle": {
				"!type": "string"
			},
			"performActivity": {
				"!type": "fn() -> void"
			},
			"prepareWithActivityItems": {
				"!type": "fn(activityItems: +Array) -> void"
			},
			"canPerformWithActivityItems": {
				"!type": "fn(activityItems: +Array) -> bool"
			},
			"activityDidFinish": {
				"!type": "fn(completed: bool) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActivity"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMassFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMassFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMassFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMassFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"unitStyle": {
				"!type": "number"
			},
			"numberFormatter": {
				"!type": "+NSNumberFormatter"
			},
			"forPersonMassUse": {
				"!type": "bool"
			},
			"unitStringFromKilogramsUsedUnit": {
				"!type": "fn(numberInKilograms: number, unitp: +Object) -> string"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringFromKilograms": {
				"!type": "fn(numberInKilograms: number) -> string"
			},
			"unitStringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"stringFromValueUnit": {
				"!type": "fn(value: number, unit: number) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMassFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOperationQueue": {
		"mainQueue": {
			"!type": "fn() -> +NSOperationQueue"
		},
		"currentQueue": {
			"!type": "fn() -> +NSOperationQueue"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOperationQueue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOperationQueue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOperationQueue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"suspended": {
				"!type": "bool"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"maxConcurrentOperationCount": {
				"!type": "number"
			},
			"cancelAllOperations": {
				"!type": "fn() -> void"
			},
			"waitUntilAllOperationsAreFinished": {
				"!type": "fn() -> void"
			},
			"addOperationWithBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"addOperation": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"addOperationsWaitUntilFinished": {
				"!type": "fn(ops: +Array, wait: bool) -> void"
			},
			"addBarrierBlock": {
				"!type": "fn(barrier: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOperationQueue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewLayoutAttributes": {
		"layoutAttributesForCellWithIndexPath": {
			"!type": "fn(indexPath: +NSIndexPath) -> +UICollectionViewLayoutAttributes"
		},
		"layoutAttributesForDecorationViewOfKindWithIndexPath": {
			"!type": "fn(decorationViewKind: string, indexPath: +NSIndexPath) -> +UICollectionViewLayoutAttributes"
		},
		"layoutAttributesForSupplementaryViewOfKindWithIndexPath": {
			"!type": "fn(elementKind: string, indexPath: +NSIndexPath) -> +UICollectionViewLayoutAttributes"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewLayoutAttributes"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewLayoutAttributes"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewLayoutAttributes"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"indexPath": {
				"!type": "+NSIndexPath"
			},
			"center": {
				"!type": "+Object"
			},
			"frame": {
				"!type": "+Object"
			},
			"transform": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"zIndex": {
				"!type": "number"
			},
			"transform3D": {
				"!type": "+Object"
			},
			"alpha": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"representedElementCategory": {
				"!type": "number"
			},
			"representedElementKind": {
				"!type": "string"
			},
			"size": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewLayoutAttributes"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSValueTransformer": {
		"allowsReverseTransformation": {
			"!type": "fn() -> bool"
		},
		"valueTransformerNames": {
			"!type": "fn() -> +Array"
		},
		"valueTransformerForName": {
			"!type": "fn(name: string) -> +NSValueTransformer"
		},
		"transformedValueClass": {
			"!type": "fn() -> +Object"
		},
		"setValueTransformerForName": {
			"!type": "fn(transformer: +NSValueTransformer, name: string) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSValueTransformer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSValueTransformer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSValueTransformer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"transformedValue": {
				"!type": "fn(value: +Object) -> +Object"
			},
			"reverseTransformedValue": {
				"!type": "fn(value: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSValueTransformer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewFlowLayout": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewFlowLayout"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewFlowLayout"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewFlowLayout"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"footerReferenceSize": {
				"!type": "+Object"
			},
			"estimatedItemSize": {
				"!type": "+Object"
			},
			"sectionInsetReference": {
				"!type": "number"
			},
			"minimumInteritemSpacing": {
				"!type": "number"
			},
			"sectionInset": {
				"!type": "+Object"
			},
			"headerReferenceSize": {
				"!type": "+Object"
			},
			"minimumLineSpacing": {
				"!type": "number"
			},
			"sectionFootersPinToVisibleBounds": {
				"!type": "bool"
			},
			"sectionHeadersPinToVisibleBounds": {
				"!type": "bool"
			},
			"itemSize": {
				"!type": "+Object"
			},
			"scrollDirection": {
				"!type": "number"
			},
			"collectionView": {
				"!type": "+UICollectionView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewFlowLayout"
			},
			"invalidateLayoutWithContext": {
				"!type": "fn(context: +UICollectionViewLayoutInvalidationContext) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewFlowLayout"
			},
			"registerNibForDecorationViewOfKind": {
				"!type": "fn(nib: +UINib, elementKind: string) -> void"
			},
			"invalidateLayout": {
				"!type": "fn() -> void"
			},
			"registerClassForDecorationViewOfKind": {
				"!type": "fn(viewClass: +Object, elementKind: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewFlowLayout"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitIlluminance": {
		"lux": {
			"!type": "fn() -> +NSUnitIlluminance"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitIlluminance"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitIlluminance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitIlluminance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitIlluminance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitIlluminance"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitIlluminance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitIlluminance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutManager": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutManager"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutManager"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutManager"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"usesDefaultHyphenation": {
				"!type": "bool"
			},
			"extraLineFragmentUsedRect": {
				"!type": "+Object"
			},
			"hasNonContiguousLayout": {
				"!type": "bool"
			},
			"numberOfGlyphs": {
				"!type": "number"
			},
			"extraLineFragmentRect": {
				"!type": "+Object"
			},
			"extraLineFragmentTextContainer": {
				"!type": "+NSTextContainer"
			},
			"textStorage": {
				"!type": "+NSTextStorage"
			},
			"allowsNonContiguousLayout": {
				"!type": "bool"
			},
			"limitsLayoutForSuspiciousContents": {
				"!type": "bool"
			},
			"showsInvisibleCharacters": {
				"!type": "bool"
			},
			"usesFontLeading": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"showsControlCharacters": {
				"!type": "bool"
			},
			"textContainers": {
				"!type": "+Array"
			},
			"lineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object, flag: bool) -> +Object"
			},
			"setAttachmentSizeForGlyphRange": {
				"!type": "fn(attachmentSize: +Object, glyphRange: +Object) -> void"
			},
			"firstUnlaidCharacterIndex": {
				"!type": "fn() -> number"
			},
			"drawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin": {
				"!type": "fn(glyphRange: +Object, underlineVal: number, baselineOffset: number, lineRect: +Object, lineGlyphRange: +Object, containerOrigin: +Object) -> void"
			},
			"characterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints": {
				"!type": "fn(point: +Object, container: +NSTextContainer, partialFraction: +Object) -> number"
			},
			"setExtraLineFragmentRectUsedRectTextContainer": {
				"!type": "fn(fragmentRect: +Object, usedRect: +Object, container: +NSTextContainer) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutManager"
			},
			"firstUnlaidGlyphIndex": {
				"!type": "fn() -> number"
			},
			"textContainerChangedGeometry": {
				"!type": "fn(container: +NSTextContainer) -> void"
			},
			"usedRectForTextContainer": {
				"!type": "fn(container: +NSTextContainer) -> +Object"
			},
			"fractionOfDistanceThroughGlyphForPointInTextContainer": {
				"!type": "fn(point: +Object, container: +NSTextContainer) -> number"
			},
			"strikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin": {
				"!type": "fn(glyphRange: +Object, strikethroughVal: number, lineRect: +Object, lineGlyphRange: +Object, containerOrigin: +Object) -> void"
			},
			"glyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer": {
				"!type": "fn(bounds: +Object, container: +NSTextContainer) -> +Object"
			},
			"enumerateEnclosingRectsForGlyphRangeWithinSelectedGlyphRangeInTextContainerUsingBlock": {
				"!type": "fn(glyphRange: +Object, selectedRange: +Object, textContainer: +NSTextContainer, block: +Function) -> void"
			},
			"underlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin": {
				"!type": "fn(glyphRange: +Object, underlineVal: number, lineRect: +Object, lineGlyphRange: +Object, containerOrigin: +Object) -> void"
			},
			"ensureLayoutForTextContainer": {
				"!type": "fn(container: +NSTextContainer) -> void"
			},
			"ensureLayoutForBoundingRectInTextContainer": {
				"!type": "fn(bounds: +Object, container: +NSTextContainer) -> void"
			},
			"drawBackgroundForGlyphRangeAtPoint": {
				"!type": "fn(glyphsToShow: +Object, origin: +Object) -> void"
			},
			"invalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange": {
				"!type": "fn(charRange: +Object, delta: number, actualCharRange: +Object) -> void"
			},
			"fillBackgroundRectArrayCountForCharacterRangeColor": {
				"!type": "fn(rectArray: +Object, rectCount: number, charRange: +Object, color: +UIColor) -> void"
			},
			"drawGlyphsForGlyphRangeAtPoint": {
				"!type": "fn(glyphsToShow: +Object, origin: +Object) -> void"
			},
			"insertTextContainerAtIndex": {
				"!type": "fn(container: +NSTextContainer, index: number) -> void"
			},
			"invalidateLayoutForCharacterRangeActualCharacterRange": {
				"!type": "fn(charRange: +Object, actualCharRange: +Object) -> void"
			},
			"setLineFragmentRectForGlyphRangeUsedRect": {
				"!type": "fn(fragmentRect: +Object, glyphRange: +Object, usedRect: +Object) -> void"
			},
			"characterRangeForGlyphRangeActualGlyphRange": {
				"!type": "fn(glyphRange: +Object, actualGlyphRange: +Object) -> +Object"
			},
			"CGGlyphAtIndexIsValidIndex": {
				"!type": "fn(glyphIndex: number, isValidIndex: +Object) -> number"
			},
			"rangeOfNominallySpacedGlyphsContainingIndex": {
				"!type": "fn(glyphIndex: number) -> +Object"
			},
			"boundingRectForGlyphRangeInTextContainer": {
				"!type": "fn(glyphRange: +Object, container: +NSTextContainer) -> +Object"
			},
			"glyphIndexForPointInTextContainer": {
				"!type": "fn(point: +Object, container: +NSTextContainer) -> number"
			},
			"setGlyphsPropertiesCharacterIndexesFontForGlyphRange": {
				"!type": "fn(glyphs: +Object, props: +Object, charIndexes: +Object, aFont: +UIFont, glyphRange: +Object) -> void"
			},
			"setNotShownAttributeForGlyphAtIndex": {
				"!type": "fn(flag: bool, glyphIndex: number) -> void"
			},
			"setLocationForStartOfGlyphRange": {
				"!type": "fn(location: +Object, glyphRange: +Object) -> void"
			},
			"setTextContainerForGlyphRange": {
				"!type": "fn(container: +NSTextContainer, glyphRange: +Object) -> void"
			},
			"lineFragmentRectForGlyphAtIndexEffectiveRange": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object) -> +Object"
			},
			"ensureLayoutForGlyphRange": {
				"!type": "fn(glyphRange: +Object) -> void"
			},
			"ensureLayoutForCharacterRange": {
				"!type": "fn(charRange: +Object) -> void"
			},
			"glyphRangeForBoundingRectInTextContainer": {
				"!type": "fn(bounds: +Object, container: +NSTextContainer) -> +Object"
			},
			"ensureGlyphsForCharacterRange": {
				"!type": "fn(charRange: +Object) -> void"
			},
			"locationForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> +Object"
			},
			"characterIndexForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> number"
			},
			"setDrawsOutsideLineFragmentForGlyphAtIndex": {
				"!type": "fn(flag: bool, glyphIndex: number) -> void"
			},
			"glyphIndexForCharacterAtIndex": {
				"!type": "fn(charIndex: number) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSLayoutManager"
			},
			"notShownAttributeForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> bool"
			},
			"lineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object, flag: bool) -> +Object"
			},
			"drawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin": {
				"!type": "fn(glyphRange: +Object, strikethroughVal: number, baselineOffset: number, lineRect: +Object, lineGlyphRange: +Object, containerOrigin: +Object) -> void"
			},
			"ensureGlyphsForGlyphRange": {
				"!type": "fn(glyphRange: +Object) -> void"
			},
			"removeTextContainerAtIndex": {
				"!type": "fn(index: number) -> void"
			},
			"attachmentSizeForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> +Object"
			},
			"invalidateDisplayForGlyphRange": {
				"!type": "fn(glyphRange: +Object) -> void"
			},
			"getFirstUnlaidCharacterIndexGlyphIndex": {
				"!type": "fn(charIndex: +Object, glyphIndex: +Object) -> void"
			},
			"getLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes": {
				"!type": "fn(charIndex: number, aFlag: bool, dFlag: bool, positions: +Object, charIndexes: +Object) -> number"
			},
			"drawsOutsideLineFragmentForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> bool"
			},
			"textContainerForGlyphAtIndexEffectiveRange": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object) -> +NSTextContainer"
			},
			"showCGGlyphsPositionsCountFontTextMatrixAttributesInContext": {
				"!type": "fn(glyphs: +Object, positions: +Object, glyphCount: number, font: +UIFont, textMatrix: +Object, attributes: +Object, CGContext: +Object) -> void"
			},
			"glyphRangeForCharacterRangeActualCharacterRange": {
				"!type": "fn(charRange: +Object, actualCharRange: +Object) -> +Object"
			},
			"enumerateLineFragmentsForGlyphRangeUsingBlock": {
				"!type": "fn(glyphRange: +Object, block: +Function) -> void"
			},
			"CGGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> number"
			},
			"propertyForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> number"
			},
			"addTextContainer": {
				"!type": "fn(container: +NSTextContainer) -> void"
			},
			"glyphRangeForTextContainer": {
				"!type": "fn(container: +NSTextContainer) -> +Object"
			},
			"isValidGlyphIndex": {
				"!type": "fn(glyphIndex: number) -> bool"
			},
			"invalidateDisplayForCharacterRange": {
				"!type": "fn(charRange: +Object) -> void"
			},
			"getGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels": {
				"!type": "fn(glyphRange: +Object, glyphBuffer: +Object, props: +Object, charIndexBuffer: +Object, bidiLevelBuffer: +Object) -> number"
			},
			"processEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange": {
				"!type": "fn(textStorage: +NSTextStorage, editMask: number, newCharRange: +Object, delta: number, invalidatedCharRange: +Object) -> void"
			},
			"truncatedGlyphRangeInLineFragmentForGlyphAtIndex": {
				"!type": "fn(glyphIndex: number) -> +Object"
			},
			"glyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph": {
				"!type": "fn(point: +Object, container: +NSTextContainer, partialFraction: +Object) -> number"
			},
			"textContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object, flag: bool) -> +NSTextContainer"
			},
			"lineFragmentUsedRectForGlyphAtIndexEffectiveRange": {
				"!type": "fn(glyphIndex: number, effectiveGlyphRange: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutManager"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"clearsSelectionOnViewWillAppear": {
				"!type": "bool"
			},
			"refreshControl": {
				"!type": "+UIRefreshControl"
			},
			"tableView": {
				"!type": "+UITableView"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UITableViewController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewController"
			},
			"initWithStyle": {
				"!type": "fn(style: number) -> +UITableViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UITableViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextInputStringTokenizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextInputStringTokenizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextInputStringTokenizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextInputStringTokenizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithTextInput": {
				"!type": "fn(textInput: +UIResponder) -> +UITextInputStringTokenizer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextInputStringTokenizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneConnectionOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneConnectionOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneConnectionOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneConnectionOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"URLContexts": {
				"!type": "+NSSet"
			},
			"userActivities": {
				"!type": "+NSSet"
			},
			"handoffUserActivityType": {
				"!type": "string"
			},
			"cloudKitShareMetadata": {
				"!type": "+CKShareMetadata"
			},
			"sourceApplication": {
				"!type": "string"
			},
			"notificationResponse": {
				"!type": "+UNNotificationResponse"
			},
			"shortcutItem": {
				"!type": "+UIApplicationShortcutItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneConnectionOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSRecursiveLock": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSRecursiveLock"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSRecursiveLock"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSRecursiveLock"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"lockBeforeDate": {
				"!type": "fn(limit: +Date) -> bool"
			},
			"tryLock": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSRecursiveLock"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIImageProcessorKernel": {
		"synchronizeInputs": {
			"!type": "fn() -> number"
		},
		"outputFormat": {
			"!type": "fn() -> number"
		},
		"applyWithExtentInputsArgumentsError": {
			"!type": "fn(extent: +Object, inputs: +Array, args: +Object, error: +Object) -> +CIImage"
		},
		"processWithInputsArgumentsOutputError": {
			"!type": "fn(inputs: +Array, arguments: +Object, output: +Object, error: +Object) -> bool"
		},
		"formatForInputAtIndex": {
			"!type": "fn(input: number) -> number"
		},
		"outputIsOpaque": {
			"!type": "fn() -> number"
		},
		"roiForInputArgumentsOutputRect": {
			"!type": "fn(input: number, arguments: +Object, outputRect: +Object) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIImageProcessorKernel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIImageProcessorKernel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIImageProcessorKernel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIImageProcessorKernel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityCustomRotorSearchPredicate": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityCustomRotorSearchPredicate"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityCustomRotorSearchPredicate"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityCustomRotorSearchPredicate"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"searchDirection": {
				"!type": "number"
			},
			"currentItem": {
				"!type": "+UIAccessibilityCustomRotorItemResult"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityCustomRotorSearchPredicate"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUndoManager": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUndoManager"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUndoManager"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUndoManager"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"undoing": {
				"!type": "bool"
			},
			"groupingLevel": {
				"!type": "number"
			},
			"undoActionName": {
				"!type": "string"
			},
			"undoMenuItemTitle": {
				"!type": "string"
			},
			"canUndo": {
				"!type": "bool"
			},
			"runLoopModes": {
				"!type": "+Array"
			},
			"levelsOfUndo": {
				"!type": "number"
			},
			"redoing": {
				"!type": "bool"
			},
			"groupsByEvent": {
				"!type": "bool"
			},
			"undoActionIsDiscardable": {
				"!type": "bool"
			},
			"undoRegistrationEnabled": {
				"!type": "bool"
			},
			"redoMenuItemTitle": {
				"!type": "string"
			},
			"canRedo": {
				"!type": "bool"
			},
			"redoActionName": {
				"!type": "string"
			},
			"redoActionIsDiscardable": {
				"!type": "bool"
			},
			"undoMenuTitleForUndoActionName": {
				"!type": "fn(actionName: string) -> string"
			},
			"beginUndoGrouping": {
				"!type": "fn() -> void"
			},
			"undoNestedGroup": {
				"!type": "fn() -> void"
			},
			"redo": {
				"!type": "fn() -> void"
			},
			"setActionIsDiscardable": {
				"!type": "fn(discardable: bool) -> void"
			},
			"redoMenuTitleForUndoActionName": {
				"!type": "fn(actionName: string) -> string"
			},
			"registerUndoWithTargetHandler": {
				"!type": "fn(target: +Object, undoHandler: +Function) -> void"
			},
			"removeAllActions": {
				"!type": "fn() -> void"
			},
			"undo": {
				"!type": "fn() -> void"
			},
			"prepareWithInvocationTarget": {
				"!type": "fn(target: +Object) -> +Object"
			},
			"setActionName": {
				"!type": "fn(actionName: string) -> void"
			},
			"disableUndoRegistration": {
				"!type": "fn() -> void"
			},
			"endUndoGrouping": {
				"!type": "fn() -> void"
			},
			"registerUndoWithTargetSelectorObject": {
				"!type": "fn(target: +Object, selector: string, anObject: +Object) -> void"
			},
			"enableUndoRegistration": {
				"!type": "fn() -> void"
			},
			"removeAllActionsWithTarget": {
				"!type": "fn(target: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUndoManager"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSItemProvider": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSItemProvider"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSItemProvider"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSItemProvider"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"registeredTypeIdentifiers": {
				"!type": "+Array"
			},
			"suggestedName": {
				"!type": "string"
			},
			"initWithItemTypeIdentifier": {
				"!type": "fn(item: +Object, typeIdentifier: string) -> +NSItemProvider"
			},
			"initWithContentsOfURL": {
				"!type": "fn(fileURL: +NSURL) -> +NSItemProvider"
			},
			"hasItemConformingToTypeIdentifier": {
				"!type": "fn(typeIdentifier: string) -> bool"
			},
			"registerObjectVisibility": {
				"!type": "fn(object: +Object, visibility: number) -> void"
			},
			"registerObjectOfClassVisibilityLoadHandler": {
				"!type": "fn(aClass: +Object, visibility: number, loadHandler: +Function) -> void"
			},
			"loadItemForTypeIdentifierOptionsCompletionHandler": {
				"!type": "fn(typeIdentifier: string, options: +Object, completionHandler: +Function) -> void"
			},
			"registerItemForTypeIdentifierLoadHandler": {
				"!type": "fn(typeIdentifier: string, loadHandler: +Function) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSItemProvider"
			},
			"canLoadObjectOfClass": {
				"!type": "fn(aClass: +Object) -> bool"
			},
			"loadObjectOfClassCompletionHandler": {
				"!type": "fn(aClass: +Object, completionHandler: +Function) -> +NSProgress"
			},
			"loadFileRepresentationForTypeIdentifierCompletionHandler": {
				"!type": "fn(typeIdentifier: string, completionHandler: +Function) -> +NSProgress"
			},
			"hasRepresentationConformingToTypeIdentifierFileOptions": {
				"!type": "fn(typeIdentifier: string, fileOptions: number) -> bool"
			},
			"initWithObject": {
				"!type": "fn(object: +Object) -> +NSItemProvider"
			},
			"registerFileRepresentationForTypeIdentifierFileOptionsVisibilityLoadHandler": {
				"!type": "fn(typeIdentifier: string, fileOptions: number, visibility: number, loadHandler: +Function) -> void"
			},
			"registeredTypeIdentifiersWithFileOptions": {
				"!type": "fn(fileOptions: number) -> +Array"
			},
			"loadInPlaceFileRepresentationForTypeIdentifierCompletionHandler": {
				"!type": "fn(typeIdentifier: string, completionHandler: +Function) -> +NSProgress"
			},
			"registerDataRepresentationForTypeIdentifierVisibilityLoadHandler": {
				"!type": "fn(typeIdentifier: string, visibility: number, loadHandler: +Function) -> void"
			},
			"loadDataRepresentationForTypeIdentifierCompletionHandler": {
				"!type": "fn(typeIdentifier: string, completionHandler: +Function) -> +NSProgress"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSItemProvider"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableParagraphStyle": {
		"defaultWritingDirectionForLanguage": {
			"!type": "fn(languageName: string) -> number"
		},
		"defaultParagraphStyle": {
			"!type": "fn() -> +NSParagraphStyle"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableParagraphStyle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableParagraphStyle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableParagraphStyle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paragraphSpacing": {
				"!type": "number"
			},
			"tailIndent": {
				"!type": "number"
			},
			"lineBreakStrategy": {
				"!type": "number"
			},
			"defaultTabInterval": {
				"!type": "number"
			},
			"lineSpacing": {
				"!type": "number"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"allowsDefaultTighteningForTruncation": {
				"!type": "bool"
			},
			"tabStops": {
				"!type": "+Array"
			},
			"baseWritingDirection": {
				"!type": "number"
			},
			"paragraphSpacingBefore": {
				"!type": "number"
			},
			"hyphenationFactor": {
				"!type": "number"
			},
			"headIndent": {
				"!type": "number"
			},
			"lineHeightMultiple": {
				"!type": "number"
			},
			"minimumLineHeight": {
				"!type": "number"
			},
			"maximumLineHeight": {
				"!type": "number"
			},
			"alignment": {
				"!type": "number"
			},
			"firstLineHeadIndent": {
				"!type": "number"
			},
			"paragraphSpacing": {
				"!type": "number"
			},
			"tailIndent": {
				"!type": "number"
			},
			"lineBreakStrategy": {
				"!type": "number"
			},
			"defaultTabInterval": {
				"!type": "number"
			},
			"lineSpacing": {
				"!type": "number"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"allowsDefaultTighteningForTruncation": {
				"!type": "bool"
			},
			"tabStops": {
				"!type": "+Array"
			},
			"baseWritingDirection": {
				"!type": "number"
			},
			"paragraphSpacingBefore": {
				"!type": "number"
			},
			"hyphenationFactor": {
				"!type": "number"
			},
			"headIndent": {
				"!type": "number"
			},
			"lineHeightMultiple": {
				"!type": "number"
			},
			"minimumLineHeight": {
				"!type": "number"
			},
			"maximumLineHeight": {
				"!type": "number"
			},
			"alignment": {
				"!type": "number"
			},
			"firstLineHeadIndent": {
				"!type": "number"
			},
			"addTabStop": {
				"!type": "fn(anObject: +NSTextTab) -> void"
			},
			"removeTabStop": {
				"!type": "fn(anObject: +NSTextTab) -> void"
			},
			"setParagraphStyle": {
				"!type": "fn(obj: +NSParagraphStyle) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableParagraphStyle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileCoordinator": {
		"addFilePresenter": {
			"!type": "fn(filePresenter: +Object) -> void"
		},
		"removeFilePresenter": {
			"!type": "fn(filePresenter: +Object) -> void"
		},
		"filePresenters": {
			"!type": "fn() -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileCoordinator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileCoordinator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileCoordinator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"purposeIdentifier": {
				"!type": "string"
			},
			"coordinateReadingItemAtURLOptionsErrorByAccessor": {
				"!type": "fn(url: +NSURL, options: number, outError: +Object, reader: +Function) -> void"
			},
			"coordinateAccessWithIntentsQueueByAccessor": {
				"!type": "fn(intents: +Array, queue: +NSOperationQueue, accessor: +Function) -> void"
			},
			"initWithFilePresenter": {
				"!type": "fn(filePresenterOrNil: +Object) -> +NSFileCoordinator"
			},
			"coordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor": {
				"!type": "fn(readingURL: +NSURL, readingOptions: number, writingURL: +NSURL, writingOptions: number, outError: +Object, readerWriter: +Function) -> void"
			},
			"itemAtURLDidChangeUbiquityAttributes": {
				"!type": "fn(url: +NSURL, attributes: +NSSet) -> void"
			},
			"itemAtURLDidMoveToURL": {
				"!type": "fn(oldURL: +NSURL, newURL: +NSURL) -> void"
			},
			"itemAtURLWillMoveToURL": {
				"!type": "fn(oldURL: +NSURL, newURL: +NSURL) -> void"
			},
			"coordinateWritingItemAtURLOptionsErrorByAccessor": {
				"!type": "fn(url: +NSURL, options: number, outError: +Object, writer: +Function) -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"coordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor": {
				"!type": "fn(url1: +NSURL, options1: number, url2: +NSURL, options2: number, outError: +Object, writer: +Function) -> void"
			},
			"prepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor": {
				"!type": "fn(readingURLs: +Array, readingOptions: number, writingURLs: +Array, writingOptions: number, outError: +Object, batchAccessor: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileCoordinator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileHandle": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileHandle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileHandle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileHandle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"availableData": {
				"!type": "+NSData"
			},
			"synchronizeAndReturnError": {
				"!type": "fn(error: +Object) -> bool"
			},
			"seekToOffsetError": {
				"!type": "fn(offset: number, error: +Object) -> bool"
			},
			"readDataUpToLengthError": {
				"!type": "fn(length: number, error: +Object) -> +NSData"
			},
			"initWithFileDescriptorCloseOnDealloc": {
				"!type": "fn(fd: number, closeopt: bool) -> +NSFileHandle"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSFileHandle"
			},
			"closeAndReturnError": {
				"!type": "fn(error: +Object) -> bool"
			},
			"getOffsetError": {
				"!type": "fn(offsetInFile: +Object, error: +Object) -> bool"
			},
			"writeDataError": {
				"!type": "fn(data: +NSData, error: +Object) -> bool"
			},
			"truncateAtOffsetError": {
				"!type": "fn(offset: number, error: +Object) -> bool"
			},
			"seekToEndReturningOffsetError": {
				"!type": "fn(offsetInFile: +Object, error: +Object) -> bool"
			},
			"readDataToEndOfFileAndReturnError": {
				"!type": "fn(error: +Object) -> +NSData"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileHandle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSConditionLock": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSConditionLock"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSConditionLock"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSConditionLock"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"condition": {
				"!type": "number"
			},
			"lockWhenCondition": {
				"!type": "fn(condition: number) -> void"
			},
			"lockWhenConditionBeforeDate": {
				"!type": "fn(condition: number, limit: +Date) -> bool"
			},
			"lockBeforeDate": {
				"!type": "fn(limit: +Date) -> bool"
			},
			"initWithCondition": {
				"!type": "fn(condition: number) -> +NSConditionLock"
			},
			"tryLock": {
				"!type": "fn() -> bool"
			},
			"tryLockWhenCondition": {
				"!type": "fn(condition: number) -> bool"
			},
			"unlockWithCondition": {
				"!type": "fn(condition: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSConditionLock"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPersonNameComponents": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPersonNameComponents"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPersonNameComponents"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPersonNameComponents"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"phoneticRepresentation": {
				"!type": "+NSPersonNameComponents"
			},
			"middleName": {
				"!type": "string"
			},
			"familyName": {
				"!type": "string"
			},
			"nameSuffix": {
				"!type": "string"
			},
			"namePrefix": {
				"!type": "string"
			},
			"givenName": {
				"!type": "string"
			},
			"nickname": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPersonNameComponents"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBarItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBarItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBarItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBarItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"titlePositionAdjustment": {
				"!type": "+Object"
			},
			"badgeValue": {
				"!type": "string"
			},
			"standardAppearance": {
				"!type": "+UITabBarAppearance"
			},
			"badgeColor": {
				"!type": "+UIColor"
			},
			"selectedImage": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"landscapeImagePhoneInsets": {
				"!type": "+Object"
			},
			"image": {
				"!type": "+UIImage"
			},
			"enabled": {
				"!type": "bool"
			},
			"landscapeImagePhone": {
				"!type": "+UIImage"
			},
			"largeContentSizeImage": {
				"!type": "+UIImage"
			},
			"tag": {
				"!type": "number"
			},
			"imageInsets": {
				"!type": "+Object"
			},
			"largeContentSizeImageInsets": {
				"!type": "+Object"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBarItem"
			},
			"badgeTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"initWithTabBarSystemItemTag": {
				"!type": "fn(systemItem: number, tag: number) -> +UITabBarItem"
			},
			"initWithTitleImageSelectedImage": {
				"!type": "fn(title: string, image: +UIImage, selectedImage: +UIImage) -> +UITabBarItem"
			},
			"finishedSelectedImage": {
				"!type": "fn() -> +UIImage"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItem"
			},
			"initWithTitleImageTag": {
				"!type": "fn(title: string, image: +UIImage, tag: number) -> +UITabBarItem"
			},
			"finishedUnselectedImage": {
				"!type": "fn() -> +UIImage"
			},
			"setFinishedSelectedImageWithFinishedUnselectedImage": {
				"!type": "fn(selectedImage: +UIImage, unselectedImage: +UIImage) -> void"
			},
			"setBadgeTextAttributesForState": {
				"!type": "fn(textAttributes: +Object, state: number) -> void"
			},
			"setTitleTextAttributesForState": {
				"!type": "fn(attributes: +Object, state: number) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItem"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBarItem"
			},
			"titleTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActivityIndicatorView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActivityIndicatorView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActivityIndicatorView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActivityIndicatorView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"color": {
				"!type": "+UIColor"
			},
			"animating": {
				"!type": "bool"
			},
			"activityIndicatorViewStyle": {
				"!type": "number"
			},
			"hidesWhenStopped": {
				"!type": "bool"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIActivityIndicatorView"
			},
			"initWithActivityIndicatorStyle": {
				"!type": "fn(style: number) -> +UIActivityIndicatorView"
			},
			"stopAnimating": {
				"!type": "fn() -> void"
			},
			"startAnimating": {
				"!type": "fn() -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIActivityIndicatorView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIActivityIndicatorView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIActivityIndicatorView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActivityIndicatorView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIEvent": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIEvent"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIEvent"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIEvent"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timestamp": {
				"!type": "number"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"subtype": {
				"!type": "number"
			},
			"allTouches": {
				"!type": "+NSSet"
			},
			"buttonMask": {
				"!type": "number"
			},
			"type": {
				"!type": "number"
			},
			"predictedTouchesForTouch": {
				"!type": "fn(touch: +UITouch) -> +Array"
			},
			"touchesForWindow": {
				"!type": "fn(window: +UIWindow) -> +NSSet"
			},
			"coalescedTouchesForTouch": {
				"!type": "fn(touch: +UITouch) -> +Array"
			},
			"touchesForGestureRecognizer": {
				"!type": "fn(gesture: +UIGestureRecognizer) -> +NSSet"
			},
			"touchesForView": {
				"!type": "fn(view: +UIView) -> +NSSet"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIEvent"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITouch": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITouch"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITouch"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITouch"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"altitudeAngle": {
				"!type": "number"
			},
			"gestureRecognizers": {
				"!type": "+Array"
			},
			"estimationUpdateIndex": {
				"!type": "number"
			},
			"timestamp": {
				"!type": "number"
			},
			"estimatedProperties": {
				"!type": "number"
			},
			"maximumPossibleForce": {
				"!type": "number"
			},
			"window": {
				"!type": "+UIWindow"
			},
			"tapCount": {
				"!type": "number"
			},
			"phase": {
				"!type": "number"
			},
			"force": {
				"!type": "number"
			},
			"majorRadius": {
				"!type": "number"
			},
			"estimatedPropertiesExpectingUpdates": {
				"!type": "number"
			},
			"type": {
				"!type": "number"
			},
			"majorRadiusTolerance": {
				"!type": "number"
			},
			"view": {
				"!type": "+UIView"
			},
			"previousLocationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"preciseLocationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"azimuthAngleInView": {
				"!type": "fn(view: +UIView) -> number"
			},
			"precisePreviousLocationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"azimuthUnitVectorInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITouch"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrintInteractionController": {
		"canPrintURL": {
			"!type": "fn(url: +NSURL) -> bool"
		},
		"canPrintData": {
			"!type": "fn(data: +NSData) -> bool"
		},
		"printableUTIs": {
			"!type": "fn() -> +NSSet"
		},
		"sharedPrintController": {
			"!type": "fn() -> +UIPrintInteractionController"
		},
		"isPrintingAvailable": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrintInteractionController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrintInteractionController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrintInteractionController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"printingItems": {
				"!type": "+Array"
			},
			"printInfo": {
				"!type": "+UIPrintInfo"
			},
			"printingItem": {
				"!type": "+Object"
			},
			"printPageRenderer": {
				"!type": "+UIPrintPageRenderer"
			},
			"showsNumberOfCopies": {
				"!type": "bool"
			},
			"showsPaperSelectionForLoadedPapers": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"printFormatter": {
				"!type": "+UIPrintFormatter"
			},
			"showsPageRange": {
				"!type": "bool"
			},
			"printPaper": {
				"!type": "+UIPrintPaper"
			},
			"presentFromBarButtonItemAnimatedCompletionHandler": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool, completion: +Function) -> bool"
			},
			"printToPrinterCompletionHandler": {
				"!type": "fn(printer: +UIPrinter, completion: +Function) -> bool"
			},
			"dismissAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"presentAnimatedCompletionHandler": {
				"!type": "fn(animated: bool, completion: +Function) -> bool"
			},
			"presentFromRectInViewAnimatedCompletionHandler": {
				"!type": "fn(rect: +Object, view: +UIView, animated: bool, completion: +Function) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrintInteractionController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXPCCoder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXPCCoder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXPCCoder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXPCCoder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"connection": {
				"!type": "+NSXPCConnection"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"encodeValueOfObjCTypeAt": {
				"!type": "fn(type: +Object, addr: +Object) -> void"
			},
			"versionForClassName": {
				"!type": "fn(className: string) -> number"
			},
			"encodeDataObject": {
				"!type": "fn(data: +NSData) -> void"
			},
			"decodeDataObject": {
				"!type": "fn() -> +NSData"
			},
			"decodeValueOfObjCTypeAtSize": {
				"!type": "fn(type: +Object, data: +Object, size: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXPCCoder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitPressure": {
		"inchesOfMercury": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"megapascals": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"kilopascals": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"gigapascals": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"bars": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"newtonsPerMetersSquared": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"poundsForcePerSquareInch": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"millimetersOfMercury": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"hectopascals": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"millibars": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitPressure"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitPressure"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitPressure"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitPressure"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitPressure"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCompoundPredicate": {
		"orPredicateWithSubpredicates": {
			"!type": "fn(subpredicates: +Array) -> +NSCompoundPredicate"
		},
		"notPredicateWithSubpredicate": {
			"!type": "fn(predicate: +NSPredicate) -> +NSCompoundPredicate"
		},
		"andPredicateWithSubpredicates": {
			"!type": "fn(subpredicates: +Array) -> +NSCompoundPredicate"
		},
		"predicateWithFormatArguments": {
			"!type": "fn(predicateFormat: string, argList: +Object) -> +NSPredicate"
		},
		"predicateWithFormat": {
			"!type": "fn(predicateFormat: string, args: Array.prototype) -> +NSPredicate"
		},
		"predicateWithValue": {
			"!type": "fn(value: bool) -> +NSPredicate"
		},
		"predicateWithFormatArgumentArray": {
			"!type": "fn(predicateFormat: string, arguments: +Array) -> +NSPredicate"
		},
		"predicateWithBlock": {
			"!type": "fn(block: +Function) -> +NSPredicate"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCompoundPredicate"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCompoundPredicate"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCompoundPredicate"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"subpredicates": {
				"!type": "+Array"
			},
			"compoundPredicateType": {
				"!type": "number"
			},
			"predicateFormat": {
				"!type": "string"
			},
			"initWithTypeSubpredicates": {
				"!type": "fn(type: number, subpredicates: +Array) -> +NSCompoundPredicate"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSCompoundPredicate"
			},
			"predicateWithSubstitutionVariables": {
				"!type": "fn(variables: +Object) -> +NSCompoundPredicate"
			},
			"evaluateWithObject": {
				"!type": "fn(object: +Object) -> bool"
			},
			"allowEvaluation": {
				"!type": "fn() -> void"
			},
			"evaluateWithObjectSubstitutionVariables": {
				"!type": "fn(object: +Object, bindings: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCompoundPredicate"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPageControl": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPageControl"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPageControl"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPageControl"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfPages": {
				"!type": "number"
			},
			"hidesForSinglePage": {
				"!type": "bool"
			},
			"allowsContinuousInteraction": {
				"!type": "bool"
			},
			"currentPageIndicatorTintColor": {
				"!type": "+UIColor"
			},
			"backgroundStyle": {
				"!type": "number"
			},
			"pageIndicatorTintColor": {
				"!type": "+UIColor"
			},
			"defersCurrentPageDisplay": {
				"!type": "bool"
			},
			"preferredIndicatorImage": {
				"!type": "+UIImage"
			},
			"currentPage": {
				"!type": "number"
			},
			"interactionState": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"sizeForNumberOfPages": {
				"!type": "fn(pageCount: number) -> +Object"
			},
			"updateCurrentPageDisplay": {
				"!type": "fn() -> void"
			},
			"setIndicatorImageForPage": {
				"!type": "fn(image: +UIImage, page: number) -> void"
			},
			"indicatorImageForPage": {
				"!type": "fn(page: number) -> +UIImage"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIPageControl"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIPageControl"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPageControl"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPageControl"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIPageControl"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPageControl"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKStorefront": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKStorefront"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKStorefront"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKStorefront"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "string"
			},
			"countryCode": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKStorefront"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImpactFeedbackGenerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImpactFeedbackGenerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImpactFeedbackGenerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImpactFeedbackGenerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"impactOccurredWithIntensity": {
				"!type": "fn(intensity: number) -> void"
			},
			"impactOccurred": {
				"!type": "fn() -> void"
			},
			"initWithStyle": {
				"!type": "fn(style: number) -> +UIImpactFeedbackGenerator"
			},
			"prepare": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImpactFeedbackGenerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSConstantString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSConstantString"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSConstantString"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSConstantString"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"jsinit": {
				"!type": "fn() -> +NSConstantString"
			},
			"characterAtIndex": {
				"!type": "fn(index: number) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSConstantString"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSConstantString"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusGuide": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusGuide"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusGuide"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusGuide"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"enabled": {
				"!type": "bool"
			},
			"preferredFocusEnvironments": {
				"!type": "+Array"
			},
			"preferredFocusedView": {
				"!type": "+UIView"
			},
			"trailingAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"centerXAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"leadingAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"centerYAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"owningView": {
				"!type": "+UIView"
			},
			"leftAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"bottomAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"layoutFrame": {
				"!type": "+Object"
			},
			"widthAnchor": {
				"!type": "+NSLayoutDimension"
			},
			"rightAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"identifier": {
				"!type": "string"
			},
			"heightAnchor": {
				"!type": "+NSLayoutDimension"
			},
			"topAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusGuide"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsRenderer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsRenderer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsRenderer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsRenderer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowsImageOutput": {
				"!type": "bool"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"initWithBounds": {
				"!type": "fn(bounds: +Object) -> +UIGraphicsRenderer"
			},
			"initWithBoundsFormat": {
				"!type": "fn(bounds: +Object, format: +UIGraphicsRendererFormat) -> +UIGraphicsRenderer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsRenderer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutItem": {
		"itemWithLayoutSize": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize) -> +NSCollectionLayoutItem"
		},
		"itemWithLayoutSizeSupplementaryItems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, supplementaryItems: +Array) -> +NSCollectionLayoutItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"contentInsets": {
				"!type": "+Object"
			},
			"edgeSpacing": {
				"!type": "+NSCollectionLayoutEdgeSpacing"
			},
			"supplementaryItems": {
				"!type": "+Array"
			},
			"layoutSize": {
				"!type": "+NSCollectionLayoutSize"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSScanner": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSScanner"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSScanner"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSScanner"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"locale": {
				"!type": "+Object"
			},
			"charactersToBeSkipped": {
				"!type": "+NSCharacterSet"
			},
			"scanLocation": {
				"!type": "number"
			},
			"string": {
				"!type": "string"
			},
			"caseSensitive": {
				"!type": "bool"
			},
			"initWithString": {
				"!type": "fn(string: string) -> +NSScanner"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSScanner"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMetadataQueryResultGroup": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMetadataQueryResultGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMetadataQueryResultGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMetadataQueryResultGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attribute": {
				"!type": "string"
			},
			"resultCount": {
				"!type": "number"
			},
			"results": {
				"!type": "+Array"
			},
			"value": {
				"!type": "+Object"
			},
			"subgroups": {
				"!type": "+Array"
			},
			"resultAtIndex": {
				"!type": "fn(idx: number) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMetadataQueryResultGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitDuration": {
		"picoseconds": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"seconds": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"nanoseconds": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"hours": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"microseconds": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"minutes": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"milliseconds": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitDuration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitDuration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitDuration"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitDuration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitDuration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISplitViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISplitViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISplitViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISplitViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preferredSplitBehavior": {
				"!type": "number"
			},
			"preferredPrimaryColumnWidthFraction": {
				"!type": "number"
			},
			"splitBehavior": {
				"!type": "number"
			},
			"viewControllers": {
				"!type": "+Array"
			},
			"displayModeButtonItem": {
				"!type": "+UIBarButtonItem"
			},
			"primaryBackgroundStyle": {
				"!type": "number"
			},
			"style": {
				"!type": "number"
			},
			"primaryColumnWidth": {
				"!type": "number"
			},
			"maximumPrimaryColumnWidth": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"primaryEdge": {
				"!type": "number"
			},
			"displayMode": {
				"!type": "number"
			},
			"collapsed": {
				"!type": "bool"
			},
			"preferredPrimaryColumnWidth": {
				"!type": "number"
			},
			"preferredDisplayMode": {
				"!type": "number"
			},
			"supplementaryColumnWidth": {
				"!type": "number"
			},
			"minimumPrimaryColumnWidth": {
				"!type": "number"
			},
			"showsSecondaryOnlyButton": {
				"!type": "bool"
			},
			"maximumSupplementaryColumnWidth": {
				"!type": "number"
			},
			"minimumSupplementaryColumnWidth": {
				"!type": "number"
			},
			"preferredSupplementaryColumnWidthFraction": {
				"!type": "number"
			},
			"presentsWithGesture": {
				"!type": "bool"
			},
			"preferredSupplementaryColumnWidth": {
				"!type": "number"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UISplitViewController"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewControllerForColumn": {
				"!type": "fn(column: number) -> +UIViewController"
			},
			"initWithStyle": {
				"!type": "fn(style: number) -> +UISplitViewController"
			},
			"hideColumn": {
				"!type": "fn(column: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISplitViewController"
			},
			"showColumn": {
				"!type": "fn(column: number) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"setViewControllerForColumn": {
				"!type": "fn(vc: +UIViewController, column: number) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UISplitViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISplitViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISplitViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNull": {
		"null": {
			"!type": "fn() -> null"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> null"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> null"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> null"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> null"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIColor": {
		"colorWithWhiteAlpha": {
			"!type": "fn(white: number, alpha: number) -> +UIColor"
		},
		"colorWithPatternImage": {
			"!type": "fn(image: +UIImage) -> +UIColor"
		},
		"cyanColor": {
			"!type": "fn() -> +UIColor"
		},
		"greenColor": {
			"!type": "fn() -> +UIColor"
		},
		"orangeColor": {
			"!type": "fn() -> +UIColor"
		},
		"colorWithDisplayP3RedGreenBlueAlpha": {
			"!type": "fn(displayP3Red: number, green: number, blue: number, alpha: number) -> +UIColor"
		},
		"redColor": {
			"!type": "fn() -> +UIColor"
		},
		"colorWithRedGreenBlueAlpha": {
			"!type": "fn(red: number, green: number, blue: number, alpha: number) -> +UIColor"
		},
		"grayColor": {
			"!type": "fn() -> +UIColor"
		},
		"purpleColor": {
			"!type": "fn() -> +UIColor"
		},
		"brownColor": {
			"!type": "fn() -> +UIColor"
		},
		"blackColor": {
			"!type": "fn() -> +UIColor"
		},
		"colorWithHueSaturationBrightnessAlpha": {
			"!type": "fn(hue: number, saturation: number, brightness: number, alpha: number) -> +UIColor"
		},
		"magentaColor": {
			"!type": "fn() -> +UIColor"
		},
		"lightGrayColor": {
			"!type": "fn() -> +UIColor"
		},
		"colorWithCGColor": {
			"!type": "fn(cgColor: +Object) -> +UIColor"
		},
		"darkGrayColor": {
			"!type": "fn() -> +UIColor"
		},
		"blueColor": {
			"!type": "fn() -> +UIColor"
		},
		"colorWithCIColor": {
			"!type": "fn(ciColor: +CIColor) -> +UIColor"
		},
		"whiteColor": {
			"!type": "fn() -> +UIColor"
		},
		"clearColor": {
			"!type": "fn() -> +UIColor"
		},
		"yellowColor": {
			"!type": "fn() -> +UIColor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIColor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIColor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIColor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"CGColor": {
				"!type": "+Object"
			},
			"CIColor": {
				"!type": "+CIColor"
			},
			"getRedGreenBlueAlpha": {
				"!type": "fn(red: +Object, green: +Object, blue: +Object, alpha: +Object) -> bool"
			},
			"setStroke": {
				"!type": "fn() -> void"
			},
			"set": {
				"!type": "fn() -> void"
			},
			"initWithPatternImage": {
				"!type": "fn(image: +UIImage) -> +UIColor"
			},
			"CGColor": {
				"!type": "fn() -> +Object"
			},
			"getHueSaturationBrightnessAlpha": {
				"!type": "fn(hue: +Object, saturation: +Object, brightness: +Object, alpha: +Object) -> bool"
			},
			"initWithDisplayP3RedGreenBlueAlpha": {
				"!type": "fn(displayP3Red: number, green: number, blue: number, alpha: number) -> +UIColor"
			},
			"initWithHueSaturationBrightnessAlpha": {
				"!type": "fn(hue: number, saturation: number, brightness: number, alpha: number) -> +UIColor"
			},
			"initWithRedGreenBlueAlpha": {
				"!type": "fn(red: number, green: number, blue: number, alpha: number) -> +UIColor"
			},
			"initWithCIColor": {
				"!type": "fn(ciColor: +CIColor) -> +UIColor"
			},
			"getWhiteAlpha": {
				"!type": "fn(white: +Object, alpha: +Object) -> bool"
			},
			"initWithWhiteAlpha": {
				"!type": "fn(white: number, alpha: number) -> +UIColor"
			},
			"setFill": {
				"!type": "fn() -> void"
			},
			"initWithCGColor": {
				"!type": "fn(cgColor: +Object) -> +UIColor"
			},
			"colorWithAlphaComponent": {
				"!type": "fn(alpha: number) -> +UIColor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIColor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISwipeActionsConfiguration": {
		"configurationWithActions": {
			"!type": "fn(actions: +Array) -> +UISwipeActionsConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISwipeActionsConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISwipeActionsConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISwipeActionsConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"performsFirstActionWithFullSwipe": {
				"!type": "bool"
			},
			"actions": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISwipeActionsConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAction": {
		"actionWithTitleImageIdentifierHandler": {
			"!type": "fn(title: string, image: +UIImage, identifier: string, handler: +Function) -> +UIAction"
		},
		"actionWithHandler": {
			"!type": "fn(handler: +Function) -> +UIAction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"discoverabilityTitle": {
				"!type": "string"
			},
			"title": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"state": {
				"!type": "number"
			},
			"attributes": {
				"!type": "number"
			},
			"identifier": {
				"!type": "string"
			},
			"sender": {
				"!type": "+Object"
			},
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIAction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewDropProposal": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewDropProposal"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewDropProposal"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewDropProposal"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"intent": {
				"!type": "number"
			},
			"precise": {
				"!type": "bool"
			},
			"prefersFullSizePreview": {
				"!type": "bool"
			},
			"operation": {
				"!type": "number"
			},
			"initWithDropOperationIntent": {
				"!type": "fn(operation: number, intent: number) -> +UITableViewDropProposal"
			},
			"initWithDropOperation": {
				"!type": "fn(operation: number) -> +UITableViewDropProposal"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewDropProposal"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSInputStream": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSInputStream"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSInputStream"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSInputStream"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"hasBytesAvailable": {
				"!type": "bool"
			},
			"streamError": {
				"!type": "+NSError"
			},
			"streamStatus": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithData": {
				"!type": "fn(data: +NSData) -> +NSInputStream"
			},
			"getBufferLength": {
				"!type": "fn(buffer: +Object, len: +Object) -> bool"
			},
			"readMaxLength": {
				"!type": "fn(buffer: +Object, len: number) -> number"
			},
			"initWithURL": {
				"!type": "fn(url: +NSURL) -> +NSInputStream"
			},
			"setPropertyForKey": {
				"!type": "fn(property: +Object, key: string) -> bool"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"propertyForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"close": {
				"!type": "fn() -> void"
			},
			"open": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSInputStream"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLCache": {
		"sharedURLCache": {
			"!type": "fn() -> +NSURLCache"
		},
		"setSharedURLCache": {
			"!type": "fn(sharedURLCache: +NSURLCache) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLCache"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLCache"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLCache"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentMemoryUsage": {
				"!type": "number"
			},
			"memoryCapacity": {
				"!type": "number"
			},
			"currentDiskUsage": {
				"!type": "number"
			},
			"diskCapacity": {
				"!type": "number"
			},
			"storeCachedResponseForRequest": {
				"!type": "fn(cachedResponse: +NSCachedURLResponse, request: +NSURLRequest) -> void"
			},
			"removeCachedResponseForRequest": {
				"!type": "fn(request: +NSURLRequest) -> void"
			},
			"removeCachedResponsesSinceDate": {
				"!type": "fn(date: +Date) -> void"
			},
			"cachedResponseForRequest": {
				"!type": "fn(request: +NSURLRequest) -> +NSCachedURLResponse"
			},
			"removeAllCachedResponses": {
				"!type": "fn() -> void"
			},
			"initWithMemoryCapacityDiskCapacityDiskPath": {
				"!type": "fn(memoryCapacity: number, diskCapacity: number, path: string) -> +NSURLCache"
			},
			"initWithMemoryCapacityDiskCapacityDirectoryURL": {
				"!type": "fn(memoryCapacity: number, diskCapacity: number, directoryURL: +NSURL) -> +NSURLCache"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLCache"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBackgroundConfiguration": {
		"clearConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listGroupedHeaderFooterConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listPlainCellConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listGroupedCellConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listAccompaniedSidebarCellConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listSidebarHeaderConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listSidebarCellConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"listPlainHeaderFooterConfiguration": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBackgroundConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBackgroundConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsbackgroundColorTransformer": {
				"!type": "+Function"
			},
			"edgesAddingLayoutMarginsToBackgroundInsets": {
				"!type": "number"
			},
			"visualEffect": {
				"!type": "+UIVisualEffect"
			},
			"customView": {
				"!type": "+UIView"
			},
			"strokeWidth": {
				"!type": "number"
			},
			"jsstrokeColorTransformer": {
				"!type": "+Function"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"backgroundInsets": {
				"!type": "+Object"
			},
			"strokeOutset": {
				"!type": "number"
			},
			"strokeColor": {
				"!type": "+UIColor"
			},
			"resolvedStrokeColorForTintColor": {
				"!type": "fn(tintColor: +UIColor) -> +UIColor"
			},
			"resolvedBackgroundColorForTintColor": {
				"!type": "fn(tintColor: +UIColor) -> +UIColor"
			},
			"updatedConfigurationForState": {
				"!type": "fn(state: +Object) -> +UIBackgroundConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBackgroundConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewDiffableDataSourceReorderingHandlers": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewDiffableDataSourceReorderingHandlers"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewDiffableDataSourceReorderingHandlers"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewDiffableDataSourceReorderingHandlers"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jswillReorderHandler": {
				"!type": "+Function"
			},
			"jscanReorderItemHandler": {
				"!type": "+Function"
			},
			"jsdidReorderHandler": {
				"!type": "+Function"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewDiffableDataSourceReorderingHandlers"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutSpacing": {
		"fixedSpacing": {
			"!type": "fn(fixedSpacing: number) -> +NSCollectionLayoutSpacing"
		},
		"flexibleSpacing": {
			"!type": "fn(flexibleSpacing: number) -> +NSCollectionLayoutSpacing"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutSpacing"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutSpacing"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutSpacing"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"isFlexibleSpacing": {
				"!type": "bool"
			},
			"isFixedSpacing": {
				"!type": "bool"
			},
			"spacing": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutSpacing"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFontDescriptor": {
		"preferredFontDescriptorWithTextStyle": {
			"!type": "fn(style: string) -> +UIFontDescriptor"
		},
		"fontDescriptorWithNameMatrix": {
			"!type": "fn(fontName: string, matrix: +Object) -> +UIFontDescriptor"
		},
		"fontDescriptorWithNameSize": {
			"!type": "fn(fontName: string, size: number) -> +UIFontDescriptor"
		},
		"preferredFontDescriptorWithTextStyleCompatibleWithTraitCollection": {
			"!type": "fn(style: string, traitCollection: +UITraitCollection) -> +UIFontDescriptor"
		},
		"fontDescriptorWithFontAttributes": {
			"!type": "fn(attributes: +Object) -> +UIFontDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFontDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFontDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFontDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"postscriptName": {
				"!type": "string"
			},
			"fontAttributes": {
				"!type": "+Object"
			},
			"pointSize": {
				"!type": "number"
			},
			"matrix": {
				"!type": "+Object"
			},
			"symbolicTraits": {
				"!type": "number"
			},
			"fontDescriptorWithDesign": {
				"!type": "fn(design: string) -> +UIFontDescriptor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIFontDescriptor"
			},
			"fontDescriptorWithSize": {
				"!type": "fn(newPointSize: number) -> +UIFontDescriptor"
			},
			"fontDescriptorByAddingAttributes": {
				"!type": "fn(attributes: +Object) -> +UIFontDescriptor"
			},
			"jsinit": {
				"!type": "fn() -> +UIFontDescriptor"
			},
			"fontDescriptorWithFamily": {
				"!type": "fn(newFamily: string) -> +UIFontDescriptor"
			},
			"matchingFontDescriptorsWithMandatoryKeys": {
				"!type": "fn(mandatoryKeys: +NSSet) -> +Array"
			},
			"fontDescriptorWithMatrix": {
				"!type": "fn(matrix: +Object) -> +UIFontDescriptor"
			},
			"fontDescriptorWithFace": {
				"!type": "fn(newFace: string) -> +UIFontDescriptor"
			},
			"fontDescriptorWithSymbolicTraits": {
				"!type": "fn(symbolicTraits: number) -> +UIFontDescriptor"
			},
			"objectForKey": {
				"!type": "fn(anAttribute: string) -> +Object"
			},
			"initWithFontAttributes": {
				"!type": "fn(attributes: +Object) -> +UIFontDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFontDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTimer": {
		"scheduledTimerWithTimeIntervalRepeatsBlock": {
			"!type": "fn(interval: number, repeats: bool, block: +Function) -> +NSTimer"
		},
		"timerWithTimeIntervalRepeatsBlock": {
			"!type": "fn(interval: number, repeats: bool, block: +Function) -> +NSTimer"
		},
		"scheduledTimerWithTimeIntervalInvocationRepeats": {
			"!type": "fn(ti: number, invocation: +NSInvocation, yesOrNo: bool) -> +NSTimer"
		},
		"scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats": {
			"!type": "fn(ti: number, aTarget: +Object, aSelector: string, userInfo: +Object, yesOrNo: bool) -> +NSTimer"
		},
		"timerWithTimeIntervalInvocationRepeats": {
			"!type": "fn(ti: number, invocation: +NSInvocation, yesOrNo: bool) -> +NSTimer"
		},
		"timerWithTimeIntervalTargetSelectorUserInfoRepeats": {
			"!type": "fn(ti: number, aTarget: +Object, aSelector: string, userInfo: +Object, yesOrNo: bool) -> +NSTimer"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTimer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTimer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTimer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"fireDate": {
				"!type": "+Date"
			},
			"timeInterval": {
				"!type": "number"
			},
			"valid": {
				"!type": "bool"
			},
			"tolerance": {
				"!type": "number"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"initWithFireDateIntervalRepeatsBlock": {
				"!type": "fn(date: +Date, interval: number, repeats: bool, block: +Function) -> +NSTimer"
			},
			"fire": {
				"!type": "fn() -> void"
			},
			"initWithFireDateIntervalTargetSelectorUserInfoRepeats": {
				"!type": "fn(date: +Date, ti: number, t: +Object, s: string, ui: +Object, rep: bool) -> +NSTimer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTimer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchToken": {
		"tokenWithIconText": {
			"!type": "fn(icon: +UIImage, text: string) -> +UISearchToken"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchToken"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchToken"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchToken"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"representedObject": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchToken"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutXAxisAnchor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutXAxisAnchor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutXAxisAnchor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutXAxisAnchor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"anchorWithOffsetToAnchor": {
				"!type": "fn(otherAnchor: +NSLayoutXAxisAnchor) -> +NSLayoutDimension"
			},
			"constraintGreaterThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutXAxisAnchor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFontPickerViewControllerConfiguration": {
		"filterPredicateForFilteredLanguages": {
			"!type": "fn(filteredLanguages: +Array) -> +NSPredicate"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFontPickerViewControllerConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFontPickerViewControllerConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFontPickerViewControllerConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"displayUsingSystemFont": {
				"!type": "bool"
			},
			"includeFaces": {
				"!type": "bool"
			},
			"filteredTraits": {
				"!type": "number"
			},
			"filteredLanguagesPredicate": {
				"!type": "+NSPredicate"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFontPickerViewControllerConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScrollView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScrollView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScrollView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScrollView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"scrollEnabled": {
				"!type": "bool"
			},
			"panGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"showsVerticalScrollIndicator": {
				"!type": "bool"
			},
			"contentOffset": {
				"!type": "+Object"
			},
			"minimumZoomScale": {
				"!type": "number"
			},
			"directionalLockEnabled": {
				"!type": "bool"
			},
			"indicatorStyle": {
				"!type": "number"
			},
			"dragging": {
				"!type": "bool"
			},
			"automaticallyAdjustsScrollIndicatorInsets": {
				"!type": "bool"
			},
			"decelerating": {
				"!type": "bool"
			},
			"scrollsToTop": {
				"!type": "bool"
			},
			"decelerationRate": {
				"!type": "number"
			},
			"pinchGestureRecognizer": {
				"!type": "+UIPinchGestureRecognizer"
			},
			"alwaysBounceVertical": {
				"!type": "bool"
			},
			"maximumZoomScale": {
				"!type": "number"
			},
			"canCancelContentTouches": {
				"!type": "bool"
			},
			"contentInset": {
				"!type": "+Object"
			},
			"contentSize": {
				"!type": "+Object"
			},
			"pagingEnabled": {
				"!type": "bool"
			},
			"verticalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"contentLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomBouncing": {
				"!type": "bool"
			},
			"tracking": {
				"!type": "bool"
			},
			"showsHorizontalScrollIndicator": {
				"!type": "bool"
			},
			"frameLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomScale": {
				"!type": "number"
			},
			"bouncesZoom": {
				"!type": "bool"
			},
			"scrollIndicatorInsets": {
				"!type": "+Object"
			},
			"adjustedContentInset": {
				"!type": "+Object"
			},
			"keyboardDismissMode": {
				"!type": "number"
			},
			"indexDisplayMode": {
				"!type": "number"
			},
			"alwaysBounceHorizontal": {
				"!type": "bool"
			},
			"horizontalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"zooming": {
				"!type": "bool"
			},
			"refreshControl": {
				"!type": "+UIRefreshControl"
			},
			"bounces": {
				"!type": "bool"
			},
			"directionalPressGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"contentInsetAdjustmentBehavior": {
				"!type": "number"
			},
			"delaysContentTouches": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"touchesShouldBeginWithEventInContentView": {
				"!type": "fn(touches: +NSSet, event: +UIEvent, view: +UIView) -> bool"
			},
			"scrollRectToVisibleAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setContentOffsetAnimated": {
				"!type": "fn(contentOffset: +Object, animated: bool) -> void"
			},
			"adjustedContentInsetDidChange": {
				"!type": "fn() -> void"
			},
			"zoomToRectAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setZoomScaleAnimated": {
				"!type": "fn(scale: number, animated: bool) -> void"
			},
			"scrollIndicatorInsets": {
				"!type": "fn() -> +Object"
			},
			"touchesShouldCancelInContentView": {
				"!type": "fn(view: +UIView) -> bool"
			},
			"flashScrollIndicators": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIScrollView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIScrollView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScrollView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILocalizedIndexedCollation": {
		"currentCollation": {
			"!type": "fn() -> +UILocalizedIndexedCollation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILocalizedIndexedCollation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILocalizedIndexedCollation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILocalizedIndexedCollation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"sectionIndexTitles": {
				"!type": "+Array"
			},
			"sectionTitles": {
				"!type": "+Array"
			},
			"sectionForObjectCollationStringSelector": {
				"!type": "fn(object: +Object, selector: string) -> number"
			},
			"sortedArrayFromArrayCollationStringSelector": {
				"!type": "fn(array: +Array, selector: string) -> +Array"
			},
			"sectionForSectionIndexTitleAtIndex": {
				"!type": "fn(indexTitleIndex: number) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILocalizedIndexedCollation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIApplicationShortcutIcon": {
		"iconWithSystemImageName": {
			"!type": "fn(systemImageName: string) -> +UIApplicationShortcutIcon"
		},
		"iconWithType": {
			"!type": "fn(type: number) -> +UIApplicationShortcutIcon"
		},
		"iconWithTemplateImageName": {
			"!type": "fn(templateImageName: string) -> +UIApplicationShortcutIcon"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIApplicationShortcutIcon"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIApplicationShortcutIcon"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIApplicationShortcutIcon"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIApplicationShortcutIcon"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSBundle": {
		"pathForResourceOfTypeInDirectory": {
			"!type": "fn(name: string, ext: string, bundlePath: string) -> string"
		},
		"preferredLocalizationsFromArray": {
			"!type": "fn(localizationsArray: +Array) -> +Array"
		},
		"bundleWithPath": {
			"!type": "fn(path: string) -> +NSBundle"
		},
		"allFrameworks": {
			"!type": "fn() -> +Array"
		},
		"URLForResourceWithExtensionSubdirectoryInBundleWithURL": {
			"!type": "fn(name: string, ext: string, subpath: string, bundleURL: +NSURL) -> +NSURL"
		},
		"bundleForClass": {
			"!type": "fn(aClass: +Object) -> +NSBundle"
		},
		"URLsForResourcesWithExtensionSubdirectoryInBundleWithURL": {
			"!type": "fn(ext: string, subpath: string, bundleURL: +NSURL) -> +Array"
		},
		"bundleWithURL": {
			"!type": "fn(url: +NSURL) -> +NSBundle"
		},
		"preferredLocalizationsFromArrayForPreferences": {
			"!type": "fn(localizationsArray: +Array, preferencesArray: +Array) -> +Array"
		},
		"allBundles": {
			"!type": "fn() -> +Array"
		},
		"pathsForResourcesOfTypeInDirectory": {
			"!type": "fn(ext: string, bundlePath: string) -> +Array"
		},
		"bundleWithIdentifier": {
			"!type": "fn(identifier: string) -> +NSBundle"
		},
		"mainBundle": {
			"!type": "fn() -> +NSBundle"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSBundle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSBundle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSBundle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"localizedInfoDictionary": {
				"!type": "+Object"
			},
			"sharedFrameworksURL": {
				"!type": "+NSURL"
			},
			"privateFrameworksPath": {
				"!type": "string"
			},
			"loaded": {
				"!type": "bool"
			},
			"bundleURL": {
				"!type": "+NSURL"
			},
			"sharedSupportPath": {
				"!type": "string"
			},
			"builtInPlugInsPath": {
				"!type": "string"
			},
			"developmentLocalization": {
				"!type": "string"
			},
			"preferredLocalizations": {
				"!type": "+Array"
			},
			"executableArchitectures": {
				"!type": "+Array"
			},
			"sharedFrameworksPath": {
				"!type": "string"
			},
			"infoDictionary": {
				"!type": "+Object"
			},
			"executableURL": {
				"!type": "+NSURL"
			},
			"bundlePath": {
				"!type": "string"
			},
			"builtInPlugInsURL": {
				"!type": "+NSURL"
			},
			"resourcePath": {
				"!type": "string"
			},
			"jsprincipalClass": {
				"!type": "+Object"
			},
			"executablePath": {
				"!type": "string"
			},
			"localizations": {
				"!type": "+Array"
			},
			"appStoreReceiptURL": {
				"!type": "+NSURL"
			},
			"resourceURL": {
				"!type": "+NSURL"
			},
			"sharedSupportURL": {
				"!type": "+NSURL"
			},
			"privateFrameworksURL": {
				"!type": "+NSURL"
			},
			"bundleIdentifier": {
				"!type": "string"
			},
			"load": {
				"!type": "fn() -> bool"
			},
			"URLsForResourcesWithExtensionSubdirectory": {
				"!type": "fn(ext: string, subpath: string) -> +Array"
			},
			"pathForResourceOfTypeInDirectoryForLocalization": {
				"!type": "fn(name: string, ext: string, subpath: string, localizationName: string) -> string"
			},
			"pathForAuxiliaryExecutable": {
				"!type": "fn(executableName: string) -> string"
			},
			"URLForAuxiliaryExecutable": {
				"!type": "fn(executableName: string) -> +NSURL"
			},
			"localizedStringForKeyValueTable": {
				"!type": "fn(key: string, value: string, tableName: string) -> string"
			},
			"initWithPath": {
				"!type": "fn(path: string) -> +NSBundle"
			},
			"objectForInfoDictionaryKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"pathsForResourcesOfTypeInDirectoryForLocalization": {
				"!type": "fn(ext: string, subpath: string, localizationName: string) -> +Array"
			},
			"URLsForResourcesWithExtensionSubdirectoryLocalization": {
				"!type": "fn(ext: string, subpath: string, localizationName: string) -> +Array"
			},
			"classNamed": {
				"!type": "fn(className: string) -> +Object"
			},
			"loadAndReturnError": {
				"!type": "fn(error: +Object) -> bool"
			},
			"preflightAndReturnError": {
				"!type": "fn(error: +Object) -> bool"
			},
			"URLForResourceWithExtensionSubdirectoryLocalization": {
				"!type": "fn(name: string, ext: string, subpath: string, localizationName: string) -> +NSURL"
			},
			"pathsForResourcesOfTypeInDirectory": {
				"!type": "fn(ext: string, subpath: string) -> +Array"
			},
			"pathForResourceOfTypeInDirectory": {
				"!type": "fn(name: string, ext: string, subpath: string) -> string"
			},
			"URLForResourceWithExtension": {
				"!type": "fn(name: string, ext: string) -> +NSURL"
			},
			"URLForResourceWithExtensionSubdirectory": {
				"!type": "fn(name: string, ext: string, subpath: string) -> +NSURL"
			},
			"unload": {
				"!type": "fn() -> bool"
			},
			"initWithURL": {
				"!type": "fn(url: +NSURL) -> +NSBundle"
			},
			"pathForResourceOfType": {
				"!type": "fn(name: string, ext: string) -> string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSBundle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKStoreProductViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKStoreProductViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKStoreProductViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKStoreProductViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"loadProductWithParametersCompletionBlock": {
				"!type": "fn(parameters: +Object, block: +Function) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +SKStoreProductViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +SKStoreProductViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKStoreProductViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStatusBarManager": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStatusBarManager"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStatusBarManager"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStatusBarManager"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"statusBarStyle": {
				"!type": "number"
			},
			"statusBarFrame": {
				"!type": "+Object"
			},
			"statusBarHidden": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStatusBarManager"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMetadataQueryAttributeValueTuple": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMetadataQueryAttributeValueTuple"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMetadataQueryAttributeValueTuple"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMetadataQueryAttributeValueTuple"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"attribute": {
				"!type": "string"
			},
			"value": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMetadataQueryAttributeValueTuple"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitTemperature": {
		"fahrenheit": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"kelvin": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"celsius": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitTemperature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitTemperature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitTemperature"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitTemperature"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitTemperature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextInteraction": {
		"textInteractionForMode": {
			"!type": "fn(mode: number) -> +UITextInteraction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"gesturesForFailureRequirements": {
				"!type": "+Array"
			},
			"delegate": {
				"!type": "+Object"
			},
			"textInput": {
				"!type": "+UIResponder"
			},
			"textInteractionMode": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPreviewTarget": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPreviewTarget"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPreviewTarget"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPreviewTarget"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"container": {
				"!type": "+UIView"
			},
			"center": {
				"!type": "+Object"
			},
			"transform": {
				"!type": "+Object"
			},
			"initWithContainerCenterTransform": {
				"!type": "fn(container: +UIView, center: +Object, transform: +Object) -> +UIPreviewTarget"
			},
			"initWithContainerCenter": {
				"!type": "fn(container: +UIView, center: +Object) -> +UIPreviewTarget"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewTarget"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"title": {
				"!type": "string"
			},
			"landscapeImagePhoneInsets": {
				"!type": "+Object"
			},
			"image": {
				"!type": "+UIImage"
			},
			"enabled": {
				"!type": "bool"
			},
			"landscapeImagePhone": {
				"!type": "+UIImage"
			},
			"largeContentSizeImage": {
				"!type": "+UIImage"
			},
			"tag": {
				"!type": "number"
			},
			"imageInsets": {
				"!type": "+Object"
			},
			"largeContentSizeImageInsets": {
				"!type": "+Object"
			},
			"setTitleTextAttributesForState": {
				"!type": "fn(attributes: +Object, state: number) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarItem"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarItem"
			},
			"titleTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIImage": {
		"redImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithCVImageBuffer": {
			"!type": "fn(imageBuffer: +Object) -> +CIImage"
		},
		"blackImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithCGImage": {
			"!type": "fn(image: +Object) -> +CIImage"
		},
		"grayImage": {
			"!type": "fn() -> +CIImage"
		},
		"blueImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithMTLTextureOptions": {
			"!type": "fn(texture: +Object, options: +Object) -> +CIImage"
		},
		"imageWithTextureSizeFlippedColorSpace": {
			"!type": "fn(name: number, size: +Object, flipped: bool, colorSpace: +Object) -> +CIImage"
		},
		"imageWithContentsOfURL": {
			"!type": "fn(url: +NSURL) -> +CIImage"
		},
		"emptyImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithBitmapDataBytesPerRowSizeFormatColorSpace": {
			"!type": "fn(data: +NSData, bytesPerRow: number, size: +Object, format: number, colorSpace: +Object) -> +CIImage"
		},
		"imageWithDataOptions": {
			"!type": "fn(data: +NSData, options: +Object) -> +CIImage"
		},
		"whiteImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithContentsOfURLOptions": {
			"!type": "fn(url: +NSURL, options: +Object) -> +CIImage"
		},
		"imageWithCVPixelBufferOptions": {
			"!type": "fn(pixelBuffer: +Object, options: +Object) -> +CIImage"
		},
		"imageWithData": {
			"!type": "fn(data: +NSData) -> +CIImage"
		},
		"magentaImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithCVImageBufferOptions": {
			"!type": "fn(imageBuffer: +Object, options: +Object) -> +CIImage"
		},
		"clearImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithIOSurfaceOptions": {
			"!type": "fn(surface: +Object, options: +Object) -> +CIImage"
		},
		"imageWithCVPixelBuffer": {
			"!type": "fn(pixelBuffer: +Object) -> +CIImage"
		},
		"greenImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithCGImageSourceIndexOptions": {
			"!type": "fn(source: +Object, index: number, dict: +Object) -> +CIImage"
		},
		"yellowImage": {
			"!type": "fn() -> +CIImage"
		},
		"cyanImage": {
			"!type": "fn() -> +CIImage"
		},
		"imageWithColor": {
			"!type": "fn(color: +CIColor) -> +CIImage"
		},
		"imageWithIOSurface": {
			"!type": "fn(surface: +Object) -> +CIImage"
		},
		"imageWithCGImageOptions": {
			"!type": "fn(image: +Object, options: +Object) -> +CIImage"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIImage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIImage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIImage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"CGImage": {
				"!type": "+Object"
			},
			"url": {
				"!type": "+NSURL"
			},
			"colorSpace": {
				"!type": "+Object"
			},
			"pixelBuffer": {
				"!type": "+Object"
			},
			"extent": {
				"!type": "+Object"
			},
			"properties": {
				"!type": "+Object"
			},
			"imageByUnpremultiplyingAlpha": {
				"!type": "fn() -> +CIImage"
			},
			"initWithCVImageBufferOptions": {
				"!type": "fn(imageBuffer: +Object, options: +Object) -> +CIImage"
			},
			"imageByApplyingCGOrientation": {
				"!type": "fn(orientation: number) -> +CIImage"
			},
			"imageByInsertingIntermediate": {
				"!type": "fn() -> +CIImage"
			},
			"initWithDataOptions": {
				"!type": "fn(data: +NSData, options: +Object) -> +CIImage"
			},
			"initWithCVImageBuffer": {
				"!type": "fn(imageBuffer: +Object) -> +CIImage"
			},
			"initWithMTLTextureOptions": {
				"!type": "fn(texture: +Object, options: +Object) -> +CIImage"
			},
			"imageByApplyingGaussianBlurWithSigma": {
				"!type": "fn(sigma: number) -> +CIImage"
			},
			"imageByApplyingOrientation": {
				"!type": "fn(orientation: number) -> +CIImage"
			},
			"initWithContentsOfURLOptions": {
				"!type": "fn(url: +NSURL, options: +Object) -> +CIImage"
			},
			"imageByClampingToRect": {
				"!type": "fn(rect: +Object) -> +CIImage"
			},
			"imageByPremultiplyingAlpha": {
				"!type": "fn() -> +CIImage"
			},
			"initWithTextureSizeFlippedColorSpace": {
				"!type": "fn(name: number, size: +Object, flipped: bool, colorSpace: +Object) -> +CIImage"
			},
			"imageBySamplingNearest": {
				"!type": "fn() -> +CIImage"
			},
			"imageBySettingProperties": {
				"!type": "fn(properties: +Object) -> +CIImage"
			},
			"imageBySamplingLinear": {
				"!type": "fn() -> +CIImage"
			},
			"initWithCVPixelBuffer": {
				"!type": "fn(pixelBuffer: +Object) -> +CIImage"
			},
			"imageTransformForOrientation": {
				"!type": "fn(orientation: number) -> +Object"
			},
			"imageByApplyingFilterWithInputParameters": {
				"!type": "fn(filterName: string, params: +Object) -> +CIImage"
			},
			"imageByClampingToExtent": {
				"!type": "fn() -> +CIImage"
			},
			"initWithColor": {
				"!type": "fn(color: +CIColor) -> +CIImage"
			},
			"imageByApplyingTransform": {
				"!type": "fn(matrix: +Object) -> +CIImage"
			},
			"initWithData": {
				"!type": "fn(data: +NSData) -> +CIImage"
			},
			"initWithCGImageOptions": {
				"!type": "fn(image: +Object, options: +Object) -> +CIImage"
			},
			"regionOfInterestForImageInRect": {
				"!type": "fn(image: +CIImage, rect: +Object) -> +Object"
			},
			"initWithIOSurface": {
				"!type": "fn(surface: +Object) -> +CIImage"
			},
			"imageByColorMatchingColorSpaceToWorkingSpace": {
				"!type": "fn(colorSpace: +Object) -> +CIImage"
			},
			"initWithCGImage": {
				"!type": "fn(image: +Object) -> +CIImage"
			},
			"initWithCGImageSourceIndexOptions": {
				"!type": "fn(source: +Object, index: number, dict: +Object) -> +CIImage"
			},
			"imageTransformForCGOrientation": {
				"!type": "fn(orientation: number) -> +Object"
			},
			"imageByCompositingOverImage": {
				"!type": "fn(dest: +CIImage) -> +CIImage"
			},
			"initWithContentsOfURL": {
				"!type": "fn(url: +NSURL) -> +CIImage"
			},
			"imageByApplyingTransformHighQualityDownsample": {
				"!type": "fn(matrix: +Object, highQualityDownsample: bool) -> +CIImage"
			},
			"initWithBitmapDataBytesPerRowSizeFormatColorSpace": {
				"!type": "fn(data: +NSData, bytesPerRow: number, size: +Object, format: number, colorSpace: +Object) -> +CIImage"
			},
			"imageByCroppingToRect": {
				"!type": "fn(rect: +Object) -> +CIImage"
			},
			"initWithIOSurfaceOptions": {
				"!type": "fn(surface: +Object, options: +Object) -> +CIImage"
			},
			"imageByApplyingFilter": {
				"!type": "fn(filterName: string) -> +CIImage"
			},
			"initWithCVPixelBufferOptions": {
				"!type": "fn(pixelBuffer: +Object, options: +Object) -> +CIImage"
			},
			"imageByInsertingIntermediate": {
				"!type": "fn(cache: bool) -> +CIImage"
			},
			"imageBySettingAlphaOneInExtent": {
				"!type": "fn(extent: +Object) -> +CIImage"
			},
			"imageByColorMatchingWorkingSpaceToColorSpace": {
				"!type": "fn(colorSpace: +Object) -> +CIImage"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIImage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPreviewActionGroup": {
		"actionGroupWithTitleStyleActions": {
			"!type": "fn(title: string, style: number, actions: +Array) -> +UIPreviewActionGroup"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPreviewActionGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPreviewActionGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPreviewActionGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPreviewActionGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIRotationGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIRotationGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIRotationGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIRotationGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"velocity": {
				"!type": "number"
			},
			"rotation": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIRotationGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIRotationGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIRotationGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIRotationGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProductDiscount": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProductDiscount"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProductDiscount"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProductDiscount"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfPeriods": {
				"!type": "number"
			},
			"subscriptionPeriod": {
				"!type": "+SKProductSubscriptionPeriod"
			},
			"price": {
				"!type": "+NSDecimalNumber"
			},
			"paymentMode": {
				"!type": "number"
			},
			"identifier": {
				"!type": "string"
			},
			"type": {
				"!type": "number"
			},
			"priceLocale": {
				"!type": "+NSLocale"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProductDiscount"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsRendererContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsRendererContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsRendererContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsRendererContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"CGContext": {
				"!type": "+Object"
			},
			"format": {
				"!type": "+UIGraphicsRendererFormat"
			},
			"strokeRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"fillRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"strokeRectBlendMode": {
				"!type": "fn(rect: +Object, blendMode: number) -> void"
			},
			"clipToRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsRendererContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISpringLoadedInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISpringLoadedInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISpringLoadedInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISpringLoadedInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"interactionEffect": {
				"!type": "+Object"
			},
			"interactionBehavior": {
				"!type": "+Object"
			},
			"initWithActivationHandler": {
				"!type": "fn(handler: +Function) -> +UISpringLoadedInteraction"
			},
			"initWithInteractionBehaviorInteractionEffectActivationHandler": {
				"!type": "fn(interactionBehavior: +Object, interactionEffect: +Object, handler: +Function) -> +UISpringLoadedInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISpringLoadedInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSSortDescriptor": {
		"sortDescriptorWithKeyAscendingSelector": {
			"!type": "fn(key: string, ascending: bool, selector: string) -> +NSSortDescriptor"
		},
		"sortDescriptorWithKeyAscending": {
			"!type": "fn(key: string, ascending: bool) -> +NSSortDescriptor"
		},
		"sortDescriptorWithKeyAscendingComparator": {
			"!type": "fn(key: string, ascending: bool, cmptr: +Function) -> +NSSortDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSSortDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSSortDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSSortDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsselector": {
				"!type": "string"
			},
			"reversedSortDescriptor": {
				"!type": "+Object"
			},
			"jscomparator": {
				"!type": "+Function"
			},
			"key": {
				"!type": "string"
			},
			"ascending": {
				"!type": "bool"
			},
			"initWithKeyAscending": {
				"!type": "fn(key: string, ascending: bool) -> +NSSortDescriptor"
			},
			"initWithKeyAscendingComparator": {
				"!type": "fn(key: string, ascending: bool, cmptr: +Function) -> +NSSortDescriptor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSSortDescriptor"
			},
			"compareObjectToObject": {
				"!type": "fn(object1: +Object, object2: +Object) -> number"
			},
			"initWithKeyAscendingSelector": {
				"!type": "fn(key: string, ascending: bool, selector: string) -> +NSSortDescriptor"
			},
			"allowEvaluation": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSSortDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPopoverBackgroundView": {
		"wantsDefaultContentAppearance": {
			"!type": "fn() -> bool"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPopoverBackgroundView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPopoverBackgroundView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPopoverBackgroundView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"arrowOffset": {
				"!type": "number"
			},
			"arrowDirection": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPopoverBackgroundView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIPopoverBackgroundView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPopoverBackgroundView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICommandAlternate": {
		"alternateWithTitleActionModifierFlags": {
			"!type": "fn(title: string, action: string, modifierFlags: number) -> +UICommandAlternate"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICommandAlternate"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICommandAlternate"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICommandAlternate"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsaction": {
				"!type": "string"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICommandAlternate"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICommandAlternate"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsImageRendererFormat": {
		"formatForTraitCollection": {
			"!type": "fn(traitCollection: +UITraitCollection) -> +UIGraphicsImageRendererFormat"
		},
		"preferredFormat": {
			"!type": "fn() -> +UIGraphicsImageRendererFormat"
		},
		"defaultFormat": {
			"!type": "fn() -> +UIGraphicsImageRendererFormat"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsImageRendererFormat"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsImageRendererFormat"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsImageRendererFormat"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preferredRange": {
				"!type": "number"
			},
			"scale": {
				"!type": "number"
			},
			"prefersExtendedRange": {
				"!type": "bool"
			},
			"opaque": {
				"!type": "bool"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsImageRendererFormat"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessory": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessory"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessory"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessory"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessory"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessory"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessory"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSAttributedString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSAttributedString"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSAttributedString"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSAttributedString"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"string": {
				"!type": "string"
			},
			"attributesAtIndexEffectiveRange": {
				"!type": "fn(location: number, range: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSAttributedString"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScreenshotService": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScreenshotService"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScreenshotService"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScreenshotService"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"windowScene": {
				"!type": "+UIWindowScene"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScreenshotService"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCountedSet": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCountedSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCountedSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCountedSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"initWithSet": {
				"!type": "fn(set: +NSSet) -> +NSCountedSet"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"countForObject": {
				"!type": "fn(object: +Object) -> number"
			},
			"addObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSCountedSet"
			},
			"removeObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"initWithArray": {
				"!type": "fn(array: +Array) -> +NSCountedSet"
			},
			"addObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"removeObject": {
				"!type": "fn(object: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSCountedSet"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSCountedSet"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSCountedSet"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSCountedSet"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSCountedSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSCountedSet"
			},
			"objectEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"member": {
				"!type": "fn(object: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCountedSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIButton": {
		"buttonWithTypePrimaryAction": {
			"!type": "fn(buttonType: number, primaryAction: +UIAction) -> +UIButton"
		},
		"buttonWithType": {
			"!type": "fn(buttonType: number) -> +UIButton"
		},
		"systemButtonWithPrimaryAction": {
			"!type": "fn(primaryAction: +UIAction) -> +UIButton"
		},
		"systemButtonWithImageTargetAction": {
			"!type": "fn(image: +UIImage, target: +Object, action: string) -> +UIButton"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIButton"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIButton"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIButton"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jspointerStyleProvider": {
				"!type": "+Function"
			},
			"showsTouchWhenHighlighted": {
				"!type": "bool"
			},
			"titleLabel": {
				"!type": "+UILabel"
			},
			"pointerInteractionEnabled": {
				"!type": "bool"
			},
			"adjustsImageWhenDisabled": {
				"!type": "bool"
			},
			"menu": {
				"!type": "+UIMenu"
			},
			"currentPreferredSymbolConfiguration": {
				"!type": "+UIImageSymbolConfiguration"
			},
			"titleEdgeInsets": {
				"!type": "+Object"
			},
			"reversesTitleShadowWhenHighlighted": {
				"!type": "bool"
			},
			"role": {
				"!type": "number"
			},
			"imageView": {
				"!type": "+UIImageView"
			},
			"imageEdgeInsets": {
				"!type": "+Object"
			},
			"currentTitleShadowColor": {
				"!type": "+UIColor"
			},
			"currentAttributedTitle": {
				"!type": "+NSAttributedString"
			},
			"currentTitle": {
				"!type": "string"
			},
			"currentBackgroundImage": {
				"!type": "+UIImage"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"currentImage": {
				"!type": "+UIImage"
			},
			"currentTitleColor": {
				"!type": "+UIColor"
			},
			"contentEdgeInsets": {
				"!type": "+Object"
			},
			"adjustsImageWhenHighlighted": {
				"!type": "bool"
			},
			"buttonType": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setPreferredSymbolConfigurationForImageInState": {
				"!type": "fn(configuration: +UIImageSymbolConfiguration, state: number) -> void"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIButton"
			},
			"backgroundRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"imageRectForContentRect": {
				"!type": "fn(contentRect: +Object) -> +Object"
			},
			"setBackgroundImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"imageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"setImageForState": {
				"!type": "fn(image: +UIImage, state: number) -> void"
			},
			"attributedTitleForState": {
				"!type": "fn(state: number) -> +NSAttributedString"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIButton"
			},
			"setTitleForState": {
				"!type": "fn(title: string, state: number) -> void"
			},
			"preferredSymbolConfigurationForImageInState": {
				"!type": "fn(state: number) -> +UIImageSymbolConfiguration"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIButton"
			},
			"titleRectForContentRect": {
				"!type": "fn(contentRect: +Object) -> +Object"
			},
			"titleForState": {
				"!type": "fn(state: number) -> string"
			},
			"contentRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"titleShadowColorForState": {
				"!type": "fn(state: number) -> +UIColor"
			},
			"setTitleShadowColorForState": {
				"!type": "fn(color: +UIColor, state: number) -> void"
			},
			"setAttributedTitleForState": {
				"!type": "fn(title: +NSAttributedString, state: number) -> void"
			},
			"titleColorForState": {
				"!type": "fn(state: number) -> +UIColor"
			},
			"backgroundImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"setTitleColorForState": {
				"!type": "fn(color: +UIColor, state: number) -> void"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIButton"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIButton"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIButton"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIButton"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIButton"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIButton"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIColorWell": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIColorWell"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIColorWell"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIColorWell"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"selectedColor": {
				"!type": "+UIColor"
			},
			"supportsAlpha": {
				"!type": "bool"
			},
			"title": {
				"!type": "string"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIColorWell"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIColorWell"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIColorWell"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIColorWell"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIColorWell"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIColorWell"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentPickerViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentPickerViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentPickerViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentPickerViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"shouldShowFileExtensions": {
				"!type": "bool"
			},
			"directoryURL": {
				"!type": "+NSURL"
			},
			"allowsMultipleSelection": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"documentPickerMode": {
				"!type": "number"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initForExportingURLsAsCopy": {
				"!type": "fn(urls: +Array, asCopy: bool) -> +UIDocumentPickerViewController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentPickerViewController"
			},
			"initForOpeningContentTypes": {
				"!type": "fn(contentTypes: +Array) -> +UIDocumentPickerViewController"
			},
			"initWithDocumentTypesInMode": {
				"!type": "fn(allowedUTIs: +Array, mode: number) -> +UIDocumentPickerViewController"
			},
			"initForOpeningContentTypesAsCopy": {
				"!type": "fn(contentTypes: +Array, asCopy: bool) -> +UIDocumentPickerViewController"
			},
			"initForExportingURLs": {
				"!type": "fn(urls: +Array) -> +UIDocumentPickerViewController"
			},
			"initWithURLsInMode": {
				"!type": "fn(urls: +Array, mode: number) -> +UIDocumentPickerViewController"
			},
			"initWithURLInMode": {
				"!type": "fn(url: +NSURL, mode: number) -> +UIDocumentPickerViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIDocumentPickerViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentPickerViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentPickerViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKPayment": {
		"paymentWithProduct": {
			"!type": "fn(product: +SKProduct) -> +SKPayment"
		},
		"paymentWithProductIdentifier": {
			"!type": "fn(identifier: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKPayment"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKPayment"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKPayment"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paymentDiscount": {
				"!type": "+SKPaymentDiscount"
			},
			"productIdentifier": {
				"!type": "string"
			},
			"simulatesAskToBuyInSandbox": {
				"!type": "bool"
			},
			"requestData": {
				"!type": "+NSData"
			},
			"applicationUsername": {
				"!type": "string"
			},
			"quantity": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKPayment"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSJSONSerialization": {
		"writeJSONObjectToStreamOptionsError": {
			"!type": "fn(obj: +Object, stream: +NSOutputStream, opt: number, error: +Object) -> number"
		},
		"JSONObjectWithStreamOptionsError": {
			"!type": "fn(stream: +NSInputStream, opt: number, error: +Object) -> +Object"
		},
		"JSONObjectWithDataOptionsError": {
			"!type": "fn(data: +NSData, opt: number, error: +Object) -> +Object"
		},
		"isValidJSONObject": {
			"!type": "fn(obj: +Object) -> bool"
		},
		"dataWithJSONObjectOptionsError": {
			"!type": "fn(obj: +Object, opt: number, error: +Object) -> +NSData"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSJSONSerialization"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSJSONSerialization"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSJSONSerialization"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSJSONSerialization"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchContainerViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchContainerViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchContainerViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchContainerViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"searchController": {
				"!type": "+UISearchController"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithSearchController": {
				"!type": "fn(searchController: +UISearchController) -> +UISearchContainerViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UISearchContainerViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchContainerViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchContainerViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDateComponentsFormatter": {
		"localizedStringFromDateComponentsUnitsStyle": {
			"!type": "fn(components: +NSDateComponents, unitsStyle: number) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDateComponentsFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDateComponentsFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDateComponentsFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowedUnits": {
				"!type": "number"
			},
			"includesApproximationPhrase": {
				"!type": "bool"
			},
			"allowsFractionalUnits": {
				"!type": "bool"
			},
			"referenceDate": {
				"!type": "+Date"
			},
			"zeroFormattingBehavior": {
				"!type": "number"
			},
			"formattingContext": {
				"!type": "number"
			},
			"unitsStyle": {
				"!type": "number"
			},
			"includesTimeRemainingPhrase": {
				"!type": "bool"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"maximumUnitCount": {
				"!type": "number"
			},
			"collapsesLargestUnit": {
				"!type": "bool"
			},
			"stringFromTimeInterval": {
				"!type": "fn(ti: number) -> string"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"stringFromDateToDate": {
				"!type": "fn(startDate: +Date, endDate: +Date) -> string"
			},
			"stringFromDateComponents": {
				"!type": "fn(components: +NSDateComponents) -> string"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateComponentsFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPercentDrivenInteractiveTransition": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPercentDrivenInteractiveTransition"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPercentDrivenInteractiveTransition"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPercentDrivenInteractiveTransition"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timingCurve": {
				"!type": "+Object"
			},
			"wantsInteractiveStart": {
				"!type": "bool"
			},
			"completionCurve": {
				"!type": "number"
			},
			"percentComplete": {
				"!type": "number"
			},
			"duration": {
				"!type": "number"
			},
			"completionSpeed": {
				"!type": "number"
			},
			"pauseInteractiveTransition": {
				"!type": "fn() -> void"
			},
			"updateInteractiveTransition": {
				"!type": "fn(percentComplete: number) -> void"
			},
			"finishInteractiveTransition": {
				"!type": "fn() -> void"
			},
			"cancelInteractiveTransition": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPercentDrivenInteractiveTransition"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOrderedCollectionChange": {
		"changeWithObjectTypeIndex": {
			"!type": "fn(anObject: +Object, type: number, index: number) -> +NSOrderedCollectionChange"
		},
		"changeWithObjectTypeIndexAssociatedIndex": {
			"!type": "fn(anObject: +Object, type: number, index: number, associatedIndex: number) -> +NSOrderedCollectionChange"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOrderedCollectionChange"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOrderedCollectionChange"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOrderedCollectionChange"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"index": {
				"!type": "number"
			},
			"changeType": {
				"!type": "number"
			},
			"object": {
				"!type": "+Object"
			},
			"associatedIndex": {
				"!type": "number"
			},
			"initWithObjectTypeIndexAssociatedIndex": {
				"!type": "fn(anObject: +Object, type: number, index: number, associatedIndex: number) -> +NSOrderedCollectionChange"
			},
			"initWithObjectTypeIndex": {
				"!type": "fn(anObject: +Object, type: number, index: number) -> +NSOrderedCollectionChange"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOrderedCollectionChange"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSEnumerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSEnumerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSEnumerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSEnumerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"nextObject": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSEnumerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewDiffableDataSource": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewDiffableDataSource"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewDiffableDataSource"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewDiffableDataSource"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"defaultRowAnimation": {
				"!type": "number"
			},
			"initWithTableViewCellProvider": {
				"!type": "fn(tableView: +UITableView, cellProvider: +Function) -> +UITableViewDiffableDataSource"
			},
			"applySnapshotAnimatingDifferences": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSnapshot, animatingDifferences: bool) -> void"
			},
			"snapshot": {
				"!type": "fn() -> +NSDiffableDataSourceSnapshot"
			},
			"indexPathForItemIdentifier": {
				"!type": "fn(identifier: +Object) -> +NSIndexPath"
			},
			"applySnapshotAnimatingDifferencesCompletion": {
				"!type": "fn(snapshot: +NSDiffableDataSourceSnapshot, animatingDifferences: bool, completion: +Function) -> void"
			},
			"itemIdentifierForIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewDiffableDataSource"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISimpleTextPrintFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISimpleTextPrintFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISimpleTextPrintFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISimpleTextPrintFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"color": {
				"!type": "+UIColor"
			},
			"text": {
				"!type": "string"
			},
			"font": {
				"!type": "+UIFont"
			},
			"textAlignment": {
				"!type": "number"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"pageCount": {
				"!type": "number"
			},
			"printPageRenderer": {
				"!type": "+UIPrintPageRenderer"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"perPageContentInsets": {
				"!type": "+Object"
			},
			"maximumContentWidth": {
				"!type": "number"
			},
			"maximumContentHeight": {
				"!type": "number"
			},
			"startPage": {
				"!type": "number"
			},
			"initWithText": {
				"!type": "fn(text: string) -> +UISimpleTextPrintFormatter"
			},
			"initWithAttributedText": {
				"!type": "fn(attributedText: +NSAttributedString) -> +UISimpleTextPrintFormatter"
			},
			"rectForPageAtIndex": {
				"!type": "fn(pageIndex: number) -> +Object"
			},
			"drawInRectForPageAtIndex": {
				"!type": "fn(rect: +Object, pageIndex: number) -> void"
			},
			"removeFromPrintPageRenderer": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISimpleTextPrintFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CASpringAnimation": {
		"animationWithKeyPath": {
			"!type": "fn(path: string) -> +CASpringAnimation"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CASpringAnimation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CASpringAnimation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CASpringAnimation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CASpringAnimation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"settlingDuration": {
				"!type": "number"
			},
			"initialVelocity": {
				"!type": "number"
			},
			"mass": {
				"!type": "number"
			},
			"damping": {
				"!type": "number"
			},
			"stiffness": {
				"!type": "number"
			},
			"byValue": {
				"!type": "+Object"
			},
			"fromValue": {
				"!type": "+Object"
			},
			"toValue": {
				"!type": "+Object"
			},
			"valueFunction": {
				"!type": "+CAValueFunction"
			},
			"cumulative": {
				"!type": "bool"
			},
			"additive": {
				"!type": "bool"
			},
			"keyPath": {
				"!type": "string"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CASpringAnimation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrintFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrintFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrintFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrintFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"pageCount": {
				"!type": "number"
			},
			"printPageRenderer": {
				"!type": "+UIPrintPageRenderer"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"perPageContentInsets": {
				"!type": "+Object"
			},
			"maximumContentWidth": {
				"!type": "number"
			},
			"maximumContentHeight": {
				"!type": "number"
			},
			"startPage": {
				"!type": "number"
			},
			"rectForPageAtIndex": {
				"!type": "fn(pageIndex: number) -> +Object"
			},
			"drawInRectForPageAtIndex": {
				"!type": "fn(rect: +Object, pageIndex: number) -> void"
			},
			"removeFromPrintPageRenderer": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrintFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentMenuViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentMenuViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentMenuViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentMenuViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"addOptionWithTitleImageOrderHandler": {
				"!type": "fn(title: string, image: +UIImage, order: number, handler: +Function) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentMenuViewController"
			},
			"initWithDocumentTypesInMode": {
				"!type": "fn(allowedUTIs: +Array, mode: number) -> +UIDocumentMenuViewController"
			},
			"initWithURLInMode": {
				"!type": "fn(url: +NSURL, mode: number) -> +UIDocumentMenuViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIDocumentMenuViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentMenuViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentMenuViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitLength": {
		"nanometers": {
			"!type": "fn() -> +NSUnitLength"
		},
		"feet": {
			"!type": "fn() -> +NSUnitLength"
		},
		"meters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"astronomicalUnits": {
			"!type": "fn() -> +NSUnitLength"
		},
		"picometers": {
			"!type": "fn() -> +NSUnitLength"
		},
		"lightyears": {
			"!type": "fn() -> +NSUnitLength"
		},
		"parsecs": {
			"!type": "fn() -> +NSUnitLength"
		},
		"inches": {
			"!type": "fn() -> +NSUnitLength"
		},
		"micrometers": {
			"!type": "fn() -> +NSUnitLength"
		},
		"decimeters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"fathoms": {
			"!type": "fn() -> +NSUnitLength"
		},
		"centimeters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"megameters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"nauticalMiles": {
			"!type": "fn() -> +NSUnitLength"
		},
		"yards": {
			"!type": "fn() -> +NSUnitLength"
		},
		"kilometers": {
			"!type": "fn() -> +NSUnitLength"
		},
		"furlongs": {
			"!type": "fn() -> +NSUnitLength"
		},
		"decameters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"scandinavianMiles": {
			"!type": "fn() -> +NSUnitLength"
		},
		"miles": {
			"!type": "fn() -> +NSUnitLength"
		},
		"millimeters": {
			"!type": "fn() -> +NSUnitLength"
		},
		"hectometers": {
			"!type": "fn() -> +NSUnitLength"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitLength"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitLength"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitLength"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitLength"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitLength"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitLength"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitLength"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIToolbarAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIToolbarAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIToolbarAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIToolbarAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"buttonAppearance": {
				"!type": "+UIBarButtonItemAppearance"
			},
			"doneButtonAppearance": {
				"!type": "+UIBarButtonItemAppearance"
			},
			"shadowImage": {
				"!type": "+UIImage"
			},
			"idiom": {
				"!type": "number"
			},
			"shadowColor": {
				"!type": "+UIColor"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"backgroundImageContentMode": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"backgroundEffect": {
				"!type": "+UIBlurEffect"
			},
			"configureWithTransparentBackground": {
				"!type": "fn() -> void"
			},
			"initWithBarAppearance": {
				"!type": "fn(barAppearance: +UIBarAppearance) -> +UIToolbarAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIToolbarAppearance"
			},
			"initWithIdiom": {
				"!type": "fn(idiom: number) -> +UIToolbarAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UIToolbarAppearance"
			},
			"configureWithOpaqueBackground": {
				"!type": "fn() -> void"
			},
			"configureWithDefaultBackground": {
				"!type": "fn() -> void"
			},
			"jscopy": {
				"!type": "fn() -> +UIToolbarAppearance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIToolbarAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAMediaTimingFunction": {
		"functionWithName": {
			"!type": "fn(name: string) -> +CAMediaTimingFunction"
		},
		"functionWithControlPoints": {
			"!type": "fn(c1x: number, c1y: number, c2x: number, c2y: number) -> +CAMediaTimingFunction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAMediaTimingFunction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAMediaTimingFunction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAMediaTimingFunction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithControlPoints": {
				"!type": "fn(c1x: number, c1y: number, c2x: number, c2y: number) -> +CAMediaTimingFunction"
			},
			"getControlPointAtIndexValues": {
				"!type": "fn(idx: number, ptr: +Array) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAMediaTimingFunction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextPosition": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextPosition"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextPosition"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextPosition"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextPosition"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSNumberFormatter": {
		"setDefaultFormatterBehavior": {
			"!type": "fn(behavior: number) -> void"
		},
		"localizedStringFromNumberNumberStyle": {
			"!type": "fn(num: number, nstyle: number) -> string"
		},
		"defaultFormatterBehavior": {
			"!type": "fn() -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSNumberFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSNumberFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSNumberFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paddingCharacter": {
				"!type": "string"
			},
			"internationalCurrencySymbol": {
				"!type": "string"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"multiplier": {
				"!type": "number"
			},
			"formatWidth": {
				"!type": "number"
			},
			"usesGroupingSeparator": {
				"!type": "bool"
			},
			"textAttributesForNegativeValues": {
				"!type": "+Object"
			},
			"textAttributesForZero": {
				"!type": "+Object"
			},
			"notANumberSymbol": {
				"!type": "string"
			},
			"partialStringValidationEnabled": {
				"!type": "bool"
			},
			"negativeInfinitySymbol": {
				"!type": "string"
			},
			"negativeSuffix": {
				"!type": "string"
			},
			"groupingSeparator": {
				"!type": "string"
			},
			"perMillSymbol": {
				"!type": "string"
			},
			"currencyCode": {
				"!type": "string"
			},
			"textAttributesForNegativeInfinity": {
				"!type": "+Object"
			},
			"usesSignificantDigits": {
				"!type": "bool"
			},
			"formatterBehavior": {
				"!type": "number"
			},
			"currencyGroupingSeparator": {
				"!type": "string"
			},
			"plusSign": {
				"!type": "string"
			},
			"minimum": {
				"!type": "number"
			},
			"percentSymbol": {
				"!type": "string"
			},
			"allowsFloats": {
				"!type": "bool"
			},
			"numberStyle": {
				"!type": "number"
			},
			"textAttributesForPositiveValues": {
				"!type": "+Object"
			},
			"generatesDecimalNumbers": {
				"!type": "bool"
			},
			"positiveInfinitySymbol": {
				"!type": "string"
			},
			"positiveFormat": {
				"!type": "string"
			},
			"exponentSymbol": {
				"!type": "string"
			},
			"textAttributesForNil": {
				"!type": "+Object"
			},
			"roundingIncrement": {
				"!type": "number"
			},
			"negativePrefix": {
				"!type": "string"
			},
			"paddingPosition": {
				"!type": "number"
			},
			"textAttributesForNotANumber": {
				"!type": "+Object"
			},
			"nilSymbol": {
				"!type": "string"
			},
			"currencySymbol": {
				"!type": "string"
			},
			"maximumSignificantDigits": {
				"!type": "number"
			},
			"textAttributesForPositiveInfinity": {
				"!type": "+Object"
			},
			"maximumIntegerDigits": {
				"!type": "number"
			},
			"minimumFractionDigits": {
				"!type": "number"
			},
			"maximumFractionDigits": {
				"!type": "number"
			},
			"minimumIntegerDigits": {
				"!type": "number"
			},
			"decimalSeparator": {
				"!type": "string"
			},
			"negativeFormat": {
				"!type": "string"
			},
			"formattingContext": {
				"!type": "number"
			},
			"alwaysShowsDecimalSeparator": {
				"!type": "bool"
			},
			"secondaryGroupingSize": {
				"!type": "number"
			},
			"positiveSuffix": {
				"!type": "string"
			},
			"maximum": {
				"!type": "number"
			},
			"currencyDecimalSeparator": {
				"!type": "string"
			},
			"positivePrefix": {
				"!type": "string"
			},
			"roundingMode": {
				"!type": "number"
			},
			"minimumSignificantDigits": {
				"!type": "number"
			},
			"groupingSize": {
				"!type": "number"
			},
			"zeroSymbol": {
				"!type": "string"
			},
			"minusSign": {
				"!type": "string"
			},
			"lenient": {
				"!type": "bool"
			},
			"stringFromNumber": {
				"!type": "fn(number: number) -> string"
			},
			"getObjectValueForStringRangeError": {
				"!type": "fn(obj: +Object, string: string, rangep: +Object, error: +Object) -> bool"
			},
			"numberFromString": {
				"!type": "fn(string: string) -> number"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSNumberFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerLiftEffect": {
		"effectWithPreview": {
			"!type": "fn(preview: +UITargetedPreview) -> +UIPointerLiftEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerLiftEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerLiftEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerLiftEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preview": {
				"!type": "+UITargetedPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerLiftEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMetadataQuery": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMetadataQuery"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMetadataQuery"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMetadataQuery"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"predicate": {
				"!type": "+NSPredicate"
			},
			"valueLists": {
				"!type": "+Object"
			},
			"groupedResults": {
				"!type": "+Array"
			},
			"notificationBatchingInterval": {
				"!type": "number"
			},
			"searchScopes": {
				"!type": "+Array"
			},
			"started": {
				"!type": "bool"
			},
			"searchItems": {
				"!type": "+Array"
			},
			"gathering": {
				"!type": "bool"
			},
			"results": {
				"!type": "+Array"
			},
			"sortDescriptors": {
				"!type": "+Array"
			},
			"operationQueue": {
				"!type": "+NSOperationQueue"
			},
			"stopped": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"valueListAttributes": {
				"!type": "+Array"
			},
			"resultCount": {
				"!type": "number"
			},
			"groupingAttributes": {
				"!type": "+Array"
			},
			"enableUpdates": {
				"!type": "fn() -> void"
			},
			"indexOfResult": {
				"!type": "fn(result: +Object) -> number"
			},
			"startQuery": {
				"!type": "fn() -> bool"
			},
			"resultAtIndex": {
				"!type": "fn(idx: number) -> +Object"
			},
			"enumerateResultsUsingBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"disableUpdates": {
				"!type": "fn() -> void"
			},
			"valueOfAttributeForResultAtIndex": {
				"!type": "fn(attrName: string, idx: number) -> +Object"
			},
			"stopQuery": {
				"!type": "fn() -> void"
			},
			"enumerateResultsWithOptionsUsingBlock": {
				"!type": "fn(opts: number, block: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMetadataQuery"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextInputAssistantItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextInputAssistantItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextInputAssistantItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextInputAssistantItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"trailingBarButtonGroups": {
				"!type": "+Array"
			},
			"allowsHidingShortcuts": {
				"!type": "bool"
			},
			"leadingBarButtonGroups": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextInputAssistantItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CITextFeature": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CITextFeature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CITextFeature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CITextFeature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"topLeft": {
				"!type": "+Object"
			},
			"bottomLeft": {
				"!type": "+Object"
			},
			"bottomRight": {
				"!type": "+Object"
			},
			"subFeatures": {
				"!type": "+Array"
			},
			"bounds": {
				"!type": "+Object"
			},
			"topRight": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CITextFeature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIAztecCodeDescriptor": {
		"descriptorWithPayloadIsCompactLayerCountDataCodewordCount": {
			"!type": "fn(errorCorrectedPayload: +NSData, isCompact: bool, layerCount: number, dataCodewordCount: number) -> +CIAztecCodeDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIAztecCodeDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIAztecCodeDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIAztecCodeDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"errorCorrectedPayload": {
				"!type": "+NSData"
			},
			"layerCount": {
				"!type": "number"
			},
			"isCompact": {
				"!type": "bool"
			},
			"dataCodewordCount": {
				"!type": "number"
			},
			"initWithPayloadIsCompactLayerCountDataCodewordCount": {
				"!type": "fn(errorCorrectedPayload: +NSData, isCompact: bool, layerCount: number, dataCodewordCount: number) -> +CIAztecCodeDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIAztecCodeDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileSecurity": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileSecurity"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileSecurity"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileSecurity"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSFileSecurity"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileSecurity"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIRenderInfo": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIRenderInfo"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIRenderInfo"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIRenderInfo"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"passCount": {
				"!type": "number"
			},
			"pixelsProcessed": {
				"!type": "number"
			},
			"kernelExecutionTime": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIRenderInfo"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXPCListener": {
		"anonymousListener": {
			"!type": "fn() -> +NSXPCListener"
		},
		"serviceListener": {
			"!type": "fn() -> +NSXPCListener"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXPCListener"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXPCListener"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXPCListener"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"endpoint": {
				"!type": "+NSXPCListenerEndpoint"
			},
			"delegate": {
				"!type": "+Object"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXPCListener"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIUserNotificationCategory": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIUserNotificationCategory"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIUserNotificationCategory"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIUserNotificationCategory"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "string"
			},
			"actionsForContext": {
				"!type": "fn(context: number) -> +Array"
			},
			"jsinit": {
				"!type": "fn() -> +UIUserNotificationCategory"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIUserNotificationCategory"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIUserNotificationCategory"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileWrapper": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileWrapper"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileWrapper"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileWrapper"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"serializedRepresentation": {
				"!type": "+NSData"
			},
			"regularFileContents": {
				"!type": "+NSData"
			},
			"regularFile": {
				"!type": "bool"
			},
			"fileWrappers": {
				"!type": "+Object"
			},
			"filename": {
				"!type": "string"
			},
			"symbolicLink": {
				"!type": "bool"
			},
			"directory": {
				"!type": "bool"
			},
			"preferredFilename": {
				"!type": "string"
			},
			"symbolicLinkDestinationURL": {
				"!type": "+NSURL"
			},
			"fileAttributes": {
				"!type": "+Object"
			},
			"initRegularFileWithContents": {
				"!type": "fn(contents: +NSData) -> +NSFileWrapper"
			},
			"initDirectoryWithFileWrappers": {
				"!type": "fn(childrenByPreferredName: +Object) -> +NSFileWrapper"
			},
			"addRegularFileWithContentsPreferredFilename": {
				"!type": "fn(data: +NSData, fileName: string) -> string"
			},
			"initWithURLOptionsError": {
				"!type": "fn(url: +NSURL, options: number, outError: +Object) -> +NSFileWrapper"
			},
			"initSymbolicLinkWithDestinationURL": {
				"!type": "fn(url: +NSURL) -> +NSFileWrapper"
			},
			"initWithSerializedRepresentation": {
				"!type": "fn(serializeRepresentation: +NSData) -> +NSFileWrapper"
			},
			"initWithCoder": {
				"!type": "fn(inCoder: +NSCoder) -> +NSFileWrapper"
			},
			"writeToURLOptionsOriginalContentsURLError": {
				"!type": "fn(url: +NSURL, options: number, originalContentsURL: +NSURL, outError: +Object) -> bool"
			},
			"readFromURLOptionsError": {
				"!type": "fn(url: +NSURL, options: number, outError: +Object) -> bool"
			},
			"keyForFileWrapper": {
				"!type": "fn(child: +NSFileWrapper) -> string"
			},
			"addFileWrapper": {
				"!type": "fn(child: +NSFileWrapper) -> string"
			},
			"matchesContentsOfURL": {
				"!type": "fn(url: +NSURL) -> bool"
			},
			"removeFileWrapper": {
				"!type": "fn(child: +NSFileWrapper) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileWrapper"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILocalNotification": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILocalNotification"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILocalNotification"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILocalNotification"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"category": {
				"!type": "string"
			},
			"repeatInterval": {
				"!type": "number"
			},
			"applicationIconBadgeNumber": {
				"!type": "number"
			},
			"fireDate": {
				"!type": "+Date"
			},
			"alertLaunchImage": {
				"!type": "string"
			},
			"region": {
				"!type": "+CLRegion"
			},
			"soundName": {
				"!type": "string"
			},
			"alertBody": {
				"!type": "string"
			},
			"repeatCalendar": {
				"!type": "+NSCalendar"
			},
			"alertTitle": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"alertAction": {
				"!type": "string"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"hasAction": {
				"!type": "bool"
			},
			"regionTriggersOnce": {
				"!type": "bool"
			},
			"jsinit": {
				"!type": "fn() -> +UILocalNotification"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UILocalNotification"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILocalNotification"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollisionBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollisionBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollisionBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollisionBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"items": {
				"!type": "+Array"
			},
			"translatesReferenceBoundsIntoBoundary": {
				"!type": "bool"
			},
			"collisionMode": {
				"!type": "number"
			},
			"boundaryIdentifiers": {
				"!type": "+Array"
			},
			"collisionDelegate": {
				"!type": "+Object"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"removeItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"setTranslatesReferenceBoundsIntoBoundaryWithInsets": {
				"!type": "fn(insets: +Object) -> void"
			},
			"boundaryWithIdentifier": {
				"!type": "fn(identifier: +Object) -> +UIBezierPath"
			},
			"initWithItems": {
				"!type": "fn(items: +Array) -> +UICollisionBehavior"
			},
			"removeAllBoundaries": {
				"!type": "fn() -> void"
			},
			"removeBoundaryWithIdentifier": {
				"!type": "fn(identifier: +Object) -> void"
			},
			"addItem": {
				"!type": "fn(item: +Object) -> void"
			},
			"addBoundaryWithIdentifierFromPointToPoint": {
				"!type": "fn(identifier: +Object, p1: +Object, p2: +Object) -> void"
			},
			"addBoundaryWithIdentifierForPath": {
				"!type": "fn(identifier: +Object, bezierPath: +UIBezierPath) -> void"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollisionBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIProgressView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIProgressView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIProgressView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIProgressView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"trackTintColor": {
				"!type": "+UIColor"
			},
			"progressViewStyle": {
				"!type": "number"
			},
			"observedProgress": {
				"!type": "+NSProgress"
			},
			"progressImage": {
				"!type": "+UIImage"
			},
			"progress": {
				"!type": "number"
			},
			"progressTintColor": {
				"!type": "+UIColor"
			},
			"trackImage": {
				"!type": "+UIImage"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithProgressViewStyle": {
				"!type": "fn(style: number) -> +UIProgressView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIProgressView"
			},
			"setProgressAnimated": {
				"!type": "fn(progress: number, animated: bool) -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIProgressView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIProgressView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIProgressView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIProgressView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPinchGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPinchGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPinchGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPinchGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"velocity": {
				"!type": "number"
			},
			"scale": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPinchGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPinchGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIPinchGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPinchGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchBar": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchBar"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchBar"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchBar"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"searchFieldBackgroundPositionAdjustment": {
				"!type": "+Object"
			},
			"prompt": {
				"!type": "string"
			},
			"text": {
				"!type": "string"
			},
			"searchTextField": {
				"!type": "+UISearchTextField"
			},
			"searchResultsButtonSelected": {
				"!type": "bool"
			},
			"searchTextPositionAdjustment": {
				"!type": "+Object"
			},
			"showsSearchResultsButton": {
				"!type": "bool"
			},
			"showsCancelButton": {
				"!type": "bool"
			},
			"showsScopeBar": {
				"!type": "bool"
			},
			"selectedScopeButtonIndex": {
				"!type": "number"
			},
			"barTintColor": {
				"!type": "+UIColor"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"searchBarStyle": {
				"!type": "number"
			},
			"scopeButtonTitles": {
				"!type": "+Array"
			},
			"scopeBarBackgroundImage": {
				"!type": "+UIImage"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"inputAssistantItem": {
				"!type": "+UITextInputAssistantItem"
			},
			"placeholder": {
				"!type": "string"
			},
			"translucent": {
				"!type": "bool"
			},
			"showsBookmarkButton": {
				"!type": "bool"
			},
			"barStyle": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"inputAccessoryView": {
				"!type": "+UIView"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setSearchFieldBackgroundImageForState": {
				"!type": "fn(backgroundImage: +UIImage, state: number) -> void"
			},
			"setScopeBarButtonTitleTextAttributesForState": {
				"!type": "fn(attributes: +Object, state: number) -> void"
			},
			"setShowsCancelButtonAnimated": {
				"!type": "fn(showsCancelButton: bool, animated: bool) -> void"
			},
			"scopeBarButtonTitleTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"scopeBarButtonDividerImageForLeftSegmentStateRightSegmentState": {
				"!type": "fn(leftState: number, rightState: number) -> +UIImage"
			},
			"setScopeBarButtonBackgroundImageForState": {
				"!type": "fn(backgroundImage: +UIImage, state: number) -> void"
			},
			"setShowsScopeBarAnimated": {
				"!type": "fn(show: bool, animate: bool) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchBar"
			},
			"setScopeBarButtonDividerImageForLeftSegmentStateRightSegmentState": {
				"!type": "fn(dividerImage: +UIImage, leftState: number, rightState: number) -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISearchBar"
			},
			"setPositionAdjustmentForSearchBarIcon": {
				"!type": "fn(adjustment: +Object, icon: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchBar"
			},
			"positionAdjustmentForSearchBarIcon": {
				"!type": "fn(icon: number) -> +Object"
			},
			"imageForSearchBarIconState": {
				"!type": "fn(icon: number, state: number) -> +UIImage"
			},
			"setBackgroundImageForBarPositionBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, barPosition: number, barMetrics: number) -> void"
			},
			"scopeBarButtonBackgroundImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"backgroundImageForBarPositionBarMetrics": {
				"!type": "fn(barPosition: number, barMetrics: number) -> +UIImage"
			},
			"setImageForSearchBarIconState": {
				"!type": "fn(iconImage: +UIImage, icon: number, state: number) -> void"
			},
			"searchFieldBackgroundImageForState": {
				"!type": "fn(state: number) -> +UIImage"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchBar"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISearchBar"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchBar"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPress": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPress"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPress"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPress"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"gestureRecognizers": {
				"!type": "+Array"
			},
			"timestamp": {
				"!type": "number"
			},
			"responder": {
				"!type": "+UIResponder"
			},
			"window": {
				"!type": "+UIWindow"
			},
			"key": {
				"!type": "+UIKey"
			},
			"phase": {
				"!type": "number"
			},
			"force": {
				"!type": "number"
			},
			"type": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPress"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAEAGLLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAEAGLLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAEAGLLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAEAGLLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAEAGLLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"presentsWithTransaction": {
				"!type": "bool"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAEAGLLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAEAGLLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAEAGLLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAEAGLLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAEAGLLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityLocationDescriptor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityLocationDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityLocationDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityLocationDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"point": {
				"!type": "+Object"
			},
			"attributedName": {
				"!type": "+NSAttributedString"
			},
			"name": {
				"!type": "string"
			},
			"view": {
				"!type": "+UIView"
			},
			"initWithNameView": {
				"!type": "fn(name: string, view: +UIView) -> +UIAccessibilityLocationDescriptor"
			},
			"initWithAttributedNamePointInView": {
				"!type": "fn(attributedName: +NSAttributedString, point: +Object, view: +UIView) -> +UIAccessibilityLocationDescriptor"
			},
			"initWithNamePointInView": {
				"!type": "fn(name: string, point: +Object, view: +UIView) -> +UIAccessibilityLocationDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityLocationDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIDetector": {
		"detectorOfTypeContextOptions": {
			"!type": "fn(type: string, context: +CIContext, options: +Object) -> +CIDetector"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIDetector"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIDetector"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIDetector"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"featuresInImage": {
				"!type": "fn(image: +CIImage) -> +Array"
			},
			"featuresInImageOptions": {
				"!type": "fn(image: +CIImage, options: +Object) -> +Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIDetector"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCondition": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCondition"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCondition"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCondition"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"signal": {
				"!type": "fn() -> void"
			},
			"broadcast": {
				"!type": "fn() -> void"
			},
			"waitUntilDate": {
				"!type": "fn(limit: +Date) -> bool"
			},
			"wait": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCondition"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLCredential": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLCredential"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLCredential"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLCredential"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"persistence": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLCredential"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDecimalNumberHandler": {
		"decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero": {
			"!type": "fn(roundingMode: number, scale: number, exact: bool, overflow: bool, underflow: bool, divideByZero: bool) -> +NSDecimalNumberHandler"
		},
		"defaultDecimalNumberHandler": {
			"!type": "fn() -> +NSDecimalNumberHandler"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDecimalNumberHandler"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDecimalNumberHandler"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDecimalNumberHandler"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero": {
				"!type": "fn(roundingMode: number, scale: number, exact: bool, overflow: bool, underflow: bool, divideByZero: bool) -> +NSDecimalNumberHandler"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDecimalNumberHandler"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionConfiguration": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionConfiguration"
		},
		"backgroundSessionConfigurationWithIdentifier": {
			"!type": "fn(identifier: string) -> +NSURLSessionConfiguration"
		},
		"ephemeralSessionConfiguration": {
			"!type": "fn() -> +NSURLSessionConfiguration"
		},
		"defaultSessionConfiguration": {
			"!type": "fn() -> +NSURLSessionConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timeoutIntervalForResource": {
				"!type": "number"
			},
			"allowsCellularAccess": {
				"!type": "bool"
			},
			"URLCredentialStorage": {
				"!type": "+NSURLCredentialStorage"
			},
			"multipathServiceType": {
				"!type": "number"
			},
			"requestCachePolicy": {
				"!type": "number"
			},
			"sessionSendsLaunchEvents": {
				"!type": "bool"
			},
			"timeoutIntervalForRequest": {
				"!type": "number"
			},
			"networkServiceType": {
				"!type": "number"
			},
			"discretionary": {
				"!type": "bool"
			},
			"TLSMinimumSupportedProtocol": {
				"!type": "number"
			},
			"HTTPShouldUsePipelining": {
				"!type": "bool"
			},
			"HTTPShouldSetCookies": {
				"!type": "bool"
			},
			"HTTPAdditionalHeaders": {
				"!type": "+Object"
			},
			"HTTPMaximumConnectionsPerHost": {
				"!type": "number"
			},
			"TLSMaximumSupportedProtocolVersion": {
				"!type": "number"
			},
			"TLSMaximumSupportedProtocol": {
				"!type": "number"
			},
			"waitsForConnectivity": {
				"!type": "bool"
			},
			"HTTPCookieAcceptPolicy": {
				"!type": "number"
			},
			"allowsConstrainedNetworkAccess": {
				"!type": "bool"
			},
			"shouldUseExtendedBackgroundIdleMode": {
				"!type": "bool"
			},
			"connectionProxyDictionary": {
				"!type": "+Object"
			},
			"HTTPCookieStorage": {
				"!type": "+NSHTTPCookieStorage"
			},
			"URLCache": {
				"!type": "+NSURLCache"
			},
			"protocolClasses": {
				"!type": "+Array"
			},
			"sharedContainerIdentifier": {
				"!type": "string"
			},
			"identifier": {
				"!type": "string"
			},
			"TLSMinimumSupportedProtocolVersion": {
				"!type": "number"
			},
			"allowsExpensiveNetworkAccess": {
				"!type": "bool"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"backgroundView": {
				"!type": "+UIView"
			},
			"allowsSelection": {
				"!type": "bool"
			},
			"allowsSelectionDuringEditing": {
				"!type": "bool"
			},
			"indexPathsForSelectedItems": {
				"!type": "+Array"
			},
			"hasUncommittedUpdates": {
				"!type": "bool"
			},
			"selectionFollowsFocus": {
				"!type": "bool"
			},
			"reorderingCadence": {
				"!type": "number"
			},
			"hasActiveDrop": {
				"!type": "bool"
			},
			"dragInteractionEnabled": {
				"!type": "bool"
			},
			"allowsMultipleSelection": {
				"!type": "bool"
			},
			"dataSource": {
				"!type": "+Object"
			},
			"editing": {
				"!type": "bool"
			},
			"prefetchingEnabled": {
				"!type": "bool"
			},
			"visibleCells": {
				"!type": "+Array"
			},
			"allowsMultipleSelectionDuringEditing": {
				"!type": "bool"
			},
			"indexPathsForVisibleItems": {
				"!type": "+Array"
			},
			"remembersLastFocusedIndexPath": {
				"!type": "bool"
			},
			"dragDelegate": {
				"!type": "+Object"
			},
			"prefetchDataSource": {
				"!type": "+Object"
			},
			"numberOfSections": {
				"!type": "number"
			},
			"collectionViewLayout": {
				"!type": "+UICollectionViewLayout"
			},
			"delegate": {
				"!type": "+Object"
			},
			"hasActiveDrag": {
				"!type": "bool"
			},
			"dropDelegate": {
				"!type": "+Object"
			},
			"scrollEnabled": {
				"!type": "bool"
			},
			"panGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"showsVerticalScrollIndicator": {
				"!type": "bool"
			},
			"contentOffset": {
				"!type": "+Object"
			},
			"minimumZoomScale": {
				"!type": "number"
			},
			"directionalLockEnabled": {
				"!type": "bool"
			},
			"indicatorStyle": {
				"!type": "number"
			},
			"dragging": {
				"!type": "bool"
			},
			"automaticallyAdjustsScrollIndicatorInsets": {
				"!type": "bool"
			},
			"decelerating": {
				"!type": "bool"
			},
			"scrollsToTop": {
				"!type": "bool"
			},
			"decelerationRate": {
				"!type": "number"
			},
			"pinchGestureRecognizer": {
				"!type": "+UIPinchGestureRecognizer"
			},
			"alwaysBounceVertical": {
				"!type": "bool"
			},
			"maximumZoomScale": {
				"!type": "number"
			},
			"canCancelContentTouches": {
				"!type": "bool"
			},
			"contentInset": {
				"!type": "+Object"
			},
			"contentSize": {
				"!type": "+Object"
			},
			"pagingEnabled": {
				"!type": "bool"
			},
			"verticalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"contentLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomBouncing": {
				"!type": "bool"
			},
			"tracking": {
				"!type": "bool"
			},
			"showsHorizontalScrollIndicator": {
				"!type": "bool"
			},
			"frameLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomScale": {
				"!type": "number"
			},
			"bouncesZoom": {
				"!type": "bool"
			},
			"scrollIndicatorInsets": {
				"!type": "+Object"
			},
			"adjustedContentInset": {
				"!type": "+Object"
			},
			"keyboardDismissMode": {
				"!type": "number"
			},
			"indexDisplayMode": {
				"!type": "number"
			},
			"alwaysBounceHorizontal": {
				"!type": "bool"
			},
			"horizontalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"zooming": {
				"!type": "bool"
			},
			"refreshControl": {
				"!type": "+UIRefreshControl"
			},
			"bounces": {
				"!type": "bool"
			},
			"directionalPressGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"contentInsetAdjustmentBehavior": {
				"!type": "number"
			},
			"delaysContentTouches": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"reloadItemsAtIndexPaths": {
				"!type": "fn(indexPaths: +Array) -> void"
			},
			"performBatchUpdatesCompletion": {
				"!type": "fn(updates: +Function, completion: +Function) -> void"
			},
			"indexPathForItemAtPoint": {
				"!type": "fn(point: +Object) -> +NSIndexPath"
			},
			"updateInteractiveMovementTargetPosition": {
				"!type": "fn(targetPosition: +Object) -> void"
			},
			"numberOfItemsInSection": {
				"!type": "fn(section: number) -> number"
			},
			"deselectItemAtIndexPathAnimated": {
				"!type": "fn(indexPath: +NSIndexPath, animated: bool) -> void"
			},
			"deleteSections": {
				"!type": "fn(sections: +NSIndexSet) -> void"
			},
			"moveSectionToSection": {
				"!type": "fn(section: number, newSection: number) -> void"
			},
			"cancelInteractiveTransition": {
				"!type": "fn() -> void"
			},
			"registerNibForSupplementaryViewOfKindWithReuseIdentifier": {
				"!type": "fn(nib: +UINib, kind: string, identifier: string) -> void"
			},
			"initWithFrameCollectionViewLayout": {
				"!type": "fn(frame: +Object, layout: +UICollectionViewLayout) -> +UICollectionView"
			},
			"setCollectionViewLayoutAnimatedCompletion": {
				"!type": "fn(layout: +UICollectionViewLayout, animated: bool, completion: +Function) -> void"
			},
			"supplementaryViewForElementKindAtIndexPath": {
				"!type": "fn(elementKind: string, indexPath: +NSIndexPath) -> +UICollectionReusableView"
			},
			"reloadSections": {
				"!type": "fn(sections: +NSIndexSet) -> void"
			},
			"dequeueConfiguredReusableCellWithRegistrationForIndexPathItem": {
				"!type": "fn(registration: +UICollectionViewCellRegistration, indexPath: +NSIndexPath, item: +Object) -> +UICollectionViewCell"
			},
			"scrollToItemAtIndexPathAtScrollPositionAnimated": {
				"!type": "fn(indexPath: +NSIndexPath, scrollPosition: number, animated: bool) -> void"
			},
			"indexPathForCell": {
				"!type": "fn(cell: +UICollectionViewCell) -> +NSIndexPath"
			},
			"endInteractiveMovement": {
				"!type": "fn() -> void"
			},
			"finishInteractiveTransition": {
				"!type": "fn() -> void"
			},
			"indexPathsForVisibleSupplementaryElementsOfKind": {
				"!type": "fn(elementKind: string) -> +Array"
			},
			"beginInteractiveMovementForItemAtIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> bool"
			},
			"insertSections": {
				"!type": "fn(sections: +NSIndexSet) -> void"
			},
			"selectItemAtIndexPathAnimatedScrollPosition": {
				"!type": "fn(indexPath: +NSIndexPath, animated: bool, scrollPosition: number) -> void"
			},
			"reloadData": {
				"!type": "fn() -> void"
			},
			"visibleSupplementaryViewsOfKind": {
				"!type": "fn(elementKind: string) -> +Array"
			},
			"layoutAttributesForSupplementaryElementOfKindAtIndexPath": {
				"!type": "fn(kind: string, indexPath: +NSIndexPath) -> +UICollectionViewLayoutAttributes"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionView"
			},
			"dequeueReusableCellWithReuseIdentifierForIndexPath": {
				"!type": "fn(identifier: string, indexPath: +NSIndexPath) -> +UICollectionViewCell"
			},
			"setCollectionViewLayoutAnimated": {
				"!type": "fn(layout: +UICollectionViewLayout, animated: bool) -> void"
			},
			"layoutAttributesForItemAtIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +UICollectionViewLayoutAttributes"
			},
			"registerClassForSupplementaryViewOfKindWithReuseIdentifier": {
				"!type": "fn(viewClass: +Object, elementKind: string, identifier: string) -> void"
			},
			"cellForItemAtIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +UICollectionViewCell"
			},
			"insertItemsAtIndexPaths": {
				"!type": "fn(indexPaths: +Array) -> void"
			},
			"dequeueReusableSupplementaryViewOfKindWithReuseIdentifierForIndexPath": {
				"!type": "fn(elementKind: string, identifier: string, indexPath: +NSIndexPath) -> +UICollectionReusableView"
			},
			"dequeueConfiguredReusableSupplementaryViewWithRegistrationForIndexPath": {
				"!type": "fn(registration: +UICollectionViewSupplementaryRegistration, indexPath: +NSIndexPath) -> +UICollectionReusableView"
			},
			"cancelInteractiveMovement": {
				"!type": "fn() -> void"
			},
			"moveItemAtIndexPathToIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath, newIndexPath: +NSIndexPath) -> void"
			},
			"registerClassForCellWithReuseIdentifier": {
				"!type": "fn(cellClass: +Object, identifier: string) -> void"
			},
			"deleteItemsAtIndexPaths": {
				"!type": "fn(indexPaths: +Array) -> void"
			},
			"startInteractiveTransitionToCollectionViewLayoutCompletion": {
				"!type": "fn(layout: +UICollectionViewLayout, completion: +Function) -> +UICollectionViewTransitionLayout"
			},
			"registerNibForCellWithReuseIdentifier": {
				"!type": "fn(nib: +UINib, identifier: string) -> void"
			},
			"touchesShouldBeginWithEventInContentView": {
				"!type": "fn(touches: +NSSet, event: +UIEvent, view: +UIView) -> bool"
			},
			"scrollRectToVisibleAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setContentOffsetAnimated": {
				"!type": "fn(contentOffset: +Object, animated: bool) -> void"
			},
			"adjustedContentInsetDidChange": {
				"!type": "fn() -> void"
			},
			"zoomToRectAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setZoomScaleAnimated": {
				"!type": "fn(scale: number, animated: bool) -> void"
			},
			"scrollIndicatorInsets": {
				"!type": "fn() -> +Object"
			},
			"touchesShouldCancelInContentView": {
				"!type": "fn(view: +UIView) -> bool"
			},
			"flashScrollIndicators": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UICollectionView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKCloudServiceController": {
		"authorizationStatus": {
			"!type": "fn() -> number"
		},
		"requestAuthorization": {
			"!type": "fn(handler: +Function) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKCloudServiceController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKCloudServiceController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKCloudServiceController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"requestCapabilitiesWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"requestPersonalizationTokenForClientTokenWithCompletionHandler": {
				"!type": "fn(clientToken: string, completionHandler: +Function) -> void"
			},
			"requestUserTokenForDeveloperTokenCompletionHandler": {
				"!type": "fn(developerToken: string, completionHandler: +Function) -> void"
			},
			"requestStorefrontCountryCodeWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"requestStorefrontIdentifierWithCompletionHandler": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKCloudServiceController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDictionary": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +Object"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +Object"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"initWithObjectsForKeysCount": {
				"!type": "fn(objects: +Object, keys: +Object, cnt: number) -> +Object"
			},
			"keyEnumerator": {
				"!type": "fn() -> +NSEnumerator"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +Object"
			},
			"objectForKey": {
				"!type": "fn(aKey: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +Object"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutDimension": {
		"fractionalHeightDimension": {
			"!type": "fn(fractionalHeight: number) -> +NSCollectionLayoutDimension"
		},
		"absoluteDimension": {
			"!type": "fn(absoluteDimension: number) -> +NSCollectionLayoutDimension"
		},
		"fractionalWidthDimension": {
			"!type": "fn(fractionalWidth: number) -> +NSCollectionLayoutDimension"
		},
		"estimatedDimension": {
			"!type": "fn(estimatedDimension: number) -> +NSCollectionLayoutDimension"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutDimension"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutDimension"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutDimension"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"isEstimated": {
				"!type": "bool"
			},
			"isFractionalWidth": {
				"!type": "bool"
			},
			"dimension": {
				"!type": "number"
			},
			"isFractionalHeight": {
				"!type": "bool"
			},
			"isAbsolute": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutDimension"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAPropertyAnimation": {
		"animationWithKeyPath": {
			"!type": "fn(path: string) -> +CAPropertyAnimation"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CAPropertyAnimation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAPropertyAnimation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAPropertyAnimation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAPropertyAnimation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"valueFunction": {
				"!type": "+CAValueFunction"
			},
			"cumulative": {
				"!type": "bool"
			},
			"additive": {
				"!type": "bool"
			},
			"keyPath": {
				"!type": "string"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAPropertyAnimation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIImageAccumulator": {
		"imageAccumulatorWithExtentFormatColorSpace": {
			"!type": "fn(extent: +Object, format: number, colorSpace: +Object) -> +CIImageAccumulator"
		},
		"imageAccumulatorWithExtentFormat": {
			"!type": "fn(extent: +Object, format: number) -> +CIImageAccumulator"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIImageAccumulator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIImageAccumulator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIImageAccumulator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"extent": {
				"!type": "+Object"
			},
			"format": {
				"!type": "number"
			},
			"initWithExtentFormat": {
				"!type": "fn(extent: +Object, format: number) -> +CIImageAccumulator"
			},
			"image": {
				"!type": "fn() -> +CIImage"
			},
			"setImageDirtyRect": {
				"!type": "fn(image: +CIImage, dirtyRect: +Object) -> void"
			},
			"initWithExtentFormatColorSpace": {
				"!type": "fn(extent: +Object, format: number, colorSpace: +Object) -> +CIImageAccumulator"
			},
			"clear": {
				"!type": "fn() -> void"
			},
			"setImage": {
				"!type": "fn(image: +CIImage) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIImageAccumulator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLAuthenticationChallenge": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLAuthenticationChallenge"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLAuthenticationChallenge"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLAuthenticationChallenge"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"protectionSpace": {
				"!type": "+NSURLProtectionSpace"
			},
			"sender": {
				"!type": "+Object"
			},
			"failureResponse": {
				"!type": "+NSURLResponse"
			},
			"error": {
				"!type": "+NSError"
			},
			"previousFailureCount": {
				"!type": "number"
			},
			"proposedCredential": {
				"!type": "+NSURLCredential"
			},
			"initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender": {
				"!type": "fn(space: +NSURLProtectionSpace, credential: +NSURLCredential, previousFailureCount: number, response: +NSURLResponse, error: +NSError, sender: +Object) -> +NSURLAuthenticationChallenge"
			},
			"initWithAuthenticationChallengeSender": {
				"!type": "fn(challenge: +NSURLAuthenticationChallenge, sender: +Object) -> +NSURLAuthenticationChallenge"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLAuthenticationChallenge"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDirectoryEnumerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDirectoryEnumerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDirectoryEnumerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDirectoryEnumerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"directoryAttributes": {
				"!type": "+Object"
			},
			"level": {
				"!type": "number"
			},
			"isEnumeratingDirectoryPostOrder": {
				"!type": "bool"
			},
			"fileAttributes": {
				"!type": "+Object"
			},
			"skipDescendents": {
				"!type": "fn() -> void"
			},
			"skipDescendants": {
				"!type": "fn() -> void"
			},
			"nextObject": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDirectoryEnumerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPropertyListSerialization": {
		"propertyListWithStreamOptionsFormatError": {
			"!type": "fn(stream: +NSInputStream, opt: number, format: +Object, error: +Object) -> +Object"
		},
		"propertyListFromDataMutabilityOptionFormatErrorDescription": {
			"!type": "fn(data: +NSData, opt: number, format: +Object, errorString: +Object) -> +Object"
		},
		"propertyListIsValidForFormat": {
			"!type": "fn(plist: +Object, format: number) -> bool"
		},
		"dataFromPropertyListFormatErrorDescription": {
			"!type": "fn(plist: +Object, format: number, errorString: +Object) -> +NSData"
		},
		"writePropertyListToStreamFormatOptionsError": {
			"!type": "fn(plist: +Object, stream: +NSOutputStream, format: number, opt: number, error: +Object) -> number"
		},
		"dataWithPropertyListFormatOptionsError": {
			"!type": "fn(plist: +Object, format: number, opt: number, error: +Object) -> +NSData"
		},
		"propertyListWithDataOptionsFormatError": {
			"!type": "fn(data: +NSData, opt: number, format: +Object, error: +Object) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPropertyListSerialization"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPropertyListSerialization"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPropertyListSerialization"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPropertyListSerialization"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICubicTimingParameters": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICubicTimingParameters"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICubicTimingParameters"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICubicTimingParameters"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"animationCurve": {
				"!type": "number"
			},
			"controlPoint2": {
				"!type": "+Object"
			},
			"controlPoint1": {
				"!type": "+Object"
			},
			"initWithControlPoint1ControlPoint2": {
				"!type": "fn(point1: +Object, point2: +Object) -> +UICubicTimingParameters"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICubicTimingParameters"
			},
			"initWithAnimationCurve": {
				"!type": "fn(curve: number) -> +UICubicTimingParameters"
			},
			"jsinit": {
				"!type": "fn() -> +UICubicTimingParameters"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICubicTimingParameters"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchDisplayController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchDisplayController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchDisplayController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchDisplayController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"searchResultsDataSource": {
				"!type": "+Object"
			},
			"searchResultsDelegate": {
				"!type": "+Object"
			},
			"navigationItem": {
				"!type": "+UINavigationItem"
			},
			"searchContentsController": {
				"!type": "+UIViewController"
			},
			"delegate": {
				"!type": "+Object"
			},
			"active": {
				"!type": "bool"
			},
			"searchBar": {
				"!type": "+UISearchBar"
			},
			"searchResultsTableView": {
				"!type": "+UITableView"
			},
			"searchResultsTitle": {
				"!type": "string"
			},
			"displaysSearchBarInNavigationBar": {
				"!type": "bool"
			},
			"initWithSearchBarContentsController": {
				"!type": "fn(searchBar: +UISearchBar, viewController: +UIViewController) -> +UISearchDisplayController"
			},
			"setActiveAnimated": {
				"!type": "fn(visible: bool, animated: bool) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchDisplayController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionStreamTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionStreamTask"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionStreamTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionStreamTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionStreamTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionStreamTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"closeRead": {
				"!type": "fn() -> void"
			},
			"stopSecureConnection": {
				"!type": "fn() -> void"
			},
			"writeDataTimeoutCompletionHandler": {
				"!type": "fn(data: +NSData, timeout: number, completionHandler: +Function) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionStreamTask"
			},
			"captureStreams": {
				"!type": "fn() -> void"
			},
			"closeWrite": {
				"!type": "fn() -> void"
			},
			"readDataOfMinLengthMaxLengthTimeoutCompletionHandler": {
				"!type": "fn(minBytes: number, maxBytes: number, timeout: number, completionHandler: +Function) -> void"
			},
			"startSecureConnection": {
				"!type": "fn() -> void"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionStreamTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionStreamTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIUserNotificationSettings": {
		"settingsForTypesCategories": {
			"!type": "fn(types: number, categories: +NSSet) -> +UIUserNotificationSettings"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIUserNotificationSettings"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIUserNotificationSettings"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIUserNotificationSettings"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"categories": {
				"!type": "+NSSet"
			},
			"types": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIUserNotificationSettings"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitElectricPotentialDifference": {
		"volts": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"microvolts": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"millivolts": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"kilovolts": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"megavolts": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitElectricPotentialDifference"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitElectricPotentialDifference"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitElectricPotentialDifference"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitElectricPotentialDifference"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitElectricPotentialDifference"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CATransaction": {
		"begin": {
			"!type": "fn() -> void"
		},
		"valueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"completionBlock": {
			"!type": "fn() -> +Function"
		},
		"lock": {
			"!type": "fn() -> void"
		},
		"flush": {
			"!type": "fn() -> void"
		},
		"setValueForKey": {
			"!type": "fn(anObject: +Object, key: string) -> void"
		},
		"setCompletionBlock": {
			"!type": "fn(block: +Function) -> void"
		},
		"setAnimationTimingFunction": {
			"!type": "fn(function: +CAMediaTimingFunction) -> void"
		},
		"unlock": {
			"!type": "fn() -> void"
		},
		"disableActions": {
			"!type": "fn() -> bool"
		},
		"animationDuration": {
			"!type": "fn() -> number"
		},
		"commit": {
			"!type": "fn() -> void"
		},
		"setDisableActions": {
			"!type": "fn(flag: bool) -> void"
		},
		"setAnimationDuration": {
			"!type": "fn(dur: number) -> void"
		},
		"animationTimingFunction": {
			"!type": "fn() -> +CAMediaTimingFunction"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CATransaction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CATransaction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CATransaction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CATransaction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCache": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCache"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCache"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCache"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countLimit": {
				"!type": "number"
			},
			"evictsObjectsWithDiscardedContent": {
				"!type": "bool"
			},
			"totalCostLimit": {
				"!type": "number"
			},
			"name": {
				"!type": "string"
			},
			"delegate": {
				"!type": "+Object"
			},
			"setObjectForKeyCost": {
				"!type": "fn(obj: +Object, key: +Object, g: number) -> void"
			},
			"setObjectForKey": {
				"!type": "fn(obj: +Object, key: +Object) -> void"
			},
			"removeAllObjects": {
				"!type": "fn() -> void"
			},
			"removeObjectForKey": {
				"!type": "fn(key: +Object) -> void"
			},
			"objectForKey": {
				"!type": "fn(key: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCache"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIVideoEditorController": {
		"canEditVideoAtPath": {
			"!type": "fn(videoPath: string) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIVideoEditorController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIVideoEditorController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIVideoEditorController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"videoMaximumDuration": {
				"!type": "number"
			},
			"videoQuality": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"videoPath": {
				"!type": "string"
			},
			"barHideOnSwipeGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"viewControllers": {
				"!type": "+Array"
			},
			"topViewController": {
				"!type": "+UIViewController"
			},
			"hidesBarsOnSwipe": {
				"!type": "bool"
			},
			"hidesBarsWhenKeyboardAppears": {
				"!type": "bool"
			},
			"navigationBarHidden": {
				"!type": "bool"
			},
			"barHideOnTapGestureRecognizer": {
				"!type": "+UITapGestureRecognizer"
			},
			"toolbarHidden": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"hidesBarsWhenVerticallyCompact": {
				"!type": "bool"
			},
			"visibleViewController": {
				"!type": "+UIViewController"
			},
			"interactivePopGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"navigationBar": {
				"!type": "+UINavigationBar"
			},
			"toolbar": {
				"!type": "+UIToolbar"
			},
			"hidesBarsOnTap": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNavigationBarClassToolbarClass": {
				"!type": "fn(navigationBarClass: +Object, toolbarClass: +Object) -> +UIVideoEditorController"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIVideoEditorController"
			},
			"popViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +UIViewController"
			},
			"pushViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> void"
			},
			"popToViewControllerAnimated": {
				"!type": "fn(viewController: +UIViewController, animated: bool) -> +Array"
			},
			"initWithRootViewController": {
				"!type": "fn(rootViewController: +UIViewController) -> +UIVideoEditorController"
			},
			"initWithCoder": {
				"!type": "fn(aDecoder: +NSCoder) -> +UIVideoEditorController"
			},
			"setViewControllersAnimated": {
				"!type": "fn(viewControllers: +Array, animated: bool) -> void"
			},
			"popToRootViewControllerAnimated": {
				"!type": "fn(animated: bool) -> +Array"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"setToolbarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"setNavigationBarHiddenAnimated": {
				"!type": "fn(hidden: bool, animated: bool) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIVideoEditorController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIVideoEditorController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIVideoEditorController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSXMLParser": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSXMLParser"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSXMLParser"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSXMLParser"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"externalEntityResolvingPolicy": {
				"!type": "number"
			},
			"allowedExternalEntityURLs": {
				"!type": "+NSSet"
			},
			"delegate": {
				"!type": "+Object"
			},
			"parserError": {
				"!type": "+NSError"
			},
			"shouldResolveExternalEntities": {
				"!type": "bool"
			},
			"shouldProcessNamespaces": {
				"!type": "bool"
			},
			"shouldReportNamespacePrefixes": {
				"!type": "bool"
			},
			"initWithContentsOfURL": {
				"!type": "fn(url: +NSURL) -> +NSXMLParser"
			},
			"abortParsing": {
				"!type": "fn() -> void"
			},
			"initWithData": {
				"!type": "fn(data: +NSData) -> +NSXMLParser"
			},
			"initWithStream": {
				"!type": "fn(stream: +NSInputStream) -> +NSXMLParser"
			},
			"parse": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSXMLParser"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityCustomRotorItemResult": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityCustomRotorItemResult"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityCustomRotorItemResult"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityCustomRotorItemResult"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"targetRange": {
				"!type": "+UITextRange"
			},
			"targetElement": {
				"!type": "+Object"
			},
			"initWithTargetElementTargetRange": {
				"!type": "fn(targetElement: +Object, targetRange: +UITextRange) -> +UIAccessibilityCustomRotorItemResult"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityCustomRotorItemResult"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextDragPreviewRenderer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextDragPreviewRenderer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextDragPreviewRenderer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextDragPreviewRenderer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"layoutManager": {
				"!type": "+NSLayoutManager"
			},
			"firstLineRect": {
				"!type": "+Object"
			},
			"lastLineRect": {
				"!type": "+Object"
			},
			"image": {
				"!type": "+UIImage"
			},
			"bodyRect": {
				"!type": "+Object"
			},
			"adjustFirstLineRectBodyRectLastLineRectTextOrigin": {
				"!type": "fn(firstLineRect: +Object, bodyRect: +Object, lastLineRect: +Object, origin: +Object) -> void"
			},
			"initWithLayoutManagerRangeUnifyRects": {
				"!type": "fn(layoutManager: +NSLayoutManager, range: +Object, unifyRects: bool) -> +UITextDragPreviewRenderer"
			},
			"initWithLayoutManagerRange": {
				"!type": "fn(layoutManager: +NSLayoutManager, range: +Object) -> +UITextDragPreviewRenderer"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextDragPreviewRenderer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIBarcodeDescriptor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIBarcodeDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIBarcodeDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIBarcodeDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIBarcodeDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIIndirectScribbleInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIIndirectScribbleInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIIndirectScribbleInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIIndirectScribbleInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"handlingWriting": {
				"!type": "bool"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIIndirectScribbleInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIIndirectScribbleInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLComponents": {
		"componentsWithString": {
			"!type": "fn(URLString: string) -> +NSURLComponents"
		},
		"componentsWithURLResolvingAgainstBaseURL": {
			"!type": "fn(url: +NSURL, resolve: bool) -> +NSURLComponents"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLComponents"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLComponents"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLComponents"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"percentEncodedQueryItems": {
				"!type": "+Array"
			},
			"fragment": {
				"!type": "string"
			},
			"rangeOfPath": {
				"!type": "+Object"
			},
			"percentEncodedFragment": {
				"!type": "string"
			},
			"rangeOfPassword": {
				"!type": "+Object"
			},
			"query": {
				"!type": "string"
			},
			"port": {
				"!type": "number"
			},
			"rangeOfHost": {
				"!type": "+Object"
			},
			"rangeOfUser": {
				"!type": "+Object"
			},
			"percentEncodedPassword": {
				"!type": "string"
			},
			"rangeOfPort": {
				"!type": "+Object"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"rangeOfScheme": {
				"!type": "+Object"
			},
			"percentEncodedQuery": {
				"!type": "string"
			},
			"scheme": {
				"!type": "string"
			},
			"string": {
				"!type": "string"
			},
			"percentEncodedPath": {
				"!type": "string"
			},
			"percentEncodedUser": {
				"!type": "string"
			},
			"rangeOfQuery": {
				"!type": "+Object"
			},
			"host": {
				"!type": "string"
			},
			"user": {
				"!type": "string"
			},
			"path": {
				"!type": "string"
			},
			"password": {
				"!type": "string"
			},
			"queryItems": {
				"!type": "+Array"
			},
			"percentEncodedHost": {
				"!type": "string"
			},
			"rangeOfFragment": {
				"!type": "+Object"
			},
			"initWithString": {
				"!type": "fn(URLString: string) -> +NSURLComponents"
			},
			"initWithURLResolvingAgainstBaseURL": {
				"!type": "fn(url: +NSURL, resolve: bool) -> +NSURLComponents"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLComponents"
			},
			"URLRelativeToURL": {
				"!type": "fn(baseURL: +NSURL) -> +NSURL"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLComponents"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSSecureUnarchiveFromDataTransformer": {
		"allowedTopLevelClasses": {
			"!type": "fn() -> +Array"
		},
		"allowsReverseTransformation": {
			"!type": "fn() -> bool"
		},
		"valueTransformerNames": {
			"!type": "fn() -> +Array"
		},
		"valueTransformerForName": {
			"!type": "fn(name: string) -> +NSValueTransformer"
		},
		"transformedValueClass": {
			"!type": "fn() -> +Object"
		},
		"setValueTransformerForName": {
			"!type": "fn(transformer: +NSValueTransformer, name: string) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSSecureUnarchiveFromDataTransformer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSSecureUnarchiveFromDataTransformer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSSecureUnarchiveFromDataTransformer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"transformedValue": {
				"!type": "fn(value: +Object) -> +Object"
			},
			"reverseTransformedValue": {
				"!type": "fn(value: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSSecureUnarchiveFromDataTransformer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISnapBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISnapBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISnapBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISnapBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"damping": {
				"!type": "number"
			},
			"snapPoint": {
				"!type": "+Object"
			},
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"initWithItemSnapToPoint": {
				"!type": "fn(item: +Object, point: +Object) -> +UISnapBehavior"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISnapBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPageViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPageViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPageViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPageViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"gestureRecognizers": {
				"!type": "+Array"
			},
			"viewControllers": {
				"!type": "+Array"
			},
			"spineLocation": {
				"!type": "number"
			},
			"transitionStyle": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"navigationOrientation": {
				"!type": "number"
			},
			"dataSource": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithTransitionStyleNavigationOrientationOptions": {
				"!type": "fn(style: number, navigationOrientation: number, options: +Object) -> +UIPageViewController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPageViewController"
			},
			"setViewControllersDirectionAnimatedCompletion": {
				"!type": "fn(viewControllers: +Array, direction: number, animated: bool, completion: +Function) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIPageViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPageViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPageViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTextAttachment": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTextAttachment"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTextAttachment"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTextAttachment"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"fileWrapper": {
				"!type": "+NSFileWrapper"
			},
			"fileType": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"contents": {
				"!type": "+NSData"
			},
			"bounds": {
				"!type": "+Object"
			},
			"initWithDataOfType": {
				"!type": "fn(contentData: +NSData, uti: string) -> +NSTextAttachment"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTextAttachment"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSException": {
		"exceptionWithNameReasonUserInfo": {
			"!type": "fn(name: string, reason: string, userInfo: +Object) -> +NSException"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSException"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSException"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSException"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reason": {
				"!type": "string"
			},
			"callStackSymbols": {
				"!type": "+Array"
			},
			"callStackReturnAddresses": {
				"!type": "+Array"
			},
			"name": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"raise": {
				"!type": "fn() -> void"
			},
			"initWithNameReasonUserInfo": {
				"!type": "fn(aName: string, aReason: string, aUserInfo: +Object) -> +NSException"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSException"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusDebugger": {
		"status": {
			"!type": "fn() -> +Object"
		},
		"simulateFocusUpdateRequestFromEnvironment": {
			"!type": "fn(environment: +Object) -> +Object"
		},
		"help": {
			"!type": "fn() -> +Object"
		},
		"checkFocusabilityForItem": {
			"!type": "fn(item: +Object) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusDebugger"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusDebugger"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusDebugger"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusDebugger"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewPlaceholder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewPlaceholder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewPlaceholder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewPlaceholder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jscellUpdateHandler": {
				"!type": "+Function"
			},
			"initWithInsertionIndexPathReuseIdentifier": {
				"!type": "fn(insertionIndexPath: +NSIndexPath, reuseIdentifier: string) -> +UICollectionViewPlaceholder"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewPlaceholder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAEmitterLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAEmitterLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAEmitterLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAEmitterLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAEmitterLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"emitterDepth": {
				"!type": "number"
			},
			"scale": {
				"!type": "number"
			},
			"emitterShape": {
				"!type": "string"
			},
			"emitterCells": {
				"!type": "+Array"
			},
			"emitterMode": {
				"!type": "string"
			},
			"preservesDepth": {
				"!type": "bool"
			},
			"emitterSize": {
				"!type": "+Object"
			},
			"birthRate": {
				"!type": "number"
			},
			"seed": {
				"!type": "number"
			},
			"emitterZPosition": {
				"!type": "number"
			},
			"velocity": {
				"!type": "number"
			},
			"spin": {
				"!type": "number"
			},
			"lifetime": {
				"!type": "number"
			},
			"renderMode": {
				"!type": "string"
			},
			"emitterPosition": {
				"!type": "+Object"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAEmitterLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAEmitterLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAEmitterLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAEmitterLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAEmitterLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBezierPath": {
		"bezierPathWithRoundedRectByRoundingCornersCornerRadii": {
			"!type": "fn(rect: +Object, corners: number, cornerRadii: +Object) -> +UIBezierPath"
		},
		"bezierPathWithRoundedRectCornerRadius": {
			"!type": "fn(rect: +Object, cornerRadius: number) -> +UIBezierPath"
		},
		"bezierPathWithArcCenterRadiusStartAngleEndAngleClockwise": {
			"!type": "fn(center: +Object, radius: number, startAngle: number, endAngle: number, clockwise: bool) -> +UIBezierPath"
		},
		"bezierPath": {
			"!type": "fn() -> +UIBezierPath"
		},
		"bezierPathWithCGPath": {
			"!type": "fn(CGPath: +Object) -> +UIBezierPath"
		},
		"bezierPathWithOvalInRect": {
			"!type": "fn(rect: +Object) -> +UIBezierPath"
		},
		"bezierPathWithRect": {
			"!type": "fn(rect: +Object) -> +UIBezierPath"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBezierPath"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBezierPath"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBezierPath"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"CGPath": {
				"!type": "+Object"
			},
			"lineCapStyle": {
				"!type": "number"
			},
			"bounds": {
				"!type": "+Object"
			},
			"miterLimit": {
				"!type": "number"
			},
			"lineJoinStyle": {
				"!type": "number"
			},
			"currentPoint": {
				"!type": "+Object"
			},
			"flatness": {
				"!type": "number"
			},
			"lineWidth": {
				"!type": "number"
			},
			"usesEvenOddFillRule": {
				"!type": "bool"
			},
			"empty": {
				"!type": "bool"
			},
			"addArcWithCenterRadiusStartAngleEndAngleClockwise": {
				"!type": "fn(center: +Object, radius: number, startAngle: number, endAngle: number, clockwise: bool) -> void"
			},
			"strokeWithBlendModeAlpha": {
				"!type": "fn(blendMode: number, alpha: number) -> void"
			},
			"addLineToPoint": {
				"!type": "fn(point: +Object) -> void"
			},
			"containsPoint": {
				"!type": "fn(point: +Object) -> bool"
			},
			"stroke": {
				"!type": "fn() -> void"
			},
			"addQuadCurveToPointControlPoint": {
				"!type": "fn(endPoint: +Object, controlPoint: +Object) -> void"
			},
			"applyTransform": {
				"!type": "fn(transform: +Object) -> void"
			},
			"fill": {
				"!type": "fn() -> void"
			},
			"CGPath": {
				"!type": "fn() -> +Object"
			},
			"getLineDashCountPhase": {
				"!type": "fn(pattern: +Object, count: +Object, phase: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UIBezierPath"
			},
			"appendPath": {
				"!type": "fn(bezierPath: +UIBezierPath) -> void"
			},
			"addClip": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBezierPath"
			},
			"removeAllPoints": {
				"!type": "fn() -> void"
			},
			"closePath": {
				"!type": "fn() -> void"
			},
			"bezierPathByReversingPath": {
				"!type": "fn() -> +UIBezierPath"
			},
			"moveToPoint": {
				"!type": "fn(point: +Object) -> void"
			},
			"addCurveToPointControlPoint1ControlPoint2": {
				"!type": "fn(endPoint: +Object, controlPoint1: +Object, controlPoint2: +Object) -> void"
			},
			"fillWithBlendModeAlpha": {
				"!type": "fn(blendMode: number, alpha: number) -> void"
			},
			"setLineDashCountPhase": {
				"!type": "fn(pattern: +Object, count: number, phase: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBezierPath"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMachPort": {
		"portWithMachPortOptions": {
			"!type": "fn(machPort: number, f: number) -> +NSPort"
		},
		"portWithMachPort": {
			"!type": "fn(machPort: number) -> +NSPort"
		},
		"port": {
			"!type": "fn() -> +NSPort"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMachPort"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMachPort"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMachPort"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"machPort": {
				"!type": "number"
			},
			"reservedSpaceLength": {
				"!type": "number"
			},
			"valid": {
				"!type": "bool"
			},
			"setDelegate": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"delegate": {
				"!type": "fn() -> +Object"
			},
			"initWithMachPortOptions": {
				"!type": "fn(machPort: number, f: number) -> +NSMachPort"
			},
			"initWithMachPort": {
				"!type": "fn(machPort: number) -> +NSMachPort"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"sendBeforeDateMsgidComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, msgID: number, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"setDelegate": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"sendBeforeDateComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"delegate": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMachPort"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionDownloadTask": {
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDownloadTask"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDownloadTask"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionDownloadTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionDownloadTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionDownloadTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"countOfBytesSent": {
				"!type": "number"
			},
			"earliestBeginDate": {
				"!type": "+Date"
			},
			"countOfBytesExpectedToReceive": {
				"!type": "number"
			},
			"taskDescription": {
				"!type": "string"
			},
			"countOfBytesExpectedToSend": {
				"!type": "number"
			},
			"state": {
				"!type": "number"
			},
			"priority": {
				"!type": "number"
			},
			"countOfBytesClientExpectsToSend": {
				"!type": "number"
			},
			"taskIdentifier": {
				"!type": "number"
			},
			"countOfBytesReceived": {
				"!type": "number"
			},
			"error": {
				"!type": "+NSError"
			},
			"currentRequest": {
				"!type": "+NSURLRequest"
			},
			"progress": {
				"!type": "+NSProgress"
			},
			"countOfBytesClientExpectsToReceive": {
				"!type": "number"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"originalRequest": {
				"!type": "+NSURLRequest"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDownloadTask"
			},
			"cancelByProducingResumeData": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"suspend": {
				"!type": "fn() -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"resume": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDownloadTask"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionDownloadTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITapGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITapGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITapGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITapGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfTapsRequired": {
				"!type": "number"
			},
			"numberOfTouchesRequired": {
				"!type": "number"
			},
			"buttonMaskRequired": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITapGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITapGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UITapGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITapGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableOrderedSet": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableOrderedSet"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableOrderedSet"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableOrderedSet"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"removeObjectAtIndex": {
				"!type": "fn(idx: number) -> void"
			},
			"insertObjectAtIndex": {
				"!type": "fn(object: +Object, idx: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableOrderedSet"
			},
			"initWithCapacity": {
				"!type": "fn(numItems: number) -> +NSMutableOrderedSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableOrderedSet"
			},
			"replaceObjectAtIndexWithObject": {
				"!type": "fn(idx: number, object: +Object) -> void"
			},
			"objectAtIndex": {
				"!type": "fn(idx: number) -> +Object"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +NSMutableOrderedSet"
			},
			"indexOfObject": {
				"!type": "fn(object: +Object) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableOrderedSet"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableOrderedSet"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableOrderedSet"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDropProposal": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDropProposal"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDropProposal"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDropProposal"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"precise": {
				"!type": "bool"
			},
			"prefersFullSizePreview": {
				"!type": "bool"
			},
			"operation": {
				"!type": "number"
			},
			"initWithDropOperation": {
				"!type": "fn(operation: number) -> +UIDropProposal"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDropProposal"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCachedURLResponse": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCachedURLResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCachedURLResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCachedURLResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"storagePolicy": {
				"!type": "number"
			},
			"data": {
				"!type": "+NSData"
			},
			"response": {
				"!type": "+NSURLResponse"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"initWithResponseData": {
				"!type": "fn(response: +NSURLResponse, data: +NSData) -> +NSCachedURLResponse"
			},
			"initWithResponseDataUserInfoStoragePolicy": {
				"!type": "fn(response: +NSURLResponse, data: +NSData, userInfo: +Object, storagePolicy: number) -> +NSCachedURLResponse"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCachedURLResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSInvocation": {
		"invocationWithMethodSignature": {
			"!type": "fn(sig: +NSMethodSignature) -> +NSInvocation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSInvocation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSInvocation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSInvocation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"argumentsRetained": {
				"!type": "bool"
			},
			"methodSignature": {
				"!type": "+NSMethodSignature"
			},
			"target": {
				"!type": "+Object"
			},
			"jsselector": {
				"!type": "string"
			},
			"setArgumentAtIndex": {
				"!type": "fn(argumentLocation: +Object, idx: number) -> void"
			},
			"setReturnValue": {
				"!type": "fn(retLoc: +Object) -> void"
			},
			"invoke": {
				"!type": "fn() -> void"
			},
			"retainArguments": {
				"!type": "fn() -> void"
			},
			"getArgumentAtIndex": {
				"!type": "fn(argumentLocation: +Object, idx: number) -> void"
			},
			"invokeWithTarget": {
				"!type": "fn(target: +Object) -> void"
			},
			"getReturnValue": {
				"!type": "fn(retLoc: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSInvocation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILongPressGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILongPressGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILongPressGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILongPressGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allowableMovement": {
				"!type": "number"
			},
			"numberOfTapsRequired": {
				"!type": "number"
			},
			"numberOfTouchesRequired": {
				"!type": "number"
			},
			"minimumPressDuration": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILongPressGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UILongPressGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UILongPressGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILongPressGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTextStorage": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTextStorage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTextStorage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTextStorage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"changeInLength": {
				"!type": "number"
			},
			"fixesAttributesLazily": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layoutManagers": {
				"!type": "+Array"
			},
			"editedMask": {
				"!type": "number"
			},
			"editedRange": {
				"!type": "+Object"
			},
			"string": {
				"!type": "string"
			},
			"editedRangeChangeInLength": {
				"!type": "fn(editedMask: number, editedRange: +Object, delta: number) -> void"
			},
			"addLayoutManager": {
				"!type": "fn(aLayoutManager: +NSLayoutManager) -> void"
			},
			"processEditing": {
				"!type": "fn() -> void"
			},
			"removeLayoutManager": {
				"!type": "fn(aLayoutManager: +NSLayoutManager) -> void"
			},
			"invalidateAttributesInRange": {
				"!type": "fn(range: +Object) -> void"
			},
			"ensureAttributesAreFixedInRange": {
				"!type": "fn(range: +Object) -> void"
			},
			"setAttributesRange": {
				"!type": "fn(attrs: +Object, range: +Object) -> void"
			},
			"replaceCharactersInRangeWithString": {
				"!type": "fn(range: +Object, str: string) -> void"
			},
			"attributesAtIndexEffectiveRange": {
				"!type": "fn(location: number, range: +Object) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTextStorage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIFaceFeature": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIFaceFeature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIFaceFeature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIFaceFeature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"rightEyePosition": {
				"!type": "+Object"
			},
			"hasFaceAngle": {
				"!type": "bool"
			},
			"rightEyeClosed": {
				"!type": "bool"
			},
			"hasMouthPosition": {
				"!type": "bool"
			},
			"hasLeftEyePosition": {
				"!type": "bool"
			},
			"leftEyePosition": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"hasTrackingFrameCount": {
				"!type": "bool"
			},
			"faceAngle": {
				"!type": "number"
			},
			"trackingFrameCount": {
				"!type": "number"
			},
			"leftEyeClosed": {
				"!type": "bool"
			},
			"trackingID": {
				"!type": "number"
			},
			"hasTrackingID": {
				"!type": "bool"
			},
			"hasRightEyePosition": {
				"!type": "bool"
			},
			"hasSmile": {
				"!type": "bool"
			},
			"mouthPosition": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIFaceFeature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAAnimationGroup": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CAAnimationGroup"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAAnimationGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAAnimationGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAAnimationGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"animations": {
				"!type": "+Array"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAAnimationGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAlertView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAlertView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAlertView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAlertView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cancelButtonIndex": {
				"!type": "number"
			},
			"title": {
				"!type": "string"
			},
			"firstOtherButtonIndex": {
				"!type": "number"
			},
			"numberOfButtons": {
				"!type": "number"
			},
			"alertViewStyle": {
				"!type": "number"
			},
			"visible": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"message": {
				"!type": "string"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"textFieldAtIndex": {
				"!type": "fn(textFieldIndex: number) -> +UITextField"
			},
			"show": {
				"!type": "fn() -> void"
			},
			"initWithTitleMessageDelegateCancelButtonTitleOtherButtonTitles": {
				"!type": "fn(title: string, message: string, delegate: +Object, cancelButtonTitle: string, otherButtonTitles: string, args: Array.prototype) -> +UIAlertView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIAlertView"
			},
			"buttonTitleAtIndex": {
				"!type": "fn(buttonIndex: number) -> string"
			},
			"dismissWithClickedButtonIndexAnimated": {
				"!type": "fn(buttonIndex: number, animated: bool) -> void"
			},
			"addButtonWithTitle": {
				"!type": "fn(title: string) -> number"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +Object"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIAlertView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIAlertView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAlertView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKReceiptRefreshRequest": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKReceiptRefreshRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKReceiptRefreshRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKReceiptRefreshRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"receiptProperties": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithReceiptProperties": {
				"!type": "fn(properties: +Object) -> +SKReceiptRefreshRequest"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKReceiptRefreshRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISearchController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISearchController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISearchController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISearchController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"automaticallyShowsSearchResultsController": {
				"!type": "bool"
			},
			"hidesNavigationBarDuringPresentation": {
				"!type": "bool"
			},
			"obscuresBackgroundDuringPresentation": {
				"!type": "bool"
			},
			"searchResultsUpdater": {
				"!type": "+Object"
			},
			"showsSearchResultsController": {
				"!type": "bool"
			},
			"automaticallyShowsScopeBar": {
				"!type": "bool"
			},
			"automaticallyShowsCancelButton": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"active": {
				"!type": "bool"
			},
			"searchResultsController": {
				"!type": "+UIViewController"
			},
			"dimsBackgroundDuringPresentation": {
				"!type": "bool"
			},
			"searchBar": {
				"!type": "+UISearchBar"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UISearchController"
			},
			"initWithSearchResultsController": {
				"!type": "fn(searchResultsController: +UIViewController) -> +UISearchController"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UISearchController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISearchController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISearchController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMutableUserNotificationCategory": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMutableUserNotificationCategory"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMutableUserNotificationCategory"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMutableUserNotificationCategory"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"identifier": {
				"!type": "string"
			},
			"identifier": {
				"!type": "string"
			},
			"setActionsForContext": {
				"!type": "fn(actions: +Array, context: number) -> void"
			},
			"actionsForContext": {
				"!type": "fn(context: number) -> +Array"
			},
			"jsinit": {
				"!type": "fn() -> +UIMutableUserNotificationCategory"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMutableUserNotificationCategory"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMutableUserNotificationCategory"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLock": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLock"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLock"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLock"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"lockBeforeDate": {
				"!type": "fn(limit: +Date) -> bool"
			},
			"tryLock": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLock"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPickerView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPickerView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPickerView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPickerView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfComponents": {
				"!type": "number"
			},
			"showsSelectionIndicator": {
				"!type": "bool"
			},
			"dataSource": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"viewForRowForComponent": {
				"!type": "fn(row: number, component: number) -> +UIView"
			},
			"reloadAllComponents": {
				"!type": "fn() -> void"
			},
			"selectedRowInComponent": {
				"!type": "fn(component: number) -> number"
			},
			"numberOfRowsInComponent": {
				"!type": "fn(component: number) -> number"
			},
			"rowSizeForComponent": {
				"!type": "fn(component: number) -> +Object"
			},
			"reloadComponent": {
				"!type": "fn(component: number) -> void"
			},
			"selectRowInComponentAnimated": {
				"!type": "fn(row: number, component: number, animated: bool) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIPickerView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIPickerView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPickerView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDocumentPickerExtensionViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDocumentPickerExtensionViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDocumentPickerExtensionViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDocumentPickerExtensionViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"providerIdentifier": {
				"!type": "string"
			},
			"originalURL": {
				"!type": "+NSURL"
			},
			"documentStorageURL": {
				"!type": "+NSURL"
			},
			"documentPickerMode": {
				"!type": "number"
			},
			"validTypes": {
				"!type": "+Array"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"dismissGrantingAccessToURL": {
				"!type": "fn(url: +NSURL) -> void"
			},
			"prepareForPresentationInMode": {
				"!type": "fn(mode: number) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIDocumentPickerExtensionViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDocumentPickerExtensionViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDocumentPickerExtensionViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UNTextInputNotificationResponse": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UNTextInputNotificationResponse"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UNTextInputNotificationResponse"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UNTextInputNotificationResponse"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"userText": {
				"!type": "string"
			},
			"notification": {
				"!type": "+UNNotification"
			},
			"actionIdentifier": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UNTextInputNotificationResponse"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutEdgeSpacing": {
		"spacingForLeadingTopTrailingBottom": {
			"!type": "fn(leading: +NSCollectionLayoutSpacing, top: +NSCollectionLayoutSpacing, trailing: +NSCollectionLayoutSpacing, bottom: +NSCollectionLayoutSpacing) -> +NSCollectionLayoutEdgeSpacing"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutEdgeSpacing"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutEdgeSpacing"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutEdgeSpacing"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"leading": {
				"!type": "+NSCollectionLayoutSpacing"
			},
			"top": {
				"!type": "+NSCollectionLayoutSpacing"
			},
			"trailing": {
				"!type": "+NSCollectionLayoutSpacing"
			},
			"bottom": {
				"!type": "+NSCollectionLayoutSpacing"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutEdgeSpacing"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CALayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CALayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CALayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CALayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CALayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CALayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CALayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CALayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CALayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CALayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccessibilityCustomAction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccessibilityCustomAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccessibilityCustomAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccessibilityCustomAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"attributedName": {
				"!type": "+NSAttributedString"
			},
			"name": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"jsselector": {
				"!type": "string"
			},
			"jsactionHandler": {
				"!type": "+Function"
			},
			"target": {
				"!type": "+Object"
			},
			"initWithNameImageTargetSelector": {
				"!type": "fn(name: string, image: +UIImage, target: +Object, selector: string) -> +UIAccessibilityCustomAction"
			},
			"initWithNameTargetSelector": {
				"!type": "fn(name: string, target: +Object, selector: string) -> +UIAccessibilityCustomAction"
			},
			"initWithAttributedNameImageActionHandler": {
				"!type": "fn(attributedName: +NSAttributedString, image: +UIImage, actionHandler: +Function) -> +UIAccessibilityCustomAction"
			},
			"initWithNameImageActionHandler": {
				"!type": "fn(name: string, image: +UIImage, actionHandler: +Function) -> +UIAccessibilityCustomAction"
			},
			"initWithAttributedNameActionHandler": {
				"!type": "fn(attributedName: +NSAttributedString, actionHandler: +Function) -> +UIAccessibilityCustomAction"
			},
			"initWithAttributedNameImageTargetSelector": {
				"!type": "fn(attributedName: +NSAttributedString, image: +UIImage, target: +Object, selector: string) -> +UIAccessibilityCustomAction"
			},
			"initWithAttributedNameTargetSelector": {
				"!type": "fn(attributedName: +NSAttributedString, target: +Object, selector: string) -> +UIAccessibilityCustomAction"
			},
			"initWithNameActionHandler": {
				"!type": "fn(name: string, actionHandler: +Function) -> +UIAccessibilityCustomAction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccessibilityCustomAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarButtonItem": {
		"flexibleSpaceItem": {
			"!type": "fn() -> +UIBarButtonItem"
		},
		"fixedSpaceItemOfWidth": {
			"!type": "fn(width: number) -> +UIBarButtonItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarButtonItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarButtonItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarButtonItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"style": {
				"!type": "number"
			},
			"target": {
				"!type": "+Object"
			},
			"primaryAction": {
				"!type": "+UIAction"
			},
			"menu": {
				"!type": "+UIMenu"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"customView": {
				"!type": "+UIView"
			},
			"width": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "string"
			},
			"possibleTitles": {
				"!type": "+NSSet"
			},
			"title": {
				"!type": "string"
			},
			"landscapeImagePhoneInsets": {
				"!type": "+Object"
			},
			"image": {
				"!type": "+UIImage"
			},
			"enabled": {
				"!type": "bool"
			},
			"landscapeImagePhone": {
				"!type": "+UIImage"
			},
			"largeContentSizeImage": {
				"!type": "+UIImage"
			},
			"tag": {
				"!type": "number"
			},
			"imageInsets": {
				"!type": "+Object"
			},
			"largeContentSizeImageInsets": {
				"!type": "+Object"
			},
			"backgroundImageForStateStyleBarMetrics": {
				"!type": "fn(state: number, style: number, barMetrics: number) -> +UIImage"
			},
			"backgroundVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(barMetrics: number) -> number"
			},
			"setBackButtonTitlePositionAdjustmentForBarMetrics": {
				"!type": "fn(adjustment: +Object, barMetrics: number) -> void"
			},
			"setBackButtonBackgroundVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(adjustment: number, barMetrics: number) -> void"
			},
			"initWithImageMenu": {
				"!type": "fn(image: +UIImage, menu: +UIMenu) -> +UIBarButtonItem"
			},
			"initWithBarButtonSystemItemMenu": {
				"!type": "fn(systemItem: number, menu: +UIMenu) -> +UIBarButtonItem"
			},
			"initWithTitleMenu": {
				"!type": "fn(title: string, menu: +UIMenu) -> +UIBarButtonItem"
			},
			"initWithBarButtonSystemItemPrimaryAction": {
				"!type": "fn(systemItem: number, primaryAction: +UIAction) -> +UIBarButtonItem"
			},
			"initWithBarButtonSystemItemTargetAction": {
				"!type": "fn(systemItem: number, target: +Object, action: string) -> +UIBarButtonItem"
			},
			"backButtonTitlePositionAdjustmentForBarMetrics": {
				"!type": "fn(barMetrics: number) -> +Object"
			},
			"backButtonBackgroundVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(barMetrics: number) -> number"
			},
			"initWithImageStyleTargetAction": {
				"!type": "fn(image: +UIImage, style: number, target: +Object, action: string) -> +UIBarButtonItem"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItem"
			},
			"initWithTitleStyleTargetAction": {
				"!type": "fn(title: string, style: number, target: +Object, action: string) -> +UIBarButtonItem"
			},
			"setBackgroundVerticalPositionAdjustmentForBarMetrics": {
				"!type": "fn(adjustment: number, barMetrics: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarButtonItem"
			},
			"initWithImageLandscapeImagePhoneStyleTargetAction": {
				"!type": "fn(image: +UIImage, landscapeImagePhone: +UIImage, style: number, target: +Object, action: string) -> +UIBarButtonItem"
			},
			"backgroundImageForStateBarMetrics": {
				"!type": "fn(state: number, barMetrics: number) -> +UIImage"
			},
			"setTitlePositionAdjustmentForBarMetrics": {
				"!type": "fn(adjustment: +Object, barMetrics: number) -> void"
			},
			"setBackgroundImageForStateStyleBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, state: number, style: number, barMetrics: number) -> void"
			},
			"backButtonBackgroundImageForStateBarMetrics": {
				"!type": "fn(state: number, barMetrics: number) -> +UIImage"
			},
			"initWithPrimaryAction": {
				"!type": "fn(primaryAction: +UIAction) -> +UIBarButtonItem"
			},
			"titlePositionAdjustmentForBarMetrics": {
				"!type": "fn(barMetrics: number) -> +Object"
			},
			"setBackButtonBackgroundImageForStateBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, state: number, barMetrics: number) -> void"
			},
			"setBackgroundImageForStateBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, state: number, barMetrics: number) -> void"
			},
			"initWithCustomView": {
				"!type": "fn(customView: +UIView) -> +UIBarButtonItem"
			},
			"setTitleTextAttributesForState": {
				"!type": "fn(attributes: +Object, state: number) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItem"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIBarButtonItem"
			},
			"titleTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMutableApplicationShortcutItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMutableApplicationShortcutItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMutableApplicationShortcutItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMutableApplicationShortcutItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"localizedSubtitle": {
				"!type": "string"
			},
			"localizedTitle": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"targetContentIdentifier": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"icon": {
				"!type": "+UIApplicationShortcutIcon"
			},
			"localizedSubtitle": {
				"!type": "string"
			},
			"localizedTitle": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"targetContentIdentifier": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"icon": {
				"!type": "+UIApplicationShortcutIcon"
			},
			"initWithTypeLocalizedTitleLocalizedSubtitleIconUserInfo": {
				"!type": "fn(type: string, localizedTitle: string, localizedSubtitle: string, icon: +UIApplicationShortcutIcon, userInfo: +Object) -> +UIMutableApplicationShortcutItem"
			},
			"initWithTypeLocalizedTitle": {
				"!type": "fn(type: string, localizedTitle: string) -> +UIMutableApplicationShortcutItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMutableApplicationShortcutItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryInsert": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryInsert"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryInsert"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryInsert"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsactionHandler": {
				"!type": "+Function"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryInsert"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryInsert"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryInsert"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISelectionFeedbackGenerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISelectionFeedbackGenerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISelectionFeedbackGenerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISelectionFeedbackGenerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"selectionChanged": {
				"!type": "fn() -> void"
			},
			"prepare": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISelectionFeedbackGenerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CABasicAnimation": {
		"animationWithKeyPath": {
			"!type": "fn(path: string) -> +CABasicAnimation"
		},
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"animation": {
			"!type": "fn() -> +CABasicAnimation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CABasicAnimation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CABasicAnimation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CABasicAnimation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"byValue": {
				"!type": "+Object"
			},
			"fromValue": {
				"!type": "+Object"
			},
			"toValue": {
				"!type": "+Object"
			},
			"valueFunction": {
				"!type": "+CAValueFunction"
			},
			"cumulative": {
				"!type": "bool"
			},
			"additive": {
				"!type": "bool"
			},
			"keyPath": {
				"!type": "string"
			},
			"timingFunction": {
				"!type": "+CAMediaTimingFunction"
			},
			"delegate": {
				"!type": "+Object"
			},
			"removedOnCompletion": {
				"!type": "bool"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CABasicAnimation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPort": {
		"port": {
			"!type": "fn() -> +NSPort"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPort"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPort"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPort"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedSpaceLength": {
				"!type": "number"
			},
			"valid": {
				"!type": "bool"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"sendBeforeDateMsgidComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, msgID: number, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"setDelegate": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"sendBeforeDateComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"delegate": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPort"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDiffableDataSourceSnapshot": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDiffableDataSourceSnapshot"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDiffableDataSourceSnapshot"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDiffableDataSourceSnapshot"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfSections": {
				"!type": "number"
			},
			"itemIdentifiers": {
				"!type": "+Array"
			},
			"numberOfItems": {
				"!type": "number"
			},
			"sectionIdentifiers": {
				"!type": "+Array"
			},
			"deleteAllItems": {
				"!type": "fn() -> void"
			},
			"indexOfItemIdentifier": {
				"!type": "fn(itemIdentifier: +Object) -> number"
			},
			"deleteSectionsWithIdentifiers": {
				"!type": "fn(sectionIdentifiers: +Array) -> void"
			},
			"moveItemWithIdentifierBeforeItemWithIdentifier": {
				"!type": "fn(fromIdentifier: +Object, toIdentifier: +Object) -> void"
			},
			"numberOfItemsInSection": {
				"!type": "fn(sectionIdentifier: +Object) -> number"
			},
			"appendSectionsWithIdentifiers": {
				"!type": "fn(sectionIdentifiers: +Array) -> void"
			},
			"moveSectionWithIdentifierAfterSectionWithIdentifier": {
				"!type": "fn(fromSectionIdentifier: +Object, toSectionIdentifier: +Object) -> void"
			},
			"reloadItemsWithIdentifiers": {
				"!type": "fn(identifiers: +Array) -> void"
			},
			"reloadSectionsWithIdentifiers": {
				"!type": "fn(sectionIdentifiers: +Array) -> void"
			},
			"indexOfSectionIdentifier": {
				"!type": "fn(sectionIdentifier: +Object) -> number"
			},
			"moveItemWithIdentifierAfterItemWithIdentifier": {
				"!type": "fn(fromIdentifier: +Object, toIdentifier: +Object) -> void"
			},
			"deleteItemsWithIdentifiers": {
				"!type": "fn(identifiers: +Array) -> void"
			},
			"moveSectionWithIdentifierBeforeSectionWithIdentifier": {
				"!type": "fn(fromSectionIdentifier: +Object, toSectionIdentifier: +Object) -> void"
			},
			"itemIdentifiersInSectionWithIdentifier": {
				"!type": "fn(sectionIdentifier: +Object) -> +Array"
			},
			"insertItemsWithIdentifiersBeforeItemWithIdentifier": {
				"!type": "fn(identifiers: +Array, itemIdentifier: +Object) -> void"
			},
			"insertSectionsWithIdentifiersBeforeSectionWithIdentifier": {
				"!type": "fn(sectionIdentifiers: +Array, toSectionIdentifier: +Object) -> void"
			},
			"insertSectionsWithIdentifiersAfterSectionWithIdentifier": {
				"!type": "fn(sectionIdentifiers: +Array, toSectionIdentifier: +Object) -> void"
			},
			"appendItemsWithIdentifiersIntoSectionWithIdentifier": {
				"!type": "fn(identifiers: +Array, sectionIdentifier: +Object) -> void"
			},
			"sectionIdentifierForSectionContainingItemIdentifier": {
				"!type": "fn(itemIdentifier: +Object) -> +Object"
			},
			"appendItemsWithIdentifiers": {
				"!type": "fn(identifiers: +Array) -> void"
			},
			"insertItemsWithIdentifiersAfterItemWithIdentifier": {
				"!type": "fn(identifiers: +Array, itemIdentifier: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDiffableDataSourceSnapshot"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTextContainer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTextContainer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTextContainer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTextContainer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"maximumNumberOfLines": {
				"!type": "number"
			},
			"widthTracksTextView": {
				"!type": "bool"
			},
			"simpleRectangularTextContainer": {
				"!type": "bool"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"lineFragmentPadding": {
				"!type": "number"
			},
			"heightTracksTextView": {
				"!type": "bool"
			},
			"layoutManager": {
				"!type": "+NSLayoutManager"
			},
			"exclusionPaths": {
				"!type": "+Array"
			},
			"size": {
				"!type": "+Object"
			},
			"lineFragmentRectForProposedRectAtIndexWritingDirectionRemainingRect": {
				"!type": "fn(proposedRect: +Object, characterIndex: number, baseWritingDirection: number, remainingRect: +Object) -> +Object"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSTextContainer"
			},
			"initWithSize": {
				"!type": "fn(size: +Object) -> +NSTextContainer"
			},
			"replaceLayoutManager": {
				"!type": "fn(newLayoutManager: +NSLayoutManager) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTextContainer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIStackView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIStackView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIStackView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIStackView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"arrangedSubviews": {
				"!type": "+Array"
			},
			"spacing": {
				"!type": "number"
			},
			"baselineRelativeArrangement": {
				"!type": "bool"
			},
			"layoutMarginsRelativeArrangement": {
				"!type": "bool"
			},
			"distribution": {
				"!type": "number"
			},
			"alignment": {
				"!type": "number"
			},
			"axis": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"removeArrangedSubview": {
				"!type": "fn(view: +UIView) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIStackView"
			},
			"addArrangedSubview": {
				"!type": "fn(view: +UIView) -> void"
			},
			"insertArrangedSubviewAtIndex": {
				"!type": "fn(view: +UIView, stackIndex: number) -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIStackView"
			},
			"setCustomSpacingAfterView": {
				"!type": "fn(spacing: number, arrangedSubview: +UIView) -> void"
			},
			"initWithArrangedSubviews": {
				"!type": "fn(views: +Array) -> +UIStackView"
			},
			"customSpacingAfterView": {
				"!type": "fn(arrangedSubview: +UIView) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIStackView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIStackView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIStackView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICommand": {
		"commandWithTitleImageActionPropertyList": {
			"!type": "fn(title: string, image: +UIImage, action: string, propertyList: +Object) -> +UICommand"
		},
		"commandWithTitleImageActionPropertyListAlternates": {
			"!type": "fn(title: string, image: +UIImage, action: string, propertyList: +Object, alternates: +Array) -> +UICommand"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICommand"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICommand"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICommand"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"discoverabilityTitle": {
				"!type": "string"
			},
			"title": {
				"!type": "string"
			},
			"image": {
				"!type": "+UIImage"
			},
			"propertyList": {
				"!type": "+Object"
			},
			"state": {
				"!type": "number"
			},
			"jsaction": {
				"!type": "string"
			},
			"attributes": {
				"!type": "number"
			},
			"alternates": {
				"!type": "+Array"
			},
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICommand"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICommand"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICommand"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScreen": {
		"screens": {
			"!type": "fn() -> +Array"
		},
		"mainScreen": {
			"!type": "fn() -> +UIScreen"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScreen"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScreen"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScreen"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"supportsFocus": {
				"!type": "bool"
			},
			"scale": {
				"!type": "number"
			},
			"applicationFrame": {
				"!type": "+Object"
			},
			"brightness": {
				"!type": "number"
			},
			"maximumFramesPerSecond": {
				"!type": "number"
			},
			"nativeScale": {
				"!type": "number"
			},
			"overscanCompensationInsets": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"nativeBounds": {
				"!type": "+Object"
			},
			"currentMode": {
				"!type": "+UIScreenMode"
			},
			"calibratedLatency": {
				"!type": "number"
			},
			"fixedCoordinateSpace": {
				"!type": "+Object"
			},
			"mirroredScreen": {
				"!type": "+UIScreen"
			},
			"focusedView": {
				"!type": "+UIView"
			},
			"wantsSoftwareDimming": {
				"!type": "bool"
			},
			"coordinateSpace": {
				"!type": "+Object"
			},
			"availableModes": {
				"!type": "+Array"
			},
			"preferredMode": {
				"!type": "+UIScreenMode"
			},
			"focusedItem": {
				"!type": "+Object"
			},
			"captured": {
				"!type": "bool"
			},
			"overscanCompensation": {
				"!type": "number"
			},
			"displayLinkWithTargetSelector": {
				"!type": "fn(target: +Object, sel: string) -> +CADisplayLink"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScreen"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSProcessInfo": {
		"processInfo": {
			"!type": "fn() -> +NSProcessInfo"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSProcessInfo"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSProcessInfo"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSProcessInfo"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"systemUptime": {
				"!type": "number"
			},
			"physicalMemory": {
				"!type": "number"
			},
			"hostName": {
				"!type": "string"
			},
			"processorCount": {
				"!type": "number"
			},
			"environment": {
				"!type": "+Object"
			},
			"processName": {
				"!type": "string"
			},
			"processIdentifier": {
				"!type": "number"
			},
			"arguments": {
				"!type": "+Array"
			},
			"operatingSystemVersion": {
				"!type": "+Object"
			},
			"globallyUniqueString": {
				"!type": "string"
			},
			"activeProcessorCount": {
				"!type": "number"
			},
			"operatingSystemVersionString": {
				"!type": "string"
			},
			"operatingSystemName": {
				"!type": "fn() -> string"
			},
			"isOperatingSystemAtLeastVersion": {
				"!type": "fn(version: +Object) -> bool"
			},
			"operatingSystem": {
				"!type": "fn() -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSProcessInfo"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerRegionRequest": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerRegionRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerRegionRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerRegionRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"modifiers": {
				"!type": "number"
			},
			"location": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerRegionRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIRenderTask": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIRenderTask"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIRenderTask"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIRenderTask"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"waitUntilCompletedAndReturnError": {
				"!type": "fn(error: +Object) -> +CIRenderInfo"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIRenderTask"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINavigationItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINavigationItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINavigationItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINavigationItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"compactAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"backButtonDisplayMode": {
				"!type": "number"
			},
			"hidesSearchBarWhenScrolling": {
				"!type": "bool"
			},
			"prompt": {
				"!type": "string"
			},
			"searchController": {
				"!type": "+UISearchController"
			},
			"title": {
				"!type": "string"
			},
			"rightBarButtonItems": {
				"!type": "+Array"
			},
			"scrollEdgeAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"leftBarButtonItems": {
				"!type": "+Array"
			},
			"hidesBackButton": {
				"!type": "bool"
			},
			"backButtonTitle": {
				"!type": "string"
			},
			"largeTitleDisplayMode": {
				"!type": "number"
			},
			"backBarButtonItem": {
				"!type": "+UIBarButtonItem"
			},
			"rightBarButtonItem": {
				"!type": "+UIBarButtonItem"
			},
			"standardAppearance": {
				"!type": "+UINavigationBarAppearance"
			},
			"titleView": {
				"!type": "+UIView"
			},
			"leftItemsSupplementBackButton": {
				"!type": "bool"
			},
			"leftBarButtonItem": {
				"!type": "+UIBarButtonItem"
			},
			"setRightBarButtonItemsAnimated": {
				"!type": "fn(items: +Array, animated: bool) -> void"
			},
			"initWithTitle": {
				"!type": "fn(title: string) -> +UINavigationItem"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UINavigationItem"
			},
			"setHidesBackButtonAnimated": {
				"!type": "fn(hidesBackButton: bool, animated: bool) -> void"
			},
			"setRightBarButtonItemAnimated": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool) -> void"
			},
			"setLeftBarButtonItemAnimated": {
				"!type": "fn(item: +UIBarButtonItem, animated: bool) -> void"
			},
			"setLeftBarButtonItemsAnimated": {
				"!type": "fn(items: +Array, animated: bool) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINavigationItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSTextTab": {
		"columnTerminatorsForLocale": {
			"!type": "fn(aLocale: +NSLocale) -> +NSCharacterSet"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSTextTab"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSTextTab"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSTextTab"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"location": {
				"!type": "number"
			},
			"alignment": {
				"!type": "number"
			},
			"options": {
				"!type": "+Object"
			},
			"initWithTextAlignmentLocationOptions": {
				"!type": "fn(alignment: number, loc: number, options: +Object) -> +NSTextTab"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSTextTab"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDate": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +Date"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +Date"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +Date"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timeIntervalSinceReferenceDate": {
				"!type": "number"
			},
			"jsinit": {
				"!type": "fn() -> +Date"
			},
			"initWithTimeIntervalSinceReferenceDate": {
				"!type": "fn(ti: number) -> +Date"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +Date"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +Date"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextChecker": {
		"learnWord": {
			"!type": "fn(word: string) -> void"
		},
		"availableLanguages": {
			"!type": "fn() -> +Array"
		},
		"unlearnWord": {
			"!type": "fn(word: string) -> void"
		},
		"hasLearnedWord": {
			"!type": "fn(word: string) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextChecker"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextChecker"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextChecker"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"ignoredWords": {
				"!type": "+Array"
			},
			"guessesForWordRangeInStringLanguage": {
				"!type": "fn(range: +Object, string: string, language: string) -> +Array"
			},
			"rangeOfMisspelledWordInStringRangeStartingAtWrapLanguage": {
				"!type": "fn(stringToCheck: string, range: +Object, startingOffset: number, wrapFlag: bool, language: string) -> +Object"
			},
			"completionsForPartialWordRangeInStringLanguage": {
				"!type": "fn(range: +Object, string: string, language: string) -> +Array"
			},
			"ignoreWord": {
				"!type": "fn(wordToIgnore: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextChecker"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerShape": {
		"shapeWithRoundedRectCornerRadius": {
			"!type": "fn(rect: +Object, cornerRadius: number) -> +UIPointerShape"
		},
		"shapeWithRoundedRect": {
			"!type": "fn(rect: +Object) -> +UIPointerShape"
		},
		"beamWithPreferredLengthAxis": {
			"!type": "fn(length: number, axis: number) -> +UIPointerShape"
		},
		"shapeWithPath": {
			"!type": "fn(path: +UIBezierPath) -> +UIPointerShape"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerShape"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerShape"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerShape"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerShape"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSData": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSData"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSData"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSData"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSData"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSParagraphStyle": {
		"defaultWritingDirectionForLanguage": {
			"!type": "fn(languageName: string) -> number"
		},
		"defaultParagraphStyle": {
			"!type": "fn() -> +NSParagraphStyle"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSParagraphStyle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSParagraphStyle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSParagraphStyle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paragraphSpacing": {
				"!type": "number"
			},
			"tailIndent": {
				"!type": "number"
			},
			"lineBreakStrategy": {
				"!type": "number"
			},
			"defaultTabInterval": {
				"!type": "number"
			},
			"lineSpacing": {
				"!type": "number"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"allowsDefaultTighteningForTruncation": {
				"!type": "bool"
			},
			"tabStops": {
				"!type": "+Array"
			},
			"baseWritingDirection": {
				"!type": "number"
			},
			"paragraphSpacingBefore": {
				"!type": "number"
			},
			"hyphenationFactor": {
				"!type": "number"
			},
			"headIndent": {
				"!type": "number"
			},
			"lineHeightMultiple": {
				"!type": "number"
			},
			"minimumLineHeight": {
				"!type": "number"
			},
			"maximumLineHeight": {
				"!type": "number"
			},
			"alignment": {
				"!type": "number"
			},
			"firstLineHeadIndent": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSParagraphStyle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIBarButtonItemStateAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIBarButtonItemStateAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIBarButtonItemStateAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIBarButtonItemStateAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"titlePositionAdjustment": {
				"!type": "+Object"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"backgroundImagePositionAdjustment": {
				"!type": "+Object"
			},
			"titleTextAttributes": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIBarButtonItemStateAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIUserNotificationAction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIUserNotificationAction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIUserNotificationAction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIUserNotificationAction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"destructive": {
				"!type": "bool"
			},
			"parameters": {
				"!type": "+Object"
			},
			"title": {
				"!type": "string"
			},
			"authenticationRequired": {
				"!type": "bool"
			},
			"behavior": {
				"!type": "number"
			},
			"identifier": {
				"!type": "string"
			},
			"activationMode": {
				"!type": "number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIUserNotificationAction"
			},
			"jsinit": {
				"!type": "fn() -> +UIUserNotificationAction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIUserNotificationAction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitPower": {
		"microwatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"watts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"gigawatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"nanowatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"megawatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"picowatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"femtowatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"horsepower": {
			"!type": "fn() -> +NSUnitPower"
		},
		"terawatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"milliwatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"kilowatts": {
			"!type": "fn() -> +NSUnitPower"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitPower"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitPower"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitPower"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitPower"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitPower"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitPower"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitPower"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableURLRequest": {
		"supportsSecureCoding": {
			"!type": "fn() -> bool"
		},
		"requestWithURL": {
			"!type": "fn(URL: +NSURL) -> +NSMutableURLRequest"
		},
		"requestWithURLCachePolicyTimeoutInterval": {
			"!type": "fn(URL: +NSURL, cachePolicy: number, timeoutInterval: number) -> +NSMutableURLRequest"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableURLRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableURLRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableURLRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timeoutInterval": {
				"!type": "number"
			},
			"allowsConstrainedNetworkAccess": {
				"!type": "bool"
			},
			"networkServiceType": {
				"!type": "number"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"allowsCellularAccess": {
				"!type": "bool"
			},
			"mainDocumentURL": {
				"!type": "+NSURL"
			},
			"allowsExpensiveNetworkAccess": {
				"!type": "bool"
			},
			"cachePolicy": {
				"!type": "number"
			},
			"timeoutInterval": {
				"!type": "number"
			},
			"allowsConstrainedNetworkAccess": {
				"!type": "bool"
			},
			"networkServiceType": {
				"!type": "number"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"allowsCellularAccess": {
				"!type": "bool"
			},
			"mainDocumentURL": {
				"!type": "+NSURL"
			},
			"allowsExpensiveNetworkAccess": {
				"!type": "bool"
			},
			"cachePolicy": {
				"!type": "number"
			},
			"initWithURL": {
				"!type": "fn(URL: +NSURL) -> +NSMutableURLRequest"
			},
			"initWithURLCachePolicyTimeoutInterval": {
				"!type": "fn(URL: +NSURL, cachePolicy: number, timeoutInterval: number) -> +NSMutableURLRequest"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableURLRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLSessionWebSocketMessage": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLSessionWebSocketMessage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLSessionWebSocketMessage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLSessionWebSocketMessage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"data": {
				"!type": "+NSData"
			},
			"type": {
				"!type": "number"
			},
			"string": {
				"!type": "string"
			},
			"initWithData": {
				"!type": "fn(data: +NSData) -> +NSURLSessionWebSocketMessage"
			},
			"initWithString": {
				"!type": "fn(string: string) -> +NSURLSessionWebSocketMessage"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLSessionWebSocketMessage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMeasurement": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMeasurement"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMeasurement"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMeasurement"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"doubleValue": {
				"!type": "number"
			},
			"measurementByConvertingToUnit": {
				"!type": "fn(unit: +NSUnit) -> +NSMeasurement"
			},
			"canBeConvertedToUnit": {
				"!type": "fn(unit: +NSUnit) -> bool"
			},
			"measurementByAddingMeasurement": {
				"!type": "fn(measurement: +NSMeasurement) -> +NSMeasurement"
			},
			"measurementBySubtractingMeasurement": {
				"!type": "fn(measurement: +NSMeasurement) -> +NSMeasurement"
			},
			"initWithDoubleValueUnit": {
				"!type": "fn(doubleValue: number, unit: +Object) -> +NSMeasurement"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMeasurement"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDynamicBehavior": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDynamicBehavior"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDynamicBehavior"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDynamicBehavior"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jsaction": {
				"!type": "+Function"
			},
			"childBehaviors": {
				"!type": "+Array"
			},
			"dynamicAnimator": {
				"!type": "+UIDynamicAnimator"
			},
			"willMoveToAnimator": {
				"!type": "fn(dynamicAnimator: +UIDynamicAnimator) -> void"
			},
			"removeChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"addChildBehavior": {
				"!type": "fn(behavior: +UIDynamicBehavior) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDynamicBehavior"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOrderedCollectionDifference": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOrderedCollectionDifference"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOrderedCollectionDifference"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOrderedCollectionDifference"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"hasChanges": {
				"!type": "bool"
			},
			"removals": {
				"!type": "+Array"
			},
			"insertions": {
				"!type": "+Array"
			},
			"inverseDifference": {
				"!type": "fn() -> +NSOrderedCollectionDifference"
			},
			"initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjectsAdditionalChanges": {
				"!type": "fn(inserts: +NSIndexSet, insertedObjects: +Array, removes: +NSIndexSet, removedObjects: +Array, changes: +Array) -> +NSOrderedCollectionDifference"
			},
			"initWithChanges": {
				"!type": "fn(changes: +Array) -> +NSOrderedCollectionDifference"
			},
			"differenceByTransformingChangesWithBlock": {
				"!type": "fn(block: +Function) -> +NSOrderedCollectionDifference"
			},
			"initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjects": {
				"!type": "fn(inserts: +NSIndexSet, insertedObjects: +Array, removes: +NSIndexSet, removedObjects: +Array) -> +NSOrderedCollectionDifference"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOrderedCollectionDifference"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISwitch": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISwitch"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISwitch"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISwitch"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"on": {
				"!type": "bool"
			},
			"style": {
				"!type": "number"
			},
			"offImage": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"preferredStyle": {
				"!type": "number"
			},
			"thumbTintColor": {
				"!type": "+UIColor"
			},
			"onImage": {
				"!type": "+UIImage"
			},
			"onTintColor": {
				"!type": "+UIColor"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISwitch"
			},
			"setOnAnimated": {
				"!type": "fn(on: bool, animated: bool) -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISwitch"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UISwitch"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISwitch"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISwitch"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISwitch"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISwitch"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISwitch"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutBoundarySupplementaryItem": {
		"boundarySupplementaryItemWithLayoutSizeElementKindAlignmentAbsoluteOffset": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, alignment: number, absoluteOffset: +Object) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"boundarySupplementaryItemWithLayoutSizeElementKindAlignment": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, alignment: number) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, containerAnchor: +NSCollectionLayoutAnchor, itemAnchor: +NSCollectionLayoutAnchor) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"supplementaryItemWithLayoutSizeElementKindContainerAnchor": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, containerAnchor: +NSCollectionLayoutAnchor) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"itemWithLayoutSize": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"itemWithLayoutSizeSupplementaryItems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, supplementaryItems: +Array) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutBoundarySupplementaryItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"alignment": {
				"!type": "number"
			},
			"pinToVisibleBounds": {
				"!type": "bool"
			},
			"extendsBoundary": {
				"!type": "bool"
			},
			"offset": {
				"!type": "+Object"
			},
			"zIndex": {
				"!type": "number"
			},
			"itemAnchor": {
				"!type": "+NSCollectionLayoutAnchor"
			},
			"elementKind": {
				"!type": "string"
			},
			"containerAnchor": {
				"!type": "+NSCollectionLayoutAnchor"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"edgeSpacing": {
				"!type": "+NSCollectionLayoutEdgeSpacing"
			},
			"supplementaryItems": {
				"!type": "+Array"
			},
			"layoutSize": {
				"!type": "+NSCollectionLayoutSize"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutBoundarySupplementaryItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSProxy": {
		"alloc": {
			"!type": "fn() -> +Object"
		},
		"respondsToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSProxy"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSProxy"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSProxy"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"debugDescription": {
				"!type": "string"
			},
			"description": {
				"!type": "string"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"methodSignatureForSelector": {
				"!type": "fn(sel: string) -> +NSMethodSignature"
			},
			"forwardInvocation": {
				"!type": "fn(invocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSProxy"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewCellRegistration": {
		"registrationWithCellNibConfigurationHandler": {
			"!type": "fn(cellNib: +UINib, configurationHandler: +Function) -> +UICollectionViewCellRegistration"
		},
		"registrationWithCellClassConfigurationHandler": {
			"!type": "fn(cellClass: +Object, configurationHandler: +Function) -> +UICollectionViewCellRegistration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewCellRegistration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewCellRegistration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewCellRegistration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cellNib": {
				"!type": "+UINib"
			},
			"jsconfigurationHandler": {
				"!type": "+Function"
			},
			"jscellClass": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewCellRegistration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCoder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCoder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCoder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCoder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"encodeValueOfObjCTypeAt": {
				"!type": "fn(type: +Object, addr: +Object) -> void"
			},
			"versionForClassName": {
				"!type": "fn(className: string) -> number"
			},
			"encodeDataObject": {
				"!type": "fn(data: +NSData) -> void"
			},
			"decodeDataObject": {
				"!type": "fn() -> +NSData"
			},
			"decodeValueOfObjCTypeAtSize": {
				"!type": "fn(type: +Object, data: +Object, size: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCoder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDateComponents": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDateComponents"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDateComponents"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDateComponents"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"leapMonth": {
				"!type": "bool"
			},
			"validDate": {
				"!type": "bool"
			},
			"weekOfYear": {
				"!type": "number"
			},
			"hour": {
				"!type": "number"
			},
			"weekdayOrdinal": {
				"!type": "number"
			},
			"nanosecond": {
				"!type": "number"
			},
			"month": {
				"!type": "number"
			},
			"yearForWeekOfYear": {
				"!type": "number"
			},
			"second": {
				"!type": "number"
			},
			"weekOfMonth": {
				"!type": "number"
			},
			"era": {
				"!type": "number"
			},
			"year": {
				"!type": "number"
			},
			"date": {
				"!type": "+Date"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"quarter": {
				"!type": "number"
			},
			"day": {
				"!type": "number"
			},
			"minute": {
				"!type": "number"
			},
			"weekday": {
				"!type": "number"
			},
			"valueForComponent": {
				"!type": "fn(unit: number) -> number"
			},
			"setWeek": {
				"!type": "fn(v: number) -> void"
			},
			"week": {
				"!type": "fn() -> number"
			},
			"isValidDateInCalendar": {
				"!type": "fn(calendar: +NSCalendar) -> bool"
			},
			"setValueForComponent": {
				"!type": "fn(value: number, unit: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateComponents"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDateFormatter": {
		"setDefaultFormatterBehavior": {
			"!type": "fn(defaultFormatterBehavior: number) -> void"
		},
		"localizedStringFromDateDateStyleTimeStyle": {
			"!type": "fn(date: +Date, dstyle: number, tstyle: number) -> string"
		},
		"defaultFormatterBehavior": {
			"!type": "fn() -> number"
		},
		"dateFormatFromTemplateOptionsLocale": {
			"!type": "fn(tmplate: string, opts: number, locale: +NSLocale) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDateFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDateFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDateFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"standaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"longEraSymbols": {
				"!type": "+Array"
			},
			"weekdaySymbols": {
				"!type": "+Array"
			},
			"timeStyle": {
				"!type": "number"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"dateStyle": {
				"!type": "number"
			},
			"shortQuarterSymbols": {
				"!type": "+Array"
			},
			"shortStandaloneQuarterSymbols": {
				"!type": "+Array"
			},
			"twoDigitStartDate": {
				"!type": "+Date"
			},
			"generatesCalendarDates": {
				"!type": "bool"
			},
			"PMSymbol": {
				"!type": "string"
			},
			"defaultDate": {
				"!type": "+Date"
			},
			"dateFormat": {
				"!type": "string"
			},
			"shortStandaloneMonthSymbols": {
				"!type": "+Array"
			},
			"formatterBehavior": {
				"!type": "number"
			},
			"lenient": {
				"!type": "bool"
			},
			"eraSymbols": {
				"!type": "+Array"
			},
			"veryShortMonthSymbols": {
				"!type": "+Array"
			},
			"veryShortWeekdaySymbols": {
				"!type": "+Array"
			},
			"AMSymbol": {
				"!type": "string"
			},
			"shortStandaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"doesRelativeDateFormatting": {
				"!type": "bool"
			},
			"gregorianStartDate": {
				"!type": "+Date"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"shortWeekdaySymbols": {
				"!type": "+Array"
			},
			"quarterSymbols": {
				"!type": "+Array"
			},
			"shortMonthSymbols": {
				"!type": "+Array"
			},
			"standaloneMonthSymbols": {
				"!type": "+Array"
			},
			"formattingContext": {
				"!type": "number"
			},
			"standaloneQuarterSymbols": {
				"!type": "+Array"
			},
			"veryShortStandaloneMonthSymbols": {
				"!type": "+Array"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"monthSymbols": {
				"!type": "+Array"
			},
			"veryShortStandaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"getObjectValueForStringRangeError": {
				"!type": "fn(obj: +Object, string: string, rangep: +Object, error: +Object) -> bool"
			},
			"setLocalizedDateFormatFromTemplate": {
				"!type": "fn(dateFormatTemplate: string) -> void"
			},
			"stringFromDate": {
				"!type": "fn(date: +Date) -> string"
			},
			"dateFromString": {
				"!type": "fn(string: string) -> +Date"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIRenderDestination": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIRenderDestination"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIRenderDestination"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIRenderDestination"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"colorSpace": {
				"!type": "+Object"
			},
			"dithered": {
				"!type": "bool"
			},
			"blendKernel": {
				"!type": "+CIBlendKernel"
			},
			"flipped": {
				"!type": "bool"
			},
			"width": {
				"!type": "number"
			},
			"alphaMode": {
				"!type": "number"
			},
			"height": {
				"!type": "number"
			},
			"clamped": {
				"!type": "bool"
			},
			"blendsInDestinationColorSpace": {
				"!type": "bool"
			},
			"initWithWidthHeightPixelFormatCommandBufferMtlTextureProvider": {
				"!type": "fn(width: number, height: number, pixelFormat: number, commandBuffer: +Object, block: +Function) -> +CIRenderDestination"
			},
			"initWithPixelBuffer": {
				"!type": "fn(pixelBuffer: +Object) -> +CIRenderDestination"
			},
			"initWithIOSurface": {
				"!type": "fn(surface: +IOSurface) -> +CIRenderDestination"
			},
			"initWithGLTextureTargetWidthHeight": {
				"!type": "fn(texture: number, target: number, width: number, height: number) -> +CIRenderDestination"
			},
			"initWithMTLTextureCommandBuffer": {
				"!type": "fn(texture: +Object, commandBuffer: +Object) -> +CIRenderDestination"
			},
			"initWithBitmapDataWidthHeightBytesPerRowFormat": {
				"!type": "fn(data: +Object, width: number, height: number, bytesPerRow: number, format: number) -> +CIRenderDestination"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIRenderDestination"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDateInterval": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDateInterval"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDateInterval"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDateInterval"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"duration": {
				"!type": "number"
			},
			"startDate": {
				"!type": "+Date"
			},
			"endDate": {
				"!type": "+Date"
			},
			"isEqualToDateInterval": {
				"!type": "fn(dateInterval: +NSDateInterval) -> bool"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSDateInterval"
			},
			"initWithStartDateEndDate": {
				"!type": "fn(startDate: +Date, endDate: +Date) -> +NSDateInterval"
			},
			"containsDate": {
				"!type": "fn(date: +Date) -> bool"
			},
			"initWithStartDateDuration": {
				"!type": "fn(startDate: +Date, duration: number) -> +NSDateInterval"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateInterval"
			},
			"intersectsDateInterval": {
				"!type": "fn(dateInterval: +NSDateInterval) -> bool"
			},
			"compare": {
				"!type": "fn(dateInterval: +NSDateInterval) -> number"
			},
			"intersectionWithDateInterval": {
				"!type": "fn(dateInterval: +NSDateInterval) -> +NSDateInterval"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateInterval"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewFlowLayoutInvalidationContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewFlowLayoutInvalidationContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewFlowLayoutInvalidationContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewFlowLayoutInvalidationContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invalidateFlowLayoutDelegateMetrics": {
				"!type": "bool"
			},
			"invalidateFlowLayoutAttributes": {
				"!type": "bool"
			},
			"invalidateEverything": {
				"!type": "bool"
			},
			"previousIndexPathsForInteractivelyMovingItems": {
				"!type": "+Array"
			},
			"targetIndexPathsForInteractivelyMovingItems": {
				"!type": "+Array"
			},
			"invalidatedSupplementaryIndexPaths": {
				"!type": "+Object"
			},
			"interactiveMovementTarget": {
				"!type": "+Object"
			},
			"invalidatedItemIndexPaths": {
				"!type": "+Array"
			},
			"contentOffsetAdjustment": {
				"!type": "+Object"
			},
			"contentSizeAdjustment": {
				"!type": "+Object"
			},
			"invalidatedDecorationIndexPaths": {
				"!type": "+Object"
			},
			"invalidateDataSourceCounts": {
				"!type": "bool"
			},
			"invalidateItemsAtIndexPaths": {
				"!type": "fn(indexPaths: +Array) -> void"
			},
			"invalidateDecorationElementsOfKindAtIndexPaths": {
				"!type": "fn(elementKind: string, indexPaths: +Array) -> void"
			},
			"invalidateSupplementaryElementsOfKindAtIndexPaths": {
				"!type": "fn(elementKind: string, indexPaths: +Array) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewFlowLayoutInvalidationContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextField": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextField"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextField"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextField"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"text": {
				"!type": "string"
			},
			"disabledBackground": {
				"!type": "+UIImage"
			},
			"font": {
				"!type": "+UIFont"
			},
			"rightView": {
				"!type": "+UIView"
			},
			"rightViewMode": {
				"!type": "number"
			},
			"inputView": {
				"!type": "+UIView"
			},
			"placeholder": {
				"!type": "string"
			},
			"typingAttributes": {
				"!type": "+Object"
			},
			"leftView": {
				"!type": "+UIView"
			},
			"clearButtonMode": {
				"!type": "number"
			},
			"minimumFontSize": {
				"!type": "number"
			},
			"textColor": {
				"!type": "+UIColor"
			},
			"attributedPlaceholder": {
				"!type": "+NSAttributedString"
			},
			"background": {
				"!type": "+UIImage"
			},
			"editing": {
				"!type": "bool"
			},
			"clearsOnBeginEditing": {
				"!type": "bool"
			},
			"clearsOnInsertion": {
				"!type": "bool"
			},
			"adjustsFontSizeToFitWidth": {
				"!type": "bool"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"leftViewMode": {
				"!type": "number"
			},
			"allowsEditingTextAttributes": {
				"!type": "bool"
			},
			"defaultTextAttributes": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"inputAccessoryView": {
				"!type": "+UIView"
			},
			"borderStyle": {
				"!type": "number"
			},
			"textAlignment": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"editingRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"clearButtonRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"drawTextInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"placeholderRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"borderRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"textRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"drawPlaceholderInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"rightViewRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"leftViewRectForBounds": {
				"!type": "fn(bounds: +Object) -> +Object"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UITextField"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITextField"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITextField"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITextField"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITextField"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextField"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextInputPasswordRules": {
		"passwordRulesWithDescriptor": {
			"!type": "fn(passwordRulesDescriptor: string) -> +UITextInputPasswordRules"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextInputPasswordRules"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextInputPasswordRules"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextInputPasswordRules"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"passwordRulesDescriptor": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextInputPasswordRules"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUserDefaults": {
		"resetStandardUserDefaults": {
			"!type": "fn() -> void"
		},
		"standardUserDefaults": {
			"!type": "fn() -> +NSUserDefaults"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUserDefaults"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUserDefaults"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUserDefaults"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"volatileDomainNames": {
				"!type": "+Array"
			},
			"doubleForKey": {
				"!type": "fn(defaultName: string) -> number"
			},
			"volatileDomainForName": {
				"!type": "fn(domainName: string) -> +Object"
			},
			"setIntegerForKey": {
				"!type": "fn(value: number, defaultName: string) -> void"
			},
			"setDoubleForKey": {
				"!type": "fn(value: number, defaultName: string) -> void"
			},
			"setURLForKey": {
				"!type": "fn(url: +NSURL, defaultName: string) -> void"
			},
			"setBoolForKey": {
				"!type": "fn(value: bool, defaultName: string) -> void"
			},
			"setFloatForKey": {
				"!type": "fn(value: number, defaultName: string) -> void"
			},
			"stringArrayForKey": {
				"!type": "fn(defaultName: string) -> +Array"
			},
			"addSuiteNamed": {
				"!type": "fn(suiteName: string) -> void"
			},
			"URLForKey": {
				"!type": "fn(defaultName: string) -> +NSURL"
			},
			"setPersistentDomainForName": {
				"!type": "fn(domain: +Object, domainName: string) -> void"
			},
			"synchronize": {
				"!type": "fn() -> bool"
			},
			"initWithSuiteName": {
				"!type": "fn(suitename: string) -> +NSUserDefaults"
			},
			"jsinit": {
				"!type": "fn() -> +NSUserDefaults"
			},
			"initWithUser": {
				"!type": "fn(username: string) -> +Object"
			},
			"stringForKey": {
				"!type": "fn(defaultName: string) -> string"
			},
			"removeVolatileDomainForName": {
				"!type": "fn(domainName: string) -> void"
			},
			"integerForKey": {
				"!type": "fn(defaultName: string) -> number"
			},
			"setVolatileDomainForName": {
				"!type": "fn(domain: +Object, domainName: string) -> void"
			},
			"removeSuiteNamed": {
				"!type": "fn(suiteName: string) -> void"
			},
			"setObjectForKey": {
				"!type": "fn(value: +Object, defaultName: string) -> void"
			},
			"removePersistentDomainForName": {
				"!type": "fn(domainName: string) -> void"
			},
			"removeObjectForKey": {
				"!type": "fn(defaultName: string) -> void"
			},
			"dictionaryForKey": {
				"!type": "fn(defaultName: string) -> +Object"
			},
			"objectIsForcedForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"persistentDomainNames": {
				"!type": "fn() -> +Array"
			},
			"objectIsForcedForKeyInDomain": {
				"!type": "fn(key: string, domain: string) -> bool"
			},
			"boolForKey": {
				"!type": "fn(defaultName: string) -> bool"
			},
			"dictionaryRepresentation": {
				"!type": "fn() -> +Object"
			},
			"persistentDomainForName": {
				"!type": "fn(domainName: string) -> +Object"
			},
			"dataForKey": {
				"!type": "fn(defaultName: string) -> +NSData"
			},
			"registerDefaults": {
				"!type": "fn(registrationDictionary: +Object) -> void"
			},
			"arrayForKey": {
				"!type": "fn(defaultName: string) -> +Array"
			},
			"floatForKey": {
				"!type": "fn(defaultName: string) -> number"
			},
			"objectForKey": {
				"!type": "fn(defaultName: string) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUserDefaults"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKProductsRequest": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKProductsRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKProductsRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKProductsRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"initWithProductIdentifiers": {
				"!type": "fn(productIdentifiers: +NSSet) -> +SKProductsRequest"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKProductsRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDeferredMenuElement": {
		"elementWithProvider": {
			"!type": "fn(elementProvider: +Function) -> +UIDeferredMenuElement"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDeferredMenuElement"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDeferredMenuElement"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDeferredMenuElement"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"image": {
				"!type": "+UIImage"
			},
			"title": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDeferredMenuElement"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDeferredMenuElement"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMarkupTextPrintFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMarkupTextPrintFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMarkupTextPrintFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMarkupTextPrintFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"markupText": {
				"!type": "string"
			},
			"pageCount": {
				"!type": "number"
			},
			"printPageRenderer": {
				"!type": "+UIPrintPageRenderer"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"perPageContentInsets": {
				"!type": "+Object"
			},
			"maximumContentWidth": {
				"!type": "number"
			},
			"maximumContentHeight": {
				"!type": "number"
			},
			"startPage": {
				"!type": "number"
			},
			"initWithMarkupText": {
				"!type": "fn(markupText: string) -> +UIMarkupTextPrintFormatter"
			},
			"rectForPageAtIndex": {
				"!type": "fn(pageIndex: number) -> +Object"
			},
			"drawInRectForPageAtIndex": {
				"!type": "fn(rect: +Object, pageIndex: number) -> void"
			},
			"removeFromPrintPageRenderer": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMarkupTextPrintFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIQRCodeDescriptor": {
		"descriptorWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel": {
			"!type": "fn(errorCorrectedPayload: +NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: number) -> +CIQRCodeDescriptor"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIQRCodeDescriptor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIQRCodeDescriptor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIQRCodeDescriptor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"errorCorrectedPayload": {
				"!type": "+NSData"
			},
			"errorCorrectionLevel": {
				"!type": "number"
			},
			"symbolVersion": {
				"!type": "number"
			},
			"maskPattern": {
				"!type": "number"
			},
			"initWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel": {
				"!type": "fn(errorCorrectedPayload: +NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: number) -> +CIQRCodeDescriptor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIQRCodeDescriptor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSObject": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSObject"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSObject"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSObject"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSObject"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSThread": {
		"setThreadPriority": {
			"!type": "fn(p: number) -> bool"
		},
		"sleepForTimeInterval": {
			"!type": "fn(ti: number) -> void"
		},
		"detachNewThreadWithBlock": {
			"!type": "fn(block: +Function) -> void"
		},
		"currentThread": {
			"!type": "fn() -> +NSThread"
		},
		"isMainThread": {
			"!type": "fn() -> bool"
		},
		"mainThread": {
			"!type": "fn() -> +NSThread"
		},
		"sleepUntilDate": {
			"!type": "fn(date: +Date) -> void"
		},
		"detachNewThreadSelectorToTargetWithObject": {
			"!type": "fn(selector: string, target: +Object, argument: +Object) -> void"
		},
		"callStackReturnAddresses": {
			"!type": "fn() -> +Array"
		},
		"exit": {
			"!type": "fn() -> void"
		},
		"threadPriority": {
			"!type": "fn() -> number"
		},
		"callStackSymbols": {
			"!type": "fn() -> +Array"
		},
		"isMultiThreaded": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSThread"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSThread"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSThread"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"isMainThread": {
				"!type": "bool"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"executing": {
				"!type": "bool"
			},
			"finished": {
				"!type": "bool"
			},
			"threadPriority": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"stackSize": {
				"!type": "number"
			},
			"threadDictionary": {
				"!type": "+NSMutableDictionary"
			},
			"initWithTargetSelectorObject": {
				"!type": "fn(target: +Object, selector: string, argument: +Object) -> +NSThread"
			},
			"initWithBlock": {
				"!type": "fn(block: +Function) -> +NSThread"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSThread"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"main": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSThread"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITargetedDragPreview": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITargetedDragPreview"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITargetedDragPreview"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITargetedDragPreview"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"size": {
				"!type": "+Object"
			},
			"target": {
				"!type": "+UIPreviewTarget"
			},
			"parameters": {
				"!type": "+UIPreviewParameters"
			},
			"view": {
				"!type": "+UIView"
			},
			"retargetedPreviewWithTarget": {
				"!type": "fn(newTarget: +UIDragPreviewTarget) -> +UITargetedDragPreview"
			},
			"initWithView": {
				"!type": "fn(view: +UIView) -> +UITargetedDragPreview"
			},
			"retargetedPreviewWithTarget": {
				"!type": "fn(newTarget: +UIPreviewTarget) -> +UITargetedPreview"
			},
			"initWithViewParametersTarget": {
				"!type": "fn(view: +UIView, parameters: +UIPreviewParameters, target: +UIPreviewTarget) -> +UITargetedDragPreview"
			},
			"initWithViewParameters": {
				"!type": "fn(view: +UIView, parameters: +UIPreviewParameters) -> +UITargetedDragPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITargetedDragPreview"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutGroupCustomItem": {
		"customItemWithFrameZIndex": {
			"!type": "fn(frame: +Object, zIndex: number) -> +NSCollectionLayoutGroupCustomItem"
		},
		"customItemWithFrame": {
			"!type": "fn(frame: +Object) -> +NSCollectionLayoutGroupCustomItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutGroupCustomItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutGroupCustomItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutGroupCustomItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"zIndex": {
				"!type": "number"
			},
			"frame": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutGroupCustomItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKRequest": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKRequest"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKRequest"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKRequest"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKRequest"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLQueryItem": {
		"queryItemWithNameValue": {
			"!type": "fn(name: string, value: string) -> +NSURLQueryItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLQueryItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLQueryItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLQueryItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"value": {
				"!type": "string"
			},
			"initWithNameValue": {
				"!type": "fn(name: string, value: string) -> +NSURLQueryItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLQueryItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDiffableDataSourceTransaction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDiffableDataSourceTransaction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDiffableDataSourceTransaction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDiffableDataSourceTransaction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"finalSnapshot": {
				"!type": "+NSDiffableDataSourceSnapshot"
			},
			"difference": {
				"!type": "+NSOrderedCollectionDifference"
			},
			"sectionTransactions": {
				"!type": "+Array"
			},
			"initialSnapshot": {
				"!type": "+NSDiffableDataSourceSnapshot"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDiffableDataSourceTransaction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFeedbackGenerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFeedbackGenerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFeedbackGenerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFeedbackGenerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"prepare": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFeedbackGenerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CADisplayLink": {
		"displayLinkWithTargetSelector": {
			"!type": "fn(target: +Object, sel: string) -> +CADisplayLink"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CADisplayLink"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CADisplayLink"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CADisplayLink"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"targetTimestamp": {
				"!type": "number"
			},
			"timestamp": {
				"!type": "number"
			},
			"frameInterval": {
				"!type": "number"
			},
			"paused": {
				"!type": "bool"
			},
			"preferredFramesPerSecond": {
				"!type": "number"
			},
			"duration": {
				"!type": "number"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"addToRunLoopForMode": {
				"!type": "fn(runloop: +NSRunLoop, mode: string) -> void"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(runloop: +NSRunLoop, mode: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CADisplayLink"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrintPaper": {
		"bestPaperForPageSizeWithPapersFromArray": {
			"!type": "fn(contentSize: +Object, paperList: +Array) -> +UIPrintPaper"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrintPaper"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrintPaper"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrintPaper"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"paperSize": {
				"!type": "+Object"
			},
			"printableRect": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrintPaper"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewLayoutInvalidationContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewLayoutInvalidationContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewLayoutInvalidationContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewLayoutInvalidationContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"invalidateEverything": {
				"!type": "bool"
			},
			"previousIndexPathsForInteractivelyMovingItems": {
				"!type": "+Array"
			},
			"targetIndexPathsForInteractivelyMovingItems": {
				"!type": "+Array"
			},
			"invalidatedSupplementaryIndexPaths": {
				"!type": "+Object"
			},
			"interactiveMovementTarget": {
				"!type": "+Object"
			},
			"invalidatedItemIndexPaths": {
				"!type": "+Array"
			},
			"contentOffsetAdjustment": {
				"!type": "+Object"
			},
			"contentSizeAdjustment": {
				"!type": "+Object"
			},
			"invalidatedDecorationIndexPaths": {
				"!type": "+Object"
			},
			"invalidateDataSourceCounts": {
				"!type": "bool"
			},
			"invalidateItemsAtIndexPaths": {
				"!type": "fn(indexPaths: +Array) -> void"
			},
			"invalidateDecorationElementsOfKindAtIndexPaths": {
				"!type": "fn(elementKind: string, indexPaths: +Array) -> void"
			},
			"invalidateSupplementaryElementsOfKindAtIndexPaths": {
				"!type": "fn(elementKind: string, indexPaths: +Array) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewLayoutInvalidationContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDragPreviewParameters": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDragPreviewParameters"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDragPreviewParameters"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDragPreviewParameters"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"visiblePath": {
				"!type": "+UIBezierPath"
			},
			"shadowPath": {
				"!type": "+UIBezierPath"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"initWithTextLineRects": {
				"!type": "fn(textLineRects: +Array) -> +UIDragPreviewParameters"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragPreviewParameters"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragPreviewParameters"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBarAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBarAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBarAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBarAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"stackedItemPositioning": {
				"!type": "number"
			},
			"stackedItemSpacing": {
				"!type": "number"
			},
			"compactInlineLayoutAppearance": {
				"!type": "+UITabBarItemAppearance"
			},
			"selectionIndicatorImage": {
				"!type": "+UIImage"
			},
			"selectionIndicatorTintColor": {
				"!type": "+UIColor"
			},
			"inlineLayoutAppearance": {
				"!type": "+UITabBarItemAppearance"
			},
			"stackedItemWidth": {
				"!type": "number"
			},
			"stackedLayoutAppearance": {
				"!type": "+UITabBarItemAppearance"
			},
			"shadowImage": {
				"!type": "+UIImage"
			},
			"idiom": {
				"!type": "number"
			},
			"shadowColor": {
				"!type": "+UIColor"
			},
			"backgroundImage": {
				"!type": "+UIImage"
			},
			"backgroundImageContentMode": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"backgroundEffect": {
				"!type": "+UIBlurEffect"
			},
			"configureWithTransparentBackground": {
				"!type": "fn() -> void"
			},
			"initWithBarAppearance": {
				"!type": "fn(barAppearance: +UIBarAppearance) -> +UITabBarAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBarAppearance"
			},
			"initWithIdiom": {
				"!type": "fn(idiom: number) -> +UITabBarAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarAppearance"
			},
			"configureWithOpaqueBackground": {
				"!type": "fn() -> void"
			},
			"configureWithDefaultBackground": {
				"!type": "fn() -> void"
			},
			"jscopy": {
				"!type": "fn() -> +UITabBarAppearance"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutGroup": {
		"verticalGroupWithLayoutSizeSubitemCount": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, subitem: +NSCollectionLayoutItem, count: number) -> +NSCollectionLayoutGroup"
		},
		"verticalGroupWithLayoutSizeSubitems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, subitems: +Array) -> +NSCollectionLayoutGroup"
		},
		"customGroupWithLayoutSizeItemProvider": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, itemProvider: +Function) -> +NSCollectionLayoutGroup"
		},
		"horizontalGroupWithLayoutSizeSubitemCount": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, subitem: +NSCollectionLayoutItem, count: number) -> +NSCollectionLayoutGroup"
		},
		"horizontalGroupWithLayoutSizeSubitems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, subitems: +Array) -> +NSCollectionLayoutGroup"
		},
		"itemWithLayoutSize": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize) -> +NSCollectionLayoutGroup"
		},
		"itemWithLayoutSizeSupplementaryItems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, supplementaryItems: +Array) -> +NSCollectionLayoutGroup"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutGroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutGroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutGroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"supplementaryItems": {
				"!type": "+Array"
			},
			"subitems": {
				"!type": "+Array"
			},
			"interItemSpacing": {
				"!type": "+NSCollectionLayoutSpacing"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"edgeSpacing": {
				"!type": "+NSCollectionLayoutEdgeSpacing"
			},
			"supplementaryItems": {
				"!type": "+Array"
			},
			"layoutSize": {
				"!type": "+NSCollectionLayoutSize"
			},
			"visualDescription": {
				"!type": "fn() -> string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutGroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDatePicker": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDatePicker"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDatePicker"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDatePicker"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"minimumDate": {
				"!type": "+Date"
			},
			"countDownDuration": {
				"!type": "number"
			},
			"maximumDate": {
				"!type": "+Date"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"preferredDatePickerStyle": {
				"!type": "number"
			},
			"datePickerStyle": {
				"!type": "number"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"date": {
				"!type": "+Date"
			},
			"datePickerMode": {
				"!type": "number"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"minuteInterval": {
				"!type": "number"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setDateAnimated": {
				"!type": "fn(date: +Date, animated: bool) -> void"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIDatePicker"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIDatePicker"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDatePicker"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIDatePicker"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIDatePicker"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDatePicker"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIListContentTextProperties": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIListContentTextProperties"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIListContentTextProperties"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIListContentTextProperties"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"adjustsFontSizeToFitWidth": {
				"!type": "bool"
			},
			"allowsDefaultTighteningForTruncation": {
				"!type": "bool"
			},
			"lineBreakMode": {
				"!type": "number"
			},
			"color": {
				"!type": "+UIColor"
			},
			"transform": {
				"!type": "number"
			},
			"numberOfLines": {
				"!type": "number"
			},
			"jscolorTransformer": {
				"!type": "+Function"
			},
			"adjustsFontForContentSizeCategory": {
				"!type": "bool"
			},
			"minimumScaleFactor": {
				"!type": "number"
			},
			"font": {
				"!type": "+UIFont"
			},
			"alignment": {
				"!type": "number"
			},
			"resolvedColor": {
				"!type": "fn() -> +UIColor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIListContentTextProperties"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutYAxisAnchor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutYAxisAnchor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutYAxisAnchor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutYAxisAnchor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"anchorWithOffsetToAnchor": {
				"!type": "fn(otherAnchor: +NSLayoutYAxisAnchor) -> +NSLayoutDimension"
			},
			"constraintGreaterThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutYAxisAnchor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPopoverPresentationController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPopoverPresentationController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPopoverPresentationController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPopoverPresentationController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"sourceView": {
				"!type": "+UIView"
			},
			"popoverLayoutMargins": {
				"!type": "+Object"
			},
			"canOverlapSourceViewRect": {
				"!type": "bool"
			},
			"jspopoverBackgroundViewClass": {
				"!type": "+Object"
			},
			"sourceRect": {
				"!type": "+Object"
			},
			"barButtonItem": {
				"!type": "+UIBarButtonItem"
			},
			"arrowDirection": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"permittedArrowDirections": {
				"!type": "number"
			},
			"passthroughViews": {
				"!type": "+Array"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"adaptivePresentationStyle": {
				"!type": "number"
			},
			"frameOfPresentedViewInContainerView": {
				"!type": "+Object"
			},
			"presentationStyle": {
				"!type": "number"
			},
			"presentedView": {
				"!type": "+UIView"
			},
			"overrideTraitCollection": {
				"!type": "+UITraitCollection"
			},
			"shouldPresentInFullscreen": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"delegate": {
				"!type": "+Object"
			},
			"containerView": {
				"!type": "+UIView"
			},
			"shouldRemovePresentersView": {
				"!type": "bool"
			},
			"dismissalTransitionDidEnd": {
				"!type": "fn(completed: bool) -> void"
			},
			"containerViewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"containerViewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentationTransitionDidEnd": {
				"!type": "fn(completed: bool) -> void"
			},
			"presentationTransitionWillBegin": {
				"!type": "fn() -> void"
			},
			"adaptivePresentationStyleForTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> number"
			},
			"initWithPresentedViewControllerPresentingViewController": {
				"!type": "fn(presentedViewController: +UIViewController, presentingViewController: +UIViewController) -> +UIPopoverPresentationController"
			},
			"dismissalTransitionWillBegin": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPopoverPresentationController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewCompositionalLayout": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewCompositionalLayout"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewCompositionalLayout"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewCompositionalLayout"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"configuration": {
				"!type": "+UICollectionViewCompositionalLayoutConfiguration"
			},
			"collectionView": {
				"!type": "+UICollectionView"
			},
			"initWithSectionProviderConfiguration": {
				"!type": "fn(sectionProvider: +Function, configuration: +UICollectionViewCompositionalLayoutConfiguration) -> +UICollectionViewCompositionalLayout"
			},
			"initWithSectionConfiguration": {
				"!type": "fn(section: +NSCollectionLayoutSection, configuration: +UICollectionViewCompositionalLayoutConfiguration) -> +UICollectionViewCompositionalLayout"
			},
			"initWithSectionProvider": {
				"!type": "fn(sectionProvider: +Function) -> +UICollectionViewCompositionalLayout"
			},
			"initWithSection": {
				"!type": "fn(section: +NSCollectionLayoutSection) -> +UICollectionViewCompositionalLayout"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewCompositionalLayout"
			},
			"invalidateLayoutWithContext": {
				"!type": "fn(context: +UICollectionViewLayoutInvalidationContext) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewCompositionalLayout"
			},
			"registerNibForDecorationViewOfKind": {
				"!type": "fn(nib: +UINib, elementKind: string) -> void"
			},
			"invalidateLayout": {
				"!type": "fn() -> void"
			},
			"registerClassForDecorationViewOfKind": {
				"!type": "fn(viewClass: +Object, elementKind: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewCompositionalLayout"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFont": {
		"systemFontOfSizeWeight": {
			"!type": "fn(fontSize: number, weight: number) -> +UIFont"
		},
		"fontNamesForFamilyName": {
			"!type": "fn(familyName: string) -> +Array"
		},
		"fontWithNameSize": {
			"!type": "fn(fontName: string, fontSize: number) -> +UIFont"
		},
		"preferredFontForTextStyleCompatibleWithTraitCollection": {
			"!type": "fn(style: string, traitCollection: +UITraitCollection) -> +UIFont"
		},
		"boldSystemFontOfSize": {
			"!type": "fn(fontSize: number) -> +UIFont"
		},
		"fontWithDescriptorSize": {
			"!type": "fn(descriptor: +UIFontDescriptor, pointSize: number) -> +UIFont"
		},
		"italicSystemFontOfSize": {
			"!type": "fn(fontSize: number) -> +UIFont"
		},
		"monospacedSystemFontOfSizeWeight": {
			"!type": "fn(fontSize: number, weight: number) -> +UIFont"
		},
		"monospacedDigitSystemFontOfSizeWeight": {
			"!type": "fn(fontSize: number, weight: number) -> +UIFont"
		},
		"familyNames": {
			"!type": "fn() -> +Array"
		},
		"preferredFontForTextStyle": {
			"!type": "fn(style: string) -> +UIFont"
		},
		"systemFontOfSize": {
			"!type": "fn(fontSize: number) -> +UIFont"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFont"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFont"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFont"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"fontName": {
				"!type": "string"
			},
			"familyName": {
				"!type": "string"
			},
			"pointSize": {
				"!type": "number"
			},
			"fontDescriptor": {
				"!type": "+UIFontDescriptor"
			},
			"capHeight": {
				"!type": "number"
			},
			"leading": {
				"!type": "number"
			},
			"ascender": {
				"!type": "number"
			},
			"descender": {
				"!type": "number"
			},
			"xHeight": {
				"!type": "number"
			},
			"lineHeight": {
				"!type": "number"
			},
			"fontWithSize": {
				"!type": "fn(fontSize: number) -> +UIFont"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFont"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIBlendKernel": {
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIBlendKernel"
		},
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIBlendKernel"
		},
		"kernelNamesFromMetalLibraryData": {
			"!type": "fn(data: +NSData) -> +Array"
		},
		"kernelWithString": {
			"!type": "fn(string: string) -> +CIBlendKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError": {
			"!type": "fn(name: string, data: +NSData, format: number, error: +Object) -> +CIBlendKernel"
		},
		"kernelWithFunctionNameFromMetalLibraryDataError": {
			"!type": "fn(name: string, data: +NSData, error: +Object) -> +CIBlendKernel"
		},
		"kernelsWithString": {
			"!type": "fn(string: string) -> +Array"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIBlendKernel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIBlendKernel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIBlendKernel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"name": {
				"!type": "string"
			},
			"applyWithForegroundBackground": {
				"!type": "fn(foreground: +CIImage, background: +CIImage) -> +CIImage"
			},
			"applyWithForegroundBackgroundColorSpace": {
				"!type": "fn(foreground: +CIImage, background: +CIImage, colorSpace: +Object) -> +CIImage"
			},
			"applyWithExtentArguments": {
				"!type": "fn(extent: +Object, args: +Array) -> +CIImage"
			},
			"applyWithExtentRoiCallbackArguments": {
				"!type": "fn(extent: +Object, callback: +Function, args: +Array) -> +CIImage"
			},
			"setROISelector": {
				"!type": "fn(method: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIBlendKernel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImageView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImageView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImageView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImageView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"highlighted": {
				"!type": "bool"
			},
			"highlightedAnimationImages": {
				"!type": "+Array"
			},
			"image": {
				"!type": "+UIImage"
			},
			"animationImages": {
				"!type": "+Array"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"highlightedImage": {
				"!type": "+UIImage"
			},
			"preferredSymbolConfiguration": {
				"!type": "+UIImageSymbolConfiguration"
			},
			"animationDuration": {
				"!type": "number"
			},
			"animating": {
				"!type": "bool"
			},
			"animationRepeatCount": {
				"!type": "number"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"startAnimating": {
				"!type": "fn() -> void"
			},
			"initWithImageHighlightedImage": {
				"!type": "fn(image: +UIImage, highlightedImage: +UIImage) -> +UIImageView"
			},
			"stopAnimating": {
				"!type": "fn() -> void"
			},
			"initWithImage": {
				"!type": "fn(image: +UIImage) -> +UIImageView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIImageView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIImageView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImageView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UINotificationFeedbackGenerator": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UINotificationFeedbackGenerator"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UINotificationFeedbackGenerator"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UINotificationFeedbackGenerator"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"notificationOccurred": {
				"!type": "fn(notificationType: number) -> void"
			},
			"prepare": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UINotificationFeedbackGenerator"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITraitCollection": {
		"traitCollectionWithLayoutDirection": {
			"!type": "fn(layoutDirection: number) -> +UITraitCollection"
		},
		"traitCollectionWithTraitsFromCollections": {
			"!type": "fn(traitCollections: +Array) -> +UITraitCollection"
		},
		"traitCollectionWithDisplayScale": {
			"!type": "fn(scale: number) -> +UITraitCollection"
		},
		"traitCollectionWithUserInterfaceStyle": {
			"!type": "fn(userInterfaceStyle: number) -> +UITraitCollection"
		},
		"traitCollectionWithUserInterfaceLevel": {
			"!type": "fn(userInterfaceLevel: number) -> +UITraitCollection"
		},
		"traitCollectionWithForceTouchCapability": {
			"!type": "fn(capability: number) -> +UITraitCollection"
		},
		"traitCollectionWithAccessibilityContrast": {
			"!type": "fn(accessibilityContrast: number) -> +UITraitCollection"
		},
		"traitCollectionWithUserInterfaceIdiom": {
			"!type": "fn(idiom: number) -> +UITraitCollection"
		},
		"traitCollectionWithLegibilityWeight": {
			"!type": "fn(legibilityWeight: number) -> +UITraitCollection"
		},
		"traitCollectionWithHorizontalSizeClass": {
			"!type": "fn(horizontalSizeClass: number) -> +UITraitCollection"
		},
		"traitCollectionWithVerticalSizeClass": {
			"!type": "fn(verticalSizeClass: number) -> +UITraitCollection"
		},
		"traitCollectionWithDisplayGamut": {
			"!type": "fn(displayGamut: number) -> +UITraitCollection"
		},
		"traitCollectionWithActiveAppearance": {
			"!type": "fn(userInterfaceActiveAppearance: number) -> +UITraitCollection"
		},
		"traitCollectionWithPreferredContentSizeCategory": {
			"!type": "fn(preferredContentSizeCategory: string) -> +UITraitCollection"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITraitCollection"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITraitCollection"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITraitCollection"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"userInterfaceLevel": {
				"!type": "number"
			},
			"accessibilityContrast": {
				"!type": "number"
			},
			"forceTouchCapability": {
				"!type": "number"
			},
			"layoutDirection": {
				"!type": "number"
			},
			"verticalSizeClass": {
				"!type": "number"
			},
			"userInterfaceIdiom": {
				"!type": "number"
			},
			"horizontalSizeClass": {
				"!type": "number"
			},
			"displayGamut": {
				"!type": "number"
			},
			"userInterfaceStyle": {
				"!type": "number"
			},
			"activeAppearance": {
				"!type": "number"
			},
			"displayScale": {
				"!type": "number"
			},
			"preferredContentSizeCategory": {
				"!type": "string"
			},
			"legibilityWeight": {
				"!type": "number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITraitCollection"
			},
			"containsTraitsInCollection": {
				"!type": "fn(trait: +UITraitCollection) -> bool"
			},
			"jsinit": {
				"!type": "fn() -> +UITraitCollection"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITraitCollection"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSError": {
		"errorWithDomainCodeUserInfo": {
			"!type": "fn(domain: string, code: number, dict: +Object) -> +NSError"
		},
		"setUserInfoValueProviderForDomainProvider": {
			"!type": "fn(errorDomain: string, provider: +Function) -> void"
		},
		"userInfoValueProviderForDomain": {
			"!type": "fn(errorDomain: string) -> +Function"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSError"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSError"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSError"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"recoveryAttempter": {
				"!type": "+Object"
			},
			"domain": {
				"!type": "string"
			},
			"code": {
				"!type": "number"
			},
			"localizedDescription": {
				"!type": "string"
			},
			"localizedFailureReason": {
				"!type": "string"
			},
			"localizedRecoveryOptions": {
				"!type": "+Array"
			},
			"helpAnchor": {
				"!type": "string"
			},
			"localizedRecoverySuggestion": {
				"!type": "string"
			},
			"userInfo": {
				"!type": "+Object"
			},
			"initWithDomainCodeUserInfo": {
				"!type": "fn(domain: string, code: number, dict: +Object) -> +NSError"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSError"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSAutoreleasePool": {
		"addObject": {
			"!type": "fn(anObject: +Object) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSAutoreleasePool"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSAutoreleasePool"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSAutoreleasePool"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"addObject": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"drain": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSAutoreleasePool"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKOverlayConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKOverlayConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKOverlayConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKOverlayConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKOverlayConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISwipeGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISwipeGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISwipeGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISwipeGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"direction": {
				"!type": "number"
			},
			"numberOfTouchesRequired": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISwipeGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISwipeGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UISwipeGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISwipeGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableViewPlaceholder": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableViewPlaceholder"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableViewPlaceholder"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableViewPlaceholder"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jscellUpdateHandler": {
				"!type": "+Function"
			},
			"initWithInsertionIndexPathReuseIdentifierRowHeight": {
				"!type": "fn(insertionIndexPath: +NSIndexPath, reuseIdentifier: string, rowHeight: number) -> +UITableViewPlaceholder"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableViewPlaceholder"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAcceleration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAcceleration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAcceleration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAcceleration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"y": {
				"!type": "number"
			},
			"timestamp": {
				"!type": "number"
			},
			"z": {
				"!type": "number"
			},
			"x": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAcceleration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutSupplementaryItem": {
		"supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, containerAnchor: +NSCollectionLayoutAnchor, itemAnchor: +NSCollectionLayoutAnchor) -> +NSCollectionLayoutSupplementaryItem"
		},
		"supplementaryItemWithLayoutSizeElementKindContainerAnchor": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, elementKind: string, containerAnchor: +NSCollectionLayoutAnchor) -> +NSCollectionLayoutSupplementaryItem"
		},
		"itemWithLayoutSize": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize) -> +NSCollectionLayoutSupplementaryItem"
		},
		"itemWithLayoutSizeSupplementaryItems": {
			"!type": "fn(layoutSize: +NSCollectionLayoutSize, supplementaryItems: +Array) -> +NSCollectionLayoutSupplementaryItem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutSupplementaryItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutSupplementaryItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutSupplementaryItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"zIndex": {
				"!type": "number"
			},
			"itemAnchor": {
				"!type": "+NSCollectionLayoutAnchor"
			},
			"elementKind": {
				"!type": "string"
			},
			"containerAnchor": {
				"!type": "+NSCollectionLayoutAnchor"
			},
			"contentInsets": {
				"!type": "+Object"
			},
			"edgeSpacing": {
				"!type": "+NSCollectionLayoutEdgeSpacing"
			},
			"supplementaryItems": {
				"!type": "+Array"
			},
			"layoutSize": {
				"!type": "+NSCollectionLayoutSize"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutSupplementaryItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImage": {
		"imageWithCIImageScaleOrientation": {
			"!type": "fn(ciImage: +CIImage, scale: number, orientation: number) -> +UIImage"
		},
		"systemImageNamedCompatibleWithTraitCollection": {
			"!type": "fn(name: string, traitCollection: +UITraitCollection) -> +UIImage"
		},
		"imageWithDataScale": {
			"!type": "fn(data: +NSData, scale: number) -> +UIImage"
		},
		"imageWithData": {
			"!type": "fn(data: +NSData) -> +UIImage"
		},
		"imageNamedInBundleWithConfiguration": {
			"!type": "fn(name: string, bundle: +NSBundle, configuration: +UIImageConfiguration) -> +UIImage"
		},
		"animatedResizableImageNamedCapInsetsDuration": {
			"!type": "fn(name: string, capInsets: +Object, duration: number) -> +UIImage"
		},
		"animatedResizableImageNamedCapInsetsResizingModeDuration": {
			"!type": "fn(name: string, capInsets: +Object, resizingMode: number, duration: number) -> +UIImage"
		},
		"imageNamedInBundleCompatibleWithTraitCollection": {
			"!type": "fn(name: string, bundle: +NSBundle, traitCollection: +UITraitCollection) -> +UIImage"
		},
		"animatedImageNamedDuration": {
			"!type": "fn(name: string, duration: number) -> +UIImage"
		},
		"systemImageNamedWithConfiguration": {
			"!type": "fn(name: string, configuration: +UIImageConfiguration) -> +UIImage"
		},
		"imageWithCGImage": {
			"!type": "fn(cgImage: +Object) -> +UIImage"
		},
		"imageWithContentsOfFile": {
			"!type": "fn(path: string) -> +UIImage"
		},
		"systemImageNamed": {
			"!type": "fn(name: string) -> +UIImage"
		},
		"imageWithCIImage": {
			"!type": "fn(ciImage: +CIImage) -> +UIImage"
		},
		"imageNamed": {
			"!type": "fn(name: string) -> +UIImage"
		},
		"animatedImageWithImagesDuration": {
			"!type": "fn(images: +Array, duration: number) -> +UIImage"
		},
		"imageWithCGImageScaleOrientation": {
			"!type": "fn(cgImage: +Object, scale: number, orientation: number) -> +UIImage"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"symbolImage": {
				"!type": "bool"
			},
			"CGImage": {
				"!type": "+Object"
			},
			"scale": {
				"!type": "number"
			},
			"alignmentRectInsets": {
				"!type": "+Object"
			},
			"resizingMode": {
				"!type": "number"
			},
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"CIImage": {
				"!type": "+CIImage"
			},
			"imageAsset": {
				"!type": "+UIImageAsset"
			},
			"flipsForRightToLeftLayoutDirection": {
				"!type": "bool"
			},
			"duration": {
				"!type": "number"
			},
			"imageOrientation": {
				"!type": "number"
			},
			"imageRendererFormat": {
				"!type": "+UIGraphicsImageRendererFormat"
			},
			"symbolConfiguration": {
				"!type": "+UIImageSymbolConfiguration"
			},
			"capInsets": {
				"!type": "+Object"
			},
			"images": {
				"!type": "+Array"
			},
			"renderingMode": {
				"!type": "number"
			},
			"configuration": {
				"!type": "+UIImageConfiguration"
			},
			"baselineOffsetFromBottom": {
				"!type": "number"
			},
			"hasBaseline": {
				"!type": "bool"
			},
			"size": {
				"!type": "+Object"
			},
			"CGImage": {
				"!type": "fn() -> +Object"
			},
			"initWithCGImageScaleOrientation": {
				"!type": "fn(cgImage: +Object, scale: number, orientation: number) -> +UIImage"
			},
			"imageFlippedForRightToLeftLayoutDirection": {
				"!type": "fn() -> +UIImage"
			},
			"drawAtPoint": {
				"!type": "fn(point: +Object) -> void"
			},
			"imageWithAlignmentRectInsets": {
				"!type": "fn(alignmentInsets: +Object) -> +UIImage"
			},
			"initWithCIImage": {
				"!type": "fn(ciImage: +CIImage) -> +UIImage"
			},
			"drawAtPointBlendModeAlpha": {
				"!type": "fn(point: +Object, blendMode: number, alpha: number) -> void"
			},
			"drawInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"imageWithTintColorRenderingMode": {
				"!type": "fn(color: +UIColor, renderingMode: number) -> +UIImage"
			},
			"imageWithRenderingMode": {
				"!type": "fn(renderingMode: number) -> +UIImage"
			},
			"imageWithConfiguration": {
				"!type": "fn(configuration: +UIImageConfiguration) -> +UIImage"
			},
			"resizableImageWithCapInsetsResizingMode": {
				"!type": "fn(capInsets: +Object, resizingMode: number) -> +UIImage"
			},
			"drawAsPatternInRect": {
				"!type": "fn(rect: +Object) -> void"
			},
			"initWithData": {
				"!type": "fn(data: +NSData) -> +UIImage"
			},
			"initWithCIImageScaleOrientation": {
				"!type": "fn(ciImage: +CIImage, scale: number, orientation: number) -> +UIImage"
			},
			"imageWithHorizontallyFlippedOrientation": {
				"!type": "fn() -> +UIImage"
			},
			"imageWithoutBaseline": {
				"!type": "fn() -> +UIImage"
			},
			"initWithCGImage": {
				"!type": "fn(cgImage: +Object) -> +UIImage"
			},
			"initWithContentsOfFile": {
				"!type": "fn(path: string) -> +UIImage"
			},
			"imageWithTintColor": {
				"!type": "fn(color: +UIColor) -> +UIImage"
			},
			"imageByApplyingSymbolConfiguration": {
				"!type": "fn(configuration: +UIImageSymbolConfiguration) -> +UIImage"
			},
			"resizableImageWithCapInsets": {
				"!type": "fn(capInsets: +Object) -> +UIImage"
			},
			"imageWithBaselineOffsetFromBottom": {
				"!type": "fn(baselineOffset: number) -> +UIImage"
			},
			"drawInRectBlendModeAlpha": {
				"!type": "fn(rect: +Object, blendMode: number, alpha: number) -> void"
			},
			"initWithDataScale": {
				"!type": "fn(data: +NSData, scale: number) -> +UIImage"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewListCell": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewListCell"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewListCell"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewListCell"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"accessories": {
				"!type": "+Array"
			},
			"indentationWidth": {
				"!type": "number"
			},
			"indentationLevel": {
				"!type": "number"
			},
			"separatorLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"indentsAccessories": {
				"!type": "bool"
			},
			"backgroundView": {
				"!type": "+UIView"
			},
			"contentView": {
				"!type": "+UIView"
			},
			"automaticallyUpdatesBackgroundConfiguration": {
				"!type": "bool"
			},
			"contentConfiguration": {
				"!type": "+Object"
			},
			"selectedBackgroundView": {
				"!type": "+UIView"
			},
			"selected": {
				"!type": "bool"
			},
			"automaticallyUpdatesContentConfiguration": {
				"!type": "bool"
			},
			"backgroundConfiguration": {
				"!type": "+UIBackgroundConfiguration"
			},
			"configurationState": {
				"!type": "+UICellConfigurationState"
			},
			"highlighted": {
				"!type": "bool"
			},
			"reuseIdentifier": {
				"!type": "string"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"defaultContentConfiguration": {
				"!type": "fn() -> +UIListContentConfiguration"
			},
			"updateConfigurationUsingState": {
				"!type": "fn(state: +UICellConfigurationState) -> void"
			},
			"setNeedsUpdateConfiguration": {
				"!type": "fn() -> void"
			},
			"dragStateDidChange": {
				"!type": "fn(dragState: number) -> void"
			},
			"prepareForReuse": {
				"!type": "fn() -> void"
			},
			"preferredLayoutAttributesFittingAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> +UICollectionViewLayoutAttributes"
			},
			"applyLayoutAttributes": {
				"!type": "fn(layoutAttributes: +UICollectionViewLayoutAttributes) -> void"
			},
			"willTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"didTransitionFromLayoutToLayout": {
				"!type": "fn(oldLayout: +UICollectionViewLayout, newLayout: +UICollectionViewLayout) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICollectionViewListCell"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UICollectionViewListCell"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewListCell"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIControl": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIControl"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIControl"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIControl"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UIControl"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIControl"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIControl"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIControl"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIControl"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIControl"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerHighlightEffect": {
		"effectWithPreview": {
			"!type": "fn(preview: +UITargetedPreview) -> +UIPointerHighlightEffect"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerHighlightEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerHighlightEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerHighlightEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"preview": {
				"!type": "+UITargetedPreview"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerHighlightEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMotionEffect": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMotionEffect"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMotionEffect"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMotionEffect"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"keyPathsAndRelativeValuesForViewerOffset": {
				"!type": "fn(viewerOffset: +Object) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMotionEffect"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIMotionEffect"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMotionEffect"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIMenuSystem": {
		"contextSystem": {
			"!type": "fn() -> +UIMenuSystem"
		},
		"mainSystem": {
			"!type": "fn() -> +UIMenuSystem"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIMenuSystem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIMenuSystem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIMenuSystem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"setNeedsRevalidate": {
				"!type": "fn() -> void"
			},
			"setNeedsRebuild": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIMenuSystem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSArray": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +Array"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +Array"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +Array"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"count": {
				"!type": "number"
			},
			"objectAtIndex": {
				"!type": "fn(index: number) -> +Object"
			},
			"initWithObjectsCount": {
				"!type": "fn(objects: +Object, cnt: number) -> +Array"
			},
			"jsinit": {
				"!type": "fn() -> +Array"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +Array"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileManager": {
		"defaultManager": {
			"!type": "fn() -> +NSFileManager"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileManager"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileManager"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileManager"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"ubiquityIdentityToken": {
				"!type": "+Object"
			},
			"currentDirectoryPath": {
				"!type": "string"
			},
			"delegate": {
				"!type": "+Object"
			},
			"contentsOfDirectoryAtPathError": {
				"!type": "fn(path: string, error: +Object) -> +Array"
			},
			"isWritableFileAtPath": {
				"!type": "fn(path: string) -> bool"
			},
			"attributesOfItemAtPathError": {
				"!type": "fn(path: string, error: +Object) -> +Object"
			},
			"fileAttributesAtPathTraverseLink": {
				"!type": "fn(path: string, yorn: bool) -> +Object"
			},
			"removeItemAtPathError": {
				"!type": "fn(path: string, error: +Object) -> bool"
			},
			"URLsForDirectoryInDomains": {
				"!type": "fn(directory: number, domainMask: number) -> +Array"
			},
			"createDirectoryAtURLWithIntermediateDirectoriesAttributesError": {
				"!type": "fn(url: +NSURL, createIntermediates: bool, attributes: +Object, error: +Object) -> bool"
			},
			"mountedVolumeURLsIncludingResourceValuesForKeysOptions": {
				"!type": "fn(propertyKeys: +Array, options: number) -> +Array"
			},
			"displayNameAtPath": {
				"!type": "fn(path: string) -> string"
			},
			"createSymbolicLinkAtPathWithDestinationPathError": {
				"!type": "fn(path: string, destPath: string, error: +Object) -> bool"
			},
			"enumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler": {
				"!type": "fn(url: +NSURL, keys: +Array, mask: number, handler: +Function) -> +NSDirectoryEnumerator"
			},
			"URLForPublishingUbiquitousItemAtURLExpirationDateError": {
				"!type": "fn(url: +NSURL, outDate: +Object, error: +Object) -> +NSURL"
			},
			"destinationOfSymbolicLinkAtPathError": {
				"!type": "fn(path: string, error: +Object) -> string"
			},
			"containerURLForSecurityApplicationGroupIdentifier": {
				"!type": "fn(groupIdentifier: string) -> +NSURL"
			},
			"linkItemAtURLToURLError": {
				"!type": "fn(srcURL: +NSURL, dstURL: +NSURL, error: +Object) -> bool"
			},
			"URLForUbiquityContainerIdentifier": {
				"!type": "fn(containerIdentifier: string) -> +NSURL"
			},
			"linkItemAtPathToPathError": {
				"!type": "fn(srcPath: string, dstPath: string, error: +Object) -> bool"
			},
			"setAttributesOfItemAtPathError": {
				"!type": "fn(attributes: +Object, path: string, error: +Object) -> bool"
			},
			"trashItemAtURLResultingItemURLError": {
				"!type": "fn(url: +NSURL, outResultingURL: +Object, error: +Object) -> bool"
			},
			"isUbiquitousItemAtURL": {
				"!type": "fn(url: +NSURL) -> bool"
			},
			"copyItemAtURLToURLError": {
				"!type": "fn(srcURL: +NSURL, dstURL: +NSURL, error: +Object) -> bool"
			},
			"pathContentOfSymbolicLinkAtPath": {
				"!type": "fn(path: string) -> string"
			},
			"moveItemAtPathToPathError": {
				"!type": "fn(srcPath: string, dstPath: string, error: +Object) -> bool"
			},
			"isReadableFileAtPath": {
				"!type": "fn(path: string) -> bool"
			},
			"getFileProviderServicesForItemAtURLCompletionHandler": {
				"!type": "fn(url: +NSURL, completionHandler: +Function) -> void"
			},
			"contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError": {
				"!type": "fn(url: +NSURL, keys: +Array, mask: number, error: +Object) -> +Array"
			},
			"changeCurrentDirectoryPath": {
				"!type": "fn(path: string) -> bool"
			},
			"stringWithFileSystemRepresentationLength": {
				"!type": "fn(str: +Object, len: number) -> string"
			},
			"fileSystemAttributesAtPath": {
				"!type": "fn(path: string) -> +Object"
			},
			"URLForDirectoryInDomainAppropriateForURLCreateError": {
				"!type": "fn(directory: number, domain: number, url: +NSURL, shouldCreate: bool, error: +Object) -> +NSURL"
			},
			"startDownloadingUbiquitousItemAtURLError": {
				"!type": "fn(url: +NSURL, error: +Object) -> bool"
			},
			"copyItemAtPathToPathError": {
				"!type": "fn(srcPath: string, dstPath: string, error: +Object) -> bool"
			},
			"evictUbiquitousItemAtURLError": {
				"!type": "fn(url: +NSURL, error: +Object) -> bool"
			},
			"subpathsAtPath": {
				"!type": "fn(path: string) -> +Array"
			},
			"createSymbolicLinkAtPathPathContent": {
				"!type": "fn(path: string, otherpath: string) -> bool"
			},
			"componentsToDisplayForPath": {
				"!type": "fn(path: string) -> +Array"
			},
			"setUbiquitousItemAtURLDestinationURLError": {
				"!type": "fn(flag: bool, url: +NSURL, destinationURL: +NSURL, error: +Object) -> bool"
			},
			"enumeratorAtPath": {
				"!type": "fn(path: string) -> +NSDirectoryEnumerator"
			},
			"isExecutableFileAtPath": {
				"!type": "fn(path: string) -> bool"
			},
			"fileExistsAtPathIsDirectory": {
				"!type": "fn(path: string, isDirectory: +Object) -> bool"
			},
			"changeFileAttributesAtPath": {
				"!type": "fn(attributes: +Object, path: string) -> bool"
			},
			"fileExistsAtPath": {
				"!type": "fn(path: string) -> bool"
			},
			"isDeletableFileAtPath": {
				"!type": "fn(path: string) -> bool"
			},
			"contentsAtPath": {
				"!type": "fn(path: string) -> +NSData"
			},
			"fileSystemRepresentationWithPath": {
				"!type": "fn(path: string) -> +Object"
			},
			"removeItemAtURLError": {
				"!type": "fn(URL: +NSURL, error: +Object) -> bool"
			},
			"moveItemAtURLToURLError": {
				"!type": "fn(srcURL: +NSURL, dstURL: +NSURL, error: +Object) -> bool"
			},
			"createDirectoryAtPathAttributes": {
				"!type": "fn(path: string, attributes: +Object) -> bool"
			},
			"directoryContentsAtPath": {
				"!type": "fn(path: string) -> +Array"
			},
			"getRelationshipOfDirectoryInDomainToItemAtURLError": {
				"!type": "fn(outRelationship: +Object, directory: number, domainMask: number, url: +NSURL, error: +Object) -> bool"
			},
			"attributesOfFileSystemForPathError": {
				"!type": "fn(path: string, error: +Object) -> +Object"
			},
			"createFileAtPathContentsAttributes": {
				"!type": "fn(path: string, data: +NSData, attr: +Object) -> bool"
			},
			"createSymbolicLinkAtURLWithDestinationURLError": {
				"!type": "fn(url: +NSURL, destURL: +NSURL, error: +Object) -> bool"
			},
			"subpathsOfDirectoryAtPathError": {
				"!type": "fn(path: string, error: +Object) -> +Array"
			},
			"createDirectoryAtPathWithIntermediateDirectoriesAttributesError": {
				"!type": "fn(path: string, createIntermediates: bool, attributes: +Object, error: +Object) -> bool"
			},
			"getRelationshipOfDirectoryAtURLToItemAtURLError": {
				"!type": "fn(outRelationship: +Object, directoryURL: +NSURL, otherURL: +NSURL, error: +Object) -> bool"
			},
			"replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError": {
				"!type": "fn(originalItemURL: +NSURL, newItemURL: +NSURL, backupItemName: string, options: number, resultingURL: +Object, error: +Object) -> bool"
			},
			"contentsEqualAtPathAndPath": {
				"!type": "fn(path1: string, path2: string) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileManager"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CAScrollLayer": {
		"defaultValueForKey": {
			"!type": "fn(key: string) -> +Object"
		},
		"layer": {
			"!type": "fn() -> +CAScrollLayer"
		},
		"cornerCurveExpansionFactor": {
			"!type": "fn(curve: string) -> number"
		},
		"needsDisplayForKey": {
			"!type": "fn(key: string) -> bool"
		},
		"defaultActionForKey": {
			"!type": "fn(event: string) -> +Object"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CAScrollLayer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CAScrollLayer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CAScrollLayer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"scrollMode": {
				"!type": "string"
			},
			"contentsFormat": {
				"!type": "string"
			},
			"superlayer": {
				"!type": "+CALayer"
			},
			"mask": {
				"!type": "+CALayer"
			},
			"frame": {
				"!type": "+Object"
			},
			"actions": {
				"!type": "+Object"
			},
			"allowsEdgeAntialiasing": {
				"!type": "bool"
			},
			"filters": {
				"!type": "+Array"
			},
			"doubleSided": {
				"!type": "bool"
			},
			"shadowRadius": {
				"!type": "number"
			},
			"compositingFilter": {
				"!type": "+Object"
			},
			"contents": {
				"!type": "+Object"
			},
			"borderColor": {
				"!type": "+Object"
			},
			"style": {
				"!type": "+Object"
			},
			"rasterizationScale": {
				"!type": "number"
			},
			"backgroundFilters": {
				"!type": "+Array"
			},
			"shadowOpacity": {
				"!type": "number"
			},
			"magnificationFilter": {
				"!type": "string"
			},
			"opaque": {
				"!type": "bool"
			},
			"transform": {
				"!type": "+Object"
			},
			"minificationFilter": {
				"!type": "string"
			},
			"shadowColor": {
				"!type": "+Object"
			},
			"contentsCenter": {
				"!type": "+Object"
			},
			"contentsScale": {
				"!type": "number"
			},
			"masksToBounds": {
				"!type": "bool"
			},
			"zPosition": {
				"!type": "number"
			},
			"shadowPath": {
				"!type": "+Object"
			},
			"borderWidth": {
				"!type": "number"
			},
			"opacity": {
				"!type": "number"
			},
			"needsDisplayOnBoundsChange": {
				"!type": "bool"
			},
			"edgeAntialiasingMask": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+Object"
			},
			"cornerCurve": {
				"!type": "string"
			},
			"allowsGroupOpacity": {
				"!type": "bool"
			},
			"maskedCorners": {
				"!type": "number"
			},
			"cornerRadius": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"shadowOffset": {
				"!type": "+Object"
			},
			"anchorPointZ": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"anchorPoint": {
				"!type": "+Object"
			},
			"name": {
				"!type": "string"
			},
			"geometryFlipped": {
				"!type": "bool"
			},
			"drawsAsynchronously": {
				"!type": "bool"
			},
			"contentsRect": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"minificationFilterBias": {
				"!type": "number"
			},
			"sublayers": {
				"!type": "+Array"
			},
			"contentsGravity": {
				"!type": "string"
			},
			"position": {
				"!type": "+Object"
			},
			"sublayerTransform": {
				"!type": "+Object"
			},
			"shouldRasterize": {
				"!type": "bool"
			},
			"scrollToRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"scrollToPoint": {
				"!type": "fn(p: +Object) -> void"
			},
			"hitTest": {
				"!type": "fn(p: +Object) -> +CALayer"
			},
			"displayIfNeeded": {
				"!type": "fn() -> void"
			},
			"insertSublayerBelow": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"setAffineTransform": {
				"!type": "fn(m: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CAScrollLayer"
			},
			"convertPointFromLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"convertPointToLayer": {
				"!type": "fn(p: +Object, l: +CALayer) -> +Object"
			},
			"layoutSublayers": {
				"!type": "fn() -> void"
			},
			"removeAnimationForKey": {
				"!type": "fn(key: string) -> void"
			},
			"affineTransform": {
				"!type": "fn() -> +Object"
			},
			"actionForKey": {
				"!type": "fn(event: string) -> +Object"
			},
			"convertTimeToLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"shouldArchiveValueForKey": {
				"!type": "fn(key: string) -> bool"
			},
			"animationForKey": {
				"!type": "fn(key: string) -> +CAAnimation"
			},
			"animationKeys": {
				"!type": "fn() -> +Array"
			},
			"convertRectFromLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"display": {
				"!type": "fn() -> void"
			},
			"removeAllAnimations": {
				"!type": "fn() -> void"
			},
			"needsDisplay": {
				"!type": "fn() -> bool"
			},
			"needsLayout": {
				"!type": "fn() -> bool"
			},
			"drawInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"initWithLayer": {
				"!type": "fn(layer: +Object) -> +CAScrollLayer"
			},
			"addAnimationForKey": {
				"!type": "fn(anim: +CAAnimation, key: string) -> void"
			},
			"setNeedsLayout": {
				"!type": "fn() -> void"
			},
			"removeFromSuperlayer": {
				"!type": "fn() -> void"
			},
			"replaceSublayerWith": {
				"!type": "fn(oldLayer: +CALayer, newLayer: +CALayer) -> void"
			},
			"presentationLayer": {
				"!type": "fn() -> +CAScrollLayer"
			},
			"setNeedsDisplayInRect": {
				"!type": "fn(r: +Object) -> void"
			},
			"convertTimeFromLayer": {
				"!type": "fn(t: number, l: +CALayer) -> number"
			},
			"setNeedsDisplay": {
				"!type": "fn() -> void"
			},
			"insertSublayerAtIndex": {
				"!type": "fn(layer: +CALayer, idx: number) -> void"
			},
			"layoutIfNeeded": {
				"!type": "fn() -> void"
			},
			"modelLayer": {
				"!type": "fn() -> +CAScrollLayer"
			},
			"containsPoint": {
				"!type": "fn(p: +Object) -> bool"
			},
			"contentsAreFlipped": {
				"!type": "fn() -> bool"
			},
			"insertSublayerAbove": {
				"!type": "fn(layer: +CALayer, sibling: +CALayer) -> void"
			},
			"addSublayer": {
				"!type": "fn(layer: +CALayer) -> void"
			},
			"convertRectToLayer": {
				"!type": "fn(r: +Object, l: +CALayer) -> +Object"
			},
			"renderInContext": {
				"!type": "fn(ctx: +Object) -> void"
			},
			"preferredFrameSize": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CAScrollLayer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScreenEdgePanGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScreenEdgePanGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScreenEdgePanGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScreenEdgePanGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"edges": {
				"!type": "number"
			},
			"maximumNumberOfTouches": {
				"!type": "number"
			},
			"minimumNumberOfTouches": {
				"!type": "number"
			},
			"allowedScrollTypesMask": {
				"!type": "number"
			},
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"velocityInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"setTranslationInView": {
				"!type": "fn(translation: +Object, view: +UIView) -> void"
			},
			"translationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScreenEdgePanGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIScreenEdgePanGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIScreenEdgePanGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScreenEdgePanGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitFrequency": {
		"megahertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"microhertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"hertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"terahertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"nanohertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"framesPerSecond": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"gigahertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"millihertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"kilohertz": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitFrequency"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitFrequency"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitFrequency"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitFrequency"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitFrequency"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIInputView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIInputView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIInputView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIInputView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"inputViewStyle": {
				"!type": "number"
			},
			"allowsSelfSizing": {
				"!type": "bool"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithFrameInputViewStyle": {
				"!type": "fn(frame: +Object, inputViewStyle: number) -> +UIInputView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIInputView"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIInputView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UIInputView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIInputView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSHTTPCookieStorage": {
		"sharedHTTPCookieStorage": {
			"!type": "fn() -> +NSHTTPCookieStorage"
		},
		"sharedCookieStorageForGroupContainerIdentifier": {
			"!type": "fn(identifier: string) -> +NSHTTPCookieStorage"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSHTTPCookieStorage"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSHTTPCookieStorage"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSHTTPCookieStorage"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cookies": {
				"!type": "+Array"
			},
			"cookieAcceptPolicy": {
				"!type": "number"
			},
			"deleteCookie": {
				"!type": "fn(cookie: +NSHTTPCookie) -> void"
			},
			"setCookie": {
				"!type": "fn(cookie: +NSHTTPCookie) -> void"
			},
			"removeCookiesSinceDate": {
				"!type": "fn(date: +Date) -> void"
			},
			"sortedCookiesUsingDescriptors": {
				"!type": "fn(sortOrder: +Array) -> +Array"
			},
			"cookiesForURL": {
				"!type": "fn(URL: +NSURL) -> +Array"
			},
			"setCookiesForURLMainDocumentURL": {
				"!type": "fn(cookies: +Array, URL: +NSURL, mainDocumentURL: +NSURL) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSHTTPCookieStorage"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPointerFunctions": {
		"pointerFunctionsWithOptions": {
			"!type": "fn(options: number) -> +NSPointerFunctions"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPointerFunctions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPointerFunctions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPointerFunctions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"usesStrongWriteBarrier": {
				"!type": "bool"
			},
			"usesWeakReadAndWriteBarriers": {
				"!type": "bool"
			},
			"initWithOptions": {
				"!type": "fn(options: number) -> +NSPointerFunctions"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPointerFunctions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKPaymentQueue": {
		"canMakePayments": {
			"!type": "fn() -> bool"
		},
		"defaultQueue": {
			"!type": "fn() -> +SKPaymentQueue"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKPaymentQueue"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKPaymentQueue"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKPaymentQueue"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"transactions": {
				"!type": "+Array"
			},
			"delegate": {
				"!type": "+Object"
			},
			"storefront": {
				"!type": "+SKStorefront"
			},
			"transactionObservers": {
				"!type": "+Array"
			},
			"cancelDownloads": {
				"!type": "fn(downloads: +Array) -> void"
			},
			"addPayment": {
				"!type": "fn(payment: +SKPayment) -> void"
			},
			"restoreCompletedTransactions": {
				"!type": "fn() -> void"
			},
			"presentCodeRedemptionSheet": {
				"!type": "fn() -> void"
			},
			"finishTransaction": {
				"!type": "fn(transaction: +SKPaymentTransaction) -> void"
			},
			"removeTransactionObserver": {
				"!type": "fn(observer: +Object) -> void"
			},
			"showPriceConsentIfNeeded": {
				"!type": "fn() -> void"
			},
			"restoreCompletedTransactionsWithApplicationUsername": {
				"!type": "fn(username: string) -> void"
			},
			"startDownloads": {
				"!type": "fn(downloads: +Array) -> void"
			},
			"resumeDownloads": {
				"!type": "fn(downloads: +Array) -> void"
			},
			"pauseDownloads": {
				"!type": "fn(downloads: +Array) -> void"
			},
			"addTransactionObserver": {
				"!type": "fn(observer: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKPaymentQueue"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCollectionLayoutSize": {
		"sizeWithWidthDimensionHeightDimension": {
			"!type": "fn(width: +NSCollectionLayoutDimension, height: +NSCollectionLayoutDimension) -> +NSCollectionLayoutSize"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCollectionLayoutSize"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCollectionLayoutSize"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCollectionLayoutSize"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"heightDimension": {
				"!type": "+NSCollectionLayoutDimension"
			},
			"widthDimension": {
				"!type": "+NSCollectionLayoutDimension"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCollectionLayoutSize"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSRunLoop": {
		"mainRunLoop": {
			"!type": "fn() -> +NSRunLoop"
		},
		"currentRunLoop": {
			"!type": "fn() -> +NSRunLoop"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSRunLoop"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSRunLoop"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSRunLoop"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"currentMode": {
				"!type": "string"
			},
			"limitDateForMode": {
				"!type": "fn(mode: string) -> +Date"
			},
			"getCFRunLoop": {
				"!type": "fn() -> +Object"
			},
			"addTimerForMode": {
				"!type": "fn(timer: +NSTimer, mode: string) -> void"
			},
			"addPortForMode": {
				"!type": "fn(aPort: +NSPort, mode: string) -> void"
			},
			"acceptInputForModeBeforeDate": {
				"!type": "fn(mode: string, limitDate: +Date) -> void"
			},
			"removePortForMode": {
				"!type": "fn(aPort: +NSPort, mode: string) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSRunLoop"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSFileAccessIntent": {
		"writingIntentWithURLOptions": {
			"!type": "fn(url: +NSURL, options: number) -> +NSFileAccessIntent"
		},
		"readingIntentWithURLOptions": {
			"!type": "fn(url: +NSURL, options: number) -> +NSFileAccessIntent"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSFileAccessIntent"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSFileAccessIntent"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSFileAccessIntent"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"URL": {
				"!type": "+NSURL"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSFileAccessIntent"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAlertController": {
		"alertControllerWithTitleMessagePreferredStyle": {
			"!type": "fn(title: string, message: string, preferredStyle: number) -> +UIAlertController"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAlertController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAlertController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAlertController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"textFields": {
				"!type": "+Array"
			},
			"title": {
				"!type": "string"
			},
			"preferredAction": {
				"!type": "+UIAlertAction"
			},
			"preferredStyle": {
				"!type": "number"
			},
			"actions": {
				"!type": "+Array"
			},
			"message": {
				"!type": "string"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"addTextFieldWithConfigurationHandler": {
				"!type": "fn(configurationHandler: +Function) -> void"
			},
			"addAction": {
				"!type": "fn(action: +UIAlertAction) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIAlertController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIAlertController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAlertController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerInteraction": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"enabled": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UIPointerInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSDateIntervalFormatter": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSDateIntervalFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSDateIntervalFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSDateIntervalFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"timeStyle": {
				"!type": "number"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"dateStyle": {
				"!type": "number"
			},
			"dateTemplate": {
				"!type": "string"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"calendar": {
				"!type": "+NSCalendar"
			},
			"stringFromDateInterval": {
				"!type": "fn(dateInterval: +NSDateInterval) -> string"
			},
			"stringFromDateToDate": {
				"!type": "fn(fromDate: +Date, toDate: +Date) -> string"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSDateIntervalFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionViewUpdateItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionViewUpdateItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionViewUpdateItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionViewUpdateItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"indexPathBeforeUpdate": {
				"!type": "+NSIndexPath"
			},
			"indexPathAfterUpdate": {
				"!type": "+NSIndexPath"
			},
			"updateAction": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionViewUpdateItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKAdNetwork": {
		"updateConversionValue": {
			"!type": "fn(conversionValue: number) -> void"
		},
		"registerAppForAdNetworkAttribution": {
			"!type": "fn() -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKAdNetwork"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKAdNetwork"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKAdNetwork"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKAdNetwork"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITabBarItemAppearance": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITabBarItemAppearance"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITabBarItemAppearance"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITabBarItemAppearance"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"disabled": {
				"!type": "+UITabBarItemStateAppearance"
			},
			"selected": {
				"!type": "+UITabBarItemStateAppearance"
			},
			"focused": {
				"!type": "+UITabBarItemStateAppearance"
			},
			"normal": {
				"!type": "+UITabBarItemStateAppearance"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITabBarItemAppearance"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItemAppearance"
			},
			"initWithStyle": {
				"!type": "fn(style: number) -> +UITabBarItemAppearance"
			},
			"jscopy": {
				"!type": "fn() -> +UITabBarItemAppearance"
			},
			"configureWithDefaultForStyle": {
				"!type": "fn(style: number) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITabBarItemAppearance"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIFeature": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIFeature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIFeature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIFeature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"type": {
				"!type": "string"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIFeature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIColorPickerViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIColorPickerViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIColorPickerViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIColorPickerViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"selectedColor": {
				"!type": "+UIColor"
			},
			"delegate": {
				"!type": "+Object"
			},
			"supportsAlpha": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"jsinit": {
				"!type": "fn() -> +UIColorPickerViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIColorPickerViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIColorPickerViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIColorPickerViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableData": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableData"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableData"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableData"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"length": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableData"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPersonNameComponentsFormatter": {
		"localizedStringFromPersonNameComponentsStyleOptions": {
			"!type": "fn(components: +NSPersonNameComponents, nameFormatStyle: number, nameOptions: number) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPersonNameComponentsFormatter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPersonNameComponentsFormatter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPersonNameComponentsFormatter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"phonetic": {
				"!type": "bool"
			},
			"style": {
				"!type": "number"
			},
			"annotatedStringFromPersonNameComponents": {
				"!type": "fn(components: +NSPersonNameComponents) -> +NSAttributedString"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringFromPersonNameComponents": {
				"!type": "fn(components: +NSPersonNameComponents) -> string"
			},
			"personNameComponentsFromString": {
				"!type": "fn(string: string) -> +NSPersonNameComponents"
			},
			"editingStringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription": {
				"!type": "fn(partialStringPtr: +Object, proposedSelRangePtr: +Object, origString: string, origSelRange: +Object, error: +Object) -> bool"
			},
			"getObjectValueForStringErrorDescription": {
				"!type": "fn(obj: +Object, string: string, error: +Object) -> bool"
			},
			"stringForObjectValue": {
				"!type": "fn(obj: +Object) -> string"
			},
			"attributedStringForObjectValueWithDefaultAttributes": {
				"!type": "fn(obj: +Object, attrs: +Object) -> +NSAttributedString"
			},
			"isPartialStringValidNewEditingStringErrorDescription": {
				"!type": "fn(partialString: string, newString: +Object, error: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPersonNameComponentsFormatter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPrinter": {
		"printerWithURL": {
			"!type": "fn(url: +NSURL) -> +UIPrinter"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPrinter"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPrinter"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPrinter"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"supportedJobTypes": {
				"!type": "number"
			},
			"makeAndModel": {
				"!type": "string"
			},
			"URL": {
				"!type": "+NSURL"
			},
			"supportsDuplex": {
				"!type": "bool"
			},
			"displayLocation": {
				"!type": "string"
			},
			"displayName": {
				"!type": "string"
			},
			"supportsColor": {
				"!type": "bool"
			},
			"contactPrinter": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPrinter"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIAccelerometer": {
		"sharedAccelerometer": {
			"!type": "fn() -> +UIAccelerometer"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIAccelerometer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIAccelerometer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIAccelerometer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"updateInterval": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIAccelerometer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextDropProposal": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextDropProposal"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextDropProposal"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextDropProposal"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"useFastSameViewOperations": {
				"!type": "bool"
			},
			"dropPerformer": {
				"!type": "number"
			},
			"dropProgressMode": {
				"!type": "number"
			},
			"dropAction": {
				"!type": "number"
			},
			"precise": {
				"!type": "bool"
			},
			"prefersFullSizePreview": {
				"!type": "bool"
			},
			"operation": {
				"!type": "number"
			},
			"initWithDropOperation": {
				"!type": "fn(operation: number) -> +UITextDropProposal"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextDropProposal"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITableView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITableView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITableView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITableView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"estimatedRowHeight": {
				"!type": "number"
			},
			"allowsSelection": {
				"!type": "bool"
			},
			"separatorColor": {
				"!type": "+UIColor"
			},
			"hasActiveDrop": {
				"!type": "bool"
			},
			"sectionHeaderHeight": {
				"!type": "number"
			},
			"estimatedSectionHeaderHeight": {
				"!type": "number"
			},
			"allowsSelectionDuringEditing": {
				"!type": "bool"
			},
			"estimatedSectionFooterHeight": {
				"!type": "number"
			},
			"indexPathForSelectedRow": {
				"!type": "+NSIndexPath"
			},
			"style": {
				"!type": "number"
			},
			"tableHeaderView": {
				"!type": "+UIView"
			},
			"indexPathsForVisibleRows": {
				"!type": "+Array"
			},
			"sectionIndexColor": {
				"!type": "+UIColor"
			},
			"hasUncommittedUpdates": {
				"!type": "bool"
			},
			"selectionFollowsFocus": {
				"!type": "bool"
			},
			"sectionIndexMinimumDisplayRowCount": {
				"!type": "number"
			},
			"indexPathsForSelectedRows": {
				"!type": "+Array"
			},
			"dragInteractionEnabled": {
				"!type": "bool"
			},
			"sectionIndexTrackingBackgroundColor": {
				"!type": "+UIColor"
			},
			"cellLayoutMarginsFollowReadableWidth": {
				"!type": "bool"
			},
			"separatorInset": {
				"!type": "+Object"
			},
			"allowsMultipleSelection": {
				"!type": "bool"
			},
			"separatorInsetReference": {
				"!type": "number"
			},
			"dataSource": {
				"!type": "+Object"
			},
			"separatorStyle": {
				"!type": "number"
			},
			"separatorEffect": {
				"!type": "+UIVisualEffect"
			},
			"editing": {
				"!type": "bool"
			},
			"visibleCells": {
				"!type": "+Array"
			},
			"tableFooterView": {
				"!type": "+UIView"
			},
			"rowHeight": {
				"!type": "number"
			},
			"allowsMultipleSelectionDuringEditing": {
				"!type": "bool"
			},
			"remembersLastFocusedIndexPath": {
				"!type": "bool"
			},
			"insetsContentViewsToSafeArea": {
				"!type": "bool"
			},
			"dragDelegate": {
				"!type": "+Object"
			},
			"prefetchDataSource": {
				"!type": "+Object"
			},
			"numberOfSections": {
				"!type": "number"
			},
			"sectionIndexBackgroundColor": {
				"!type": "+UIColor"
			},
			"delegate": {
				"!type": "+Object"
			},
			"hasActiveDrag": {
				"!type": "bool"
			},
			"dropDelegate": {
				"!type": "+Object"
			},
			"backgroundView": {
				"!type": "+UIView"
			},
			"sectionFooterHeight": {
				"!type": "number"
			},
			"scrollEnabled": {
				"!type": "bool"
			},
			"panGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"showsVerticalScrollIndicator": {
				"!type": "bool"
			},
			"contentOffset": {
				"!type": "+Object"
			},
			"minimumZoomScale": {
				"!type": "number"
			},
			"directionalLockEnabled": {
				"!type": "bool"
			},
			"indicatorStyle": {
				"!type": "number"
			},
			"dragging": {
				"!type": "bool"
			},
			"automaticallyAdjustsScrollIndicatorInsets": {
				"!type": "bool"
			},
			"decelerating": {
				"!type": "bool"
			},
			"scrollsToTop": {
				"!type": "bool"
			},
			"decelerationRate": {
				"!type": "number"
			},
			"pinchGestureRecognizer": {
				"!type": "+UIPinchGestureRecognizer"
			},
			"alwaysBounceVertical": {
				"!type": "bool"
			},
			"maximumZoomScale": {
				"!type": "number"
			},
			"canCancelContentTouches": {
				"!type": "bool"
			},
			"contentInset": {
				"!type": "+Object"
			},
			"contentSize": {
				"!type": "+Object"
			},
			"pagingEnabled": {
				"!type": "bool"
			},
			"verticalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"contentLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomBouncing": {
				"!type": "bool"
			},
			"tracking": {
				"!type": "bool"
			},
			"showsHorizontalScrollIndicator": {
				"!type": "bool"
			},
			"frameLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomScale": {
				"!type": "number"
			},
			"bouncesZoom": {
				"!type": "bool"
			},
			"scrollIndicatorInsets": {
				"!type": "+Object"
			},
			"adjustedContentInset": {
				"!type": "+Object"
			},
			"keyboardDismissMode": {
				"!type": "number"
			},
			"indexDisplayMode": {
				"!type": "number"
			},
			"alwaysBounceHorizontal": {
				"!type": "bool"
			},
			"horizontalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"zooming": {
				"!type": "bool"
			},
			"refreshControl": {
				"!type": "+UIRefreshControl"
			},
			"bounces": {
				"!type": "bool"
			},
			"directionalPressGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"contentInsetAdjustmentBehavior": {
				"!type": "number"
			},
			"delaysContentTouches": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"performBatchUpdatesCompletion": {
				"!type": "fn(updates: +Function, completion: +Function) -> void"
			},
			"dequeueReusableCellWithIdentifierForIndexPath": {
				"!type": "fn(identifier: string, indexPath: +NSIndexPath) -> +UITableViewCell"
			},
			"deleteSectionsWithRowAnimation": {
				"!type": "fn(sections: +NSIndexSet, animation: number) -> void"
			},
			"numberOfRowsInSection": {
				"!type": "fn(section: number) -> number"
			},
			"moveRowAtIndexPathToIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath, newIndexPath: +NSIndexPath) -> void"
			},
			"footerViewForSection": {
				"!type": "fn(section: number) -> +UITableViewHeaderFooterView"
			},
			"registerClassForCellReuseIdentifier": {
				"!type": "fn(cellClass: +Object, identifier: string) -> void"
			},
			"reloadSectionsWithRowAnimation": {
				"!type": "fn(sections: +NSIndexSet, animation: number) -> void"
			},
			"registerNibForHeaderFooterViewReuseIdentifier": {
				"!type": "fn(nib: +UINib, identifier: string) -> void"
			},
			"scrollToNearestSelectedRowAtScrollPositionAnimated": {
				"!type": "fn(scrollPosition: number, animated: bool) -> void"
			},
			"registerClassForHeaderFooterViewReuseIdentifier": {
				"!type": "fn(aClass: +Object, identifier: string) -> void"
			},
			"cellForRowAtIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +UITableViewCell"
			},
			"insertRowsAtIndexPathsWithRowAnimation": {
				"!type": "fn(indexPaths: +Array, animation: number) -> void"
			},
			"rectForSection": {
				"!type": "fn(section: number) -> +Object"
			},
			"selectRowAtIndexPathAnimatedScrollPosition": {
				"!type": "fn(indexPath: +NSIndexPath, animated: bool, scrollPosition: number) -> void"
			},
			"scrollToRowAtIndexPathAtScrollPositionAnimated": {
				"!type": "fn(indexPath: +NSIndexPath, scrollPosition: number, animated: bool) -> void"
			},
			"headerViewForSection": {
				"!type": "fn(section: number) -> +UITableViewHeaderFooterView"
			},
			"insertSectionsWithRowAnimation": {
				"!type": "fn(sections: +NSIndexSet, animation: number) -> void"
			},
			"reloadSectionIndexTitles": {
				"!type": "fn() -> void"
			},
			"dequeueReusableCellWithIdentifier": {
				"!type": "fn(identifier: string) -> +UITableViewCell"
			},
			"indexPathForRowAtPoint": {
				"!type": "fn(point: +Object) -> +NSIndexPath"
			},
			"registerNibForCellReuseIdentifier": {
				"!type": "fn(nib: +UINib, identifier: string) -> void"
			},
			"reloadData": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableView"
			},
			"initWithFrameStyle": {
				"!type": "fn(frame: +Object, style: number) -> +UITableView"
			},
			"rectForHeaderInSection": {
				"!type": "fn(section: number) -> +Object"
			},
			"rectForFooterInSection": {
				"!type": "fn(section: number) -> +Object"
			},
			"moveSectionToSection": {
				"!type": "fn(section: number, newSection: number) -> void"
			},
			"setEditingAnimated": {
				"!type": "fn(editing: bool, animated: bool) -> void"
			},
			"indexPathForCell": {
				"!type": "fn(cell: +UITableViewCell) -> +NSIndexPath"
			},
			"deselectRowAtIndexPathAnimated": {
				"!type": "fn(indexPath: +NSIndexPath, animated: bool) -> void"
			},
			"endUpdates": {
				"!type": "fn() -> void"
			},
			"deleteRowsAtIndexPathsWithRowAnimation": {
				"!type": "fn(indexPaths: +Array, animation: number) -> void"
			},
			"indexPathsForRowsInRect": {
				"!type": "fn(rect: +Object) -> +Array"
			},
			"reloadRowsAtIndexPathsWithRowAnimation": {
				"!type": "fn(indexPaths: +Array, animation: number) -> void"
			},
			"rectForRowAtIndexPath": {
				"!type": "fn(indexPath: +NSIndexPath) -> +Object"
			},
			"dequeueReusableHeaderFooterViewWithIdentifier": {
				"!type": "fn(identifier: string) -> +UITableViewHeaderFooterView"
			},
			"beginUpdates": {
				"!type": "fn() -> void"
			},
			"touchesShouldBeginWithEventInContentView": {
				"!type": "fn(touches: +NSSet, event: +UIEvent, view: +UIView) -> bool"
			},
			"scrollRectToVisibleAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setContentOffsetAnimated": {
				"!type": "fn(contentOffset: +Object, animated: bool) -> void"
			},
			"adjustedContentInsetDidChange": {
				"!type": "fn() -> void"
			},
			"zoomToRectAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setZoomScaleAnimated": {
				"!type": "fn(scale: number, animated: bool) -> void"
			},
			"scrollIndicatorInsets": {
				"!type": "fn() -> +Object"
			},
			"touchesShouldCancelInContentView": {
				"!type": "fn(view: +UIView) -> bool"
			},
			"flashScrollIndicators": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITableView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITableView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITableView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIRectangleFeature": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIRectangleFeature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIRectangleFeature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIRectangleFeature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"topLeft": {
				"!type": "+Object"
			},
			"bottomLeft": {
				"!type": "+Object"
			},
			"bounds": {
				"!type": "+Object"
			},
			"bottomRight": {
				"!type": "+Object"
			},
			"topRight": {
				"!type": "+Object"
			},
			"type": {
				"!type": "string"
			},
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIRectangleFeature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIImageSymbolConfiguration": {
		"configurationWithScale": {
			"!type": "fn(scale: number) -> +UIImageSymbolConfiguration"
		},
		"configurationWithFont": {
			"!type": "fn(font: +UIFont) -> +UIImageSymbolConfiguration"
		},
		"configurationWithWeight": {
			"!type": "fn(weight: number) -> +UIImageSymbolConfiguration"
		},
		"unspecifiedConfiguration": {
			"!type": "fn() -> +UIImageSymbolConfiguration"
		},
		"configurationWithPointSizeWeightScale": {
			"!type": "fn(pointSize: number, weight: number, scale: number) -> +UIImageSymbolConfiguration"
		},
		"configurationWithPointSizeWeight": {
			"!type": "fn(pointSize: number, weight: number) -> +UIImageSymbolConfiguration"
		},
		"configurationWithTextStyle": {
			"!type": "fn(textStyle: string) -> +UIImageSymbolConfiguration"
		},
		"configurationWithPointSize": {
			"!type": "fn(pointSize: number) -> +UIImageSymbolConfiguration"
		},
		"configurationWithFontScale": {
			"!type": "fn(font: +UIFont, scale: number) -> +UIImageSymbolConfiguration"
		},
		"configurationWithTextStyleScale": {
			"!type": "fn(textStyle: string, scale: number) -> +UIImageSymbolConfiguration"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIImageSymbolConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIImageSymbolConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIImageSymbolConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"traitCollection": {
				"!type": "+UITraitCollection"
			},
			"isEqualToConfiguration": {
				"!type": "fn(otherConfiguration: +UIImageSymbolConfiguration) -> bool"
			},
			"configurationWithoutScale": {
				"!type": "fn() -> +UIImageSymbolConfiguration"
			},
			"configurationWithoutTextStyle": {
				"!type": "fn() -> +UIImageSymbolConfiguration"
			},
			"configurationWithoutWeight": {
				"!type": "fn() -> +UIImageSymbolConfiguration"
			},
			"configurationWithoutPointSizeAndWeight": {
				"!type": "fn() -> +UIImageSymbolConfiguration"
			},
			"configurationWithTraitCollection": {
				"!type": "fn(traitCollection: +UITraitCollection) -> +UIImageSymbolConfiguration"
			},
			"configurationByApplyingConfiguration": {
				"!type": "fn(otherConfiguration: +UIImageConfiguration) -> +UIImageSymbolConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIImageSymbolConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIScene": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIScene"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIScene"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIScene"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"activationState": {
				"!type": "number"
			},
			"activationConditions": {
				"!type": "+UISceneActivationConditions"
			},
			"session": {
				"!type": "+UISceneSession"
			},
			"delegate": {
				"!type": "+Object"
			},
			"title": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithSessionConnectionOptions": {
				"!type": "fn(session: +UISceneSession, connectionOptions: +UISceneConnectionOptions) -> +UIScene"
			},
			"openURLOptionsCompletionHandler": {
				"!type": "fn(url: +NSURL, options: +UISceneOpenExternalURLOptions, completion: +Function) -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIScene"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextRange": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextRange"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextRange"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextRange"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"start": {
				"!type": "+UITextPosition"
			},
			"end": {
				"!type": "+UITextPosition"
			},
			"empty": {
				"!type": "bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextRange"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLProtectionSpace": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLProtectionSpace"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLProtectionSpace"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLProtectionSpace"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"proxyType": {
				"!type": "string"
			},
			"realm": {
				"!type": "string"
			},
			"host": {
				"!type": "string"
			},
			"receivesCredentialSecurely": {
				"!type": "bool"
			},
			"protocol": {
				"!type": "string"
			},
			"authenticationMethod": {
				"!type": "string"
			},
			"port": {
				"!type": "number"
			},
			"isProxy": {
				"!type": "bool"
			},
			"initWithProxyHostPortTypeRealmAuthenticationMethod": {
				"!type": "fn(host: string, port: number, type: string, realm: string, authenticationMethod: string) -> +NSURLProtectionSpace"
			},
			"initWithHostPortProtocolRealmAuthenticationMethod": {
				"!type": "fn(host: string, port: number, protocol: string, realm: string, authenticationMethod: string) -> +NSURLProtectionSpace"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLProtectionSpace"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSComparisonPredicate": {
		"predicateWithLeftExpressionRightExpressionCustomSelector": {
			"!type": "fn(lhs: +NSExpression, rhs: +NSExpression, selector: string) -> +NSComparisonPredicate"
		},
		"predicateWithLeftExpressionRightExpressionModifierTypeOptions": {
			"!type": "fn(lhs: +NSExpression, rhs: +NSExpression, modifier: number, type: number, options: number) -> +NSComparisonPredicate"
		},
		"predicateWithFormatArguments": {
			"!type": "fn(predicateFormat: string, argList: +Object) -> +NSPredicate"
		},
		"predicateWithFormat": {
			"!type": "fn(predicateFormat: string, args: Array.prototype) -> +NSPredicate"
		},
		"predicateWithValue": {
			"!type": "fn(value: bool) -> +NSPredicate"
		},
		"predicateWithFormatArgumentArray": {
			"!type": "fn(predicateFormat: string, arguments: +Array) -> +NSPredicate"
		},
		"predicateWithBlock": {
			"!type": "fn(block: +Function) -> +NSPredicate"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSComparisonPredicate"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSComparisonPredicate"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSComparisonPredicate"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jscustomSelector": {
				"!type": "string"
			},
			"leftExpression": {
				"!type": "+NSExpression"
			},
			"comparisonPredicateModifier": {
				"!type": "number"
			},
			"rightExpression": {
				"!type": "+NSExpression"
			},
			"options": {
				"!type": "number"
			},
			"predicateOperatorType": {
				"!type": "number"
			},
			"predicateFormat": {
				"!type": "string"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSComparisonPredicate"
			},
			"initWithLeftExpressionRightExpressionModifierTypeOptions": {
				"!type": "fn(lhs: +NSExpression, rhs: +NSExpression, modifier: number, type: number, options: number) -> +NSComparisonPredicate"
			},
			"initWithLeftExpressionRightExpressionCustomSelector": {
				"!type": "fn(lhs: +NSExpression, rhs: +NSExpression, selector: string) -> +NSComparisonPredicate"
			},
			"predicateWithSubstitutionVariables": {
				"!type": "fn(variables: +Object) -> +NSComparisonPredicate"
			},
			"evaluateWithObject": {
				"!type": "fn(object: +Object) -> bool"
			},
			"allowEvaluation": {
				"!type": "fn() -> void"
			},
			"evaluateWithObjectSubstitutionVariables": {
				"!type": "fn(object: +Object, bindings: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSComparisonPredicate"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICollectionLayoutListConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICollectionLayoutListConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICollectionLayoutListConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICollectionLayoutListConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"appearance": {
				"!type": "number"
			},
			"headerMode": {
				"!type": "number"
			},
			"footerMode": {
				"!type": "number"
			},
			"backgroundColor": {
				"!type": "+UIColor"
			},
			"jstrailingSwipeActionsConfigurationProvider": {
				"!type": "+Function"
			},
			"showsSeparators": {
				"!type": "bool"
			},
			"jsleadingSwipeActionsConfigurationProvider": {
				"!type": "+Function"
			},
			"initWithAppearance": {
				"!type": "fn(appearance: number) -> +UICollectionLayoutListConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICollectionLayoutListConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSBlockOperation": {
		"blockOperationWithBlock": {
			"!type": "fn(block: +Function) -> +NSBlockOperation"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSBlockOperation"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSBlockOperation"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSBlockOperation"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"executionBlocks": {
				"!type": "+Array"
			},
			"ready": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"jscompletionBlock": {
				"!type": "+Function"
			},
			"concurrent": {
				"!type": "bool"
			},
			"qualityOfService": {
				"!type": "number"
			},
			"queuePriority": {
				"!type": "number"
			},
			"executing": {
				"!type": "bool"
			},
			"finished": {
				"!type": "bool"
			},
			"dependencies": {
				"!type": "+Array"
			},
			"asynchronous": {
				"!type": "bool"
			},
			"threadPriority": {
				"!type": "number"
			},
			"cancelled": {
				"!type": "bool"
			},
			"addExecutionBlock": {
				"!type": "fn(block: +Function) -> void"
			},
			"cancel": {
				"!type": "fn() -> void"
			},
			"waitUntilFinished": {
				"!type": "fn() -> void"
			},
			"start": {
				"!type": "fn() -> void"
			},
			"main": {
				"!type": "fn() -> void"
			},
			"addDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"removeDependency": {
				"!type": "fn(op: +NSOperation) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSBlockOperation"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSOutputStream": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSOutputStream"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSOutputStream"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSOutputStream"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"hasSpaceAvailable": {
				"!type": "bool"
			},
			"streamError": {
				"!type": "+NSError"
			},
			"streamStatus": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"jsinitToMemory": {
				"!type": "fn() -> +NSOutputStream"
			},
			"writeMaxLength": {
				"!type": "fn(buffer: +Object, len: number) -> number"
			},
			"initWithURLAppend": {
				"!type": "fn(url: +NSURL, shouldAppend: bool) -> +NSOutputStream"
			},
			"initToBufferCapacity": {
				"!type": "fn(buffer: +Object, capacity: number) -> +NSOutputStream"
			},
			"setPropertyForKey": {
				"!type": "fn(property: +Object, key: string) -> bool"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"propertyForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(aRunLoop: +NSRunLoop, mode: string) -> void"
			},
			"close": {
				"!type": "fn() -> void"
			},
			"open": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSOutputStream"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFontPickerViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFontPickerViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFontPickerViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFontPickerViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"selectedFontDescriptor": {
				"!type": "+UIFontDescriptor"
			},
			"configuration": {
				"!type": "+UIFontPickerViewControllerConfiguration"
			},
			"delegate": {
				"!type": "+Object"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithConfiguration": {
				"!type": "fn(configuration: +UIFontPickerViewControllerConfiguration) -> +UIFontPickerViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIFontPickerViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIFontPickerViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFontPickerViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILargeContentViewerInteraction": {
		"isEnabled": {
			"!type": "fn() -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILargeContentViewerInteraction"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILargeContentViewerInteraction"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILargeContentViewerInteraction"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delegate": {
				"!type": "+Object"
			},
			"gestureRecognizerForExclusionRelationship": {
				"!type": "+UIGestureRecognizer"
			},
			"initWithDelegate": {
				"!type": "fn(delegate: +Object) -> +UILargeContentViewerInteraction"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILargeContentViewerInteraction"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKOverlayAppClipConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKOverlayAppClipConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKOverlayAppClipConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKOverlayAppClipConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"campaignToken": {
				"!type": "string"
			},
			"position": {
				"!type": "number"
			},
			"providerToken": {
				"!type": "string"
			},
			"initWithPosition": {
				"!type": "fn(position: number) -> +SKOverlayAppClipConfiguration"
			},
			"setAdditionalValueForKey": {
				"!type": "fn(value: +Object, key: string) -> void"
			},
			"additionalValueForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKOverlayAppClipConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIHoverGestureRecognizer": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIHoverGestureRecognizer"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIHoverGestureRecognizer"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIHoverGestureRecognizer"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"delaysTouchesEnded": {
				"!type": "bool"
			},
			"cancelsTouchesInView": {
				"!type": "bool"
			},
			"name": {
				"!type": "string"
			},
			"enabled": {
				"!type": "bool"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"allowedPressTypes": {
				"!type": "+Array"
			},
			"state": {
				"!type": "number"
			},
			"buttonMask": {
				"!type": "number"
			},
			"delegate": {
				"!type": "+Object"
			},
			"numberOfTouches": {
				"!type": "number"
			},
			"requiresExclusiveTouchType": {
				"!type": "bool"
			},
			"allowedTouchTypes": {
				"!type": "+Array"
			},
			"delaysTouchesBegan": {
				"!type": "bool"
			},
			"view": {
				"!type": "+UIView"
			},
			"removeTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationOfTouchInView": {
				"!type": "fn(touchIndex: number, view: +UIView) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIHoverGestureRecognizer"
			},
			"requireGestureRecognizerToFail": {
				"!type": "fn(otherGestureRecognizer: +UIGestureRecognizer) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIHoverGestureRecognizer"
			},
			"initWithTargetAction": {
				"!type": "fn(target: +Object, action: string) -> +UIHoverGestureRecognizer"
			},
			"addTargetAction": {
				"!type": "fn(target: +Object, action: string) -> void"
			},
			"locationInView": {
				"!type": "fn(view: +UIView) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIHoverGestureRecognizer"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"SKOverlayAppConfiguration": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +SKOverlayAppConfiguration"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +SKOverlayAppConfiguration"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +SKOverlayAppConfiguration"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"campaignToken": {
				"!type": "string"
			},
			"position": {
				"!type": "number"
			},
			"providerToken": {
				"!type": "string"
			},
			"userDismissible": {
				"!type": "bool"
			},
			"appIdentifier": {
				"!type": "string"
			},
			"setAdditionalValueForKey": {
				"!type": "fn(value: +Object, key: string) -> void"
			},
			"additionalValueForKey": {
				"!type": "fn(key: string) -> +Object"
			},
			"initWithAppIdentifierPosition": {
				"!type": "fn(appIdentifier: string, position: number) -> +SKOverlayAppConfiguration"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +SKOverlayAppConfiguration"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CIContext": {
		"contextWithMTLCommandQueue": {
			"!type": "fn(commandQueue: +Object) -> +CIContext"
		},
		"contextWithCGContextOptions": {
			"!type": "fn(cgctx: +Object, options: +Object) -> +CIContext"
		},
		"contextWithOptions": {
			"!type": "fn(options: +Object) -> +CIContext"
		},
		"contextWithMTLCommandQueueOptions": {
			"!type": "fn(commandQueue: +Object, options: +Object) -> +CIContext"
		},
		"contextWithEAGLContext": {
			"!type": "fn(eaglContext: +EAGLContext) -> +CIContext"
		},
		"contextWithMTLDeviceOptions": {
			"!type": "fn(device: +Object, options: +Object) -> +CIContext"
		},
		"contextWithEAGLContextOptions": {
			"!type": "fn(eaglContext: +EAGLContext, options: +Object) -> +CIContext"
		},
		"contextWithMTLDevice": {
			"!type": "fn(device: +Object) -> +CIContext"
		},
		"context": {
			"!type": "fn() -> +CIContext"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CIContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CIContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CIContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"workingFormat": {
				"!type": "number"
			},
			"workingColorSpace": {
				"!type": "+Object"
			},
			"renderToIOSurfaceBoundsColorSpace": {
				"!type": "fn(image: +CIImage, surface: +Object, bounds: +Object, colorSpace: +Object) -> void"
			},
			"renderToBitmapRowBytesBoundsFormatColorSpace": {
				"!type": "fn(image: +CIImage, data: +Object, rowBytes: number, bounds: +Object, format: number, colorSpace: +Object) -> void"
			},
			"inputImageMaximumSize": {
				"!type": "fn() -> +Object"
			},
			"renderToMTLTextureCommandBufferBoundsColorSpace": {
				"!type": "fn(image: +CIImage, texture: +Object, commandBuffer: +Object, bounds: +Object, colorSpace: +Object) -> void"
			},
			"initWithOptions": {
				"!type": "fn(options: +Object) -> +CIContext"
			},
			"renderToCVPixelBufferBoundsColorSpace": {
				"!type": "fn(image: +CIImage, buffer: +Object, bounds: +Object, colorSpace: +Object) -> void"
			},
			"drawImageAtPointFromRect": {
				"!type": "fn(image: +CIImage, atPoint: +Object, fromRect: +Object) -> void"
			},
			"drawImageInRectFromRect": {
				"!type": "fn(image: +CIImage, inRect: +Object, fromRect: +Object) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +CIContext"
			},
			"clearCaches": {
				"!type": "fn() -> void"
			},
			"outputImageMaximumSize": {
				"!type": "fn() -> +Object"
			},
			"renderToCVPixelBuffer": {
				"!type": "fn(image: +CIImage, buffer: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CIContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPointerStyle": {
		"styleWithShapeConstrainedAxes": {
			"!type": "fn(shape: +UIPointerShape, axes: number) -> +UIPointerStyle"
		},
		"hiddenPointerStyle": {
			"!type": "fn() -> +UIPointerStyle"
		},
		"styleWithEffectShape": {
			"!type": "fn(effect: +UIPointerEffect, shape: +UIPointerShape) -> +UIPointerStyle"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPointerStyle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPointerStyle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPointerStyle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPointerStyle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIInputViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIInputViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIInputViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIInputViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"textDocumentProxy": {
				"!type": "+Object"
			},
			"inputView": {
				"!type": "+UIInputView"
			},
			"hasDictationKey": {
				"!type": "bool"
			},
			"needsInputModeSwitchKey": {
				"!type": "bool"
			},
			"primaryLanguage": {
				"!type": "string"
			},
			"hasFullAccess": {
				"!type": "bool"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"advanceToNextInputMode": {
				"!type": "fn() -> void"
			},
			"requestSupplementaryLexiconWithCompletion": {
				"!type": "fn(completionHandler: +Function) -> void"
			},
			"dismissKeyboard": {
				"!type": "fn() -> void"
			},
			"handleInputModeListFromViewWithEvent": {
				"!type": "fn(view: +UIView, event: +UIEvent) -> void"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIInputViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIInputViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIInputViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSLayoutAnchor": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSLayoutAnchor"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSLayoutAnchor"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSLayoutAnchor"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"constraintGreaterThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintEqualToAnchor": {
				"!type": "fn(anchor: +NSLayoutAnchor) -> +NSLayoutConstraint"
			},
			"constraintLessThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"constraintGreaterThanOrEqualToAnchorConstant": {
				"!type": "fn(anchor: +NSLayoutAnchor, c: number) -> +NSLayoutConstraint"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSLayoutAnchor"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UILayoutGuide": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UILayoutGuide"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UILayoutGuide"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UILayoutGuide"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"trailingAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"centerXAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"leadingAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"centerYAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"owningView": {
				"!type": "+UIView"
			},
			"leftAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"bottomAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"layoutFrame": {
				"!type": "+Object"
			},
			"widthAnchor": {
				"!type": "+NSLayoutDimension"
			},
			"rightAnchor": {
				"!type": "+NSLayoutXAxisAnchor"
			},
			"identifier": {
				"!type": "string"
			},
			"heightAnchor": {
				"!type": "+NSLayoutDimension"
			},
			"topAnchor": {
				"!type": "+NSLayoutYAxisAnchor"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UILayoutGuide"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIPressesEvent": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIPressesEvent"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIPressesEvent"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIPressesEvent"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"allPresses": {
				"!type": "+NSSet"
			},
			"timestamp": {
				"!type": "number"
			},
			"modifierFlags": {
				"!type": "number"
			},
			"subtype": {
				"!type": "number"
			},
			"allTouches": {
				"!type": "+NSSet"
			},
			"buttonMask": {
				"!type": "number"
			},
			"type": {
				"!type": "number"
			},
			"pressesForGestureRecognizer": {
				"!type": "fn(gesture: +UIGestureRecognizer) -> +NSSet"
			},
			"predictedTouchesForTouch": {
				"!type": "fn(touch: +UITouch) -> +Array"
			},
			"touchesForWindow": {
				"!type": "fn(window: +UIWindow) -> +NSSet"
			},
			"coalescedTouchesForTouch": {
				"!type": "fn(touch: +UITouch) -> +Array"
			},
			"touchesForGestureRecognizer": {
				"!type": "fn(gesture: +UIGestureRecognizer) -> +NSSet"
			},
			"touchesForView": {
				"!type": "fn(view: +UIView) -> +NSSet"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIPressesEvent"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSIndexPath": {
		"indexPathWithIndex": {
			"!type": "fn(index: number) -> +NSIndexPath"
		},
		"indexPathWithIndexesLength": {
			"!type": "fn(indexes: +Object, length: number) -> +NSIndexPath"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSIndexPath"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSIndexPath"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSIndexPath"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"initWithIndex": {
				"!type": "fn(index: number) -> +NSIndexPath"
			},
			"getIndexesRange": {
				"!type": "fn(indexes: +Object, positionRange: +Object) -> void"
			},
			"indexAtPosition": {
				"!type": "fn(position: number) -> number"
			},
			"indexPathByRemovingLastIndex": {
				"!type": "fn() -> +NSIndexPath"
			},
			"initWithIndexesLength": {
				"!type": "fn(indexes: +Object, length: number) -> +NSIndexPath"
			},
			"indexPathByAddingIndex": {
				"!type": "fn(index: number) -> +NSIndexPath"
			},
			"compare": {
				"!type": "fn(otherObject: +NSIndexPath) -> number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSIndexPath"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UITextView": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UITextView"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UITextView"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UITextView"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"dataDetectorTypes": {
				"!type": "number"
			},
			"usesStandardTextScaling": {
				"!type": "bool"
			},
			"textColor": {
				"!type": "+UIColor"
			},
			"clearsOnInsertion": {
				"!type": "bool"
			},
			"inputView": {
				"!type": "+UIView"
			},
			"attributedText": {
				"!type": "+NSAttributedString"
			},
			"text": {
				"!type": "string"
			},
			"typingAttributes": {
				"!type": "+Object"
			},
			"textContainer": {
				"!type": "+NSTextContainer"
			},
			"editable": {
				"!type": "bool"
			},
			"allowsEditingTextAttributes": {
				"!type": "bool"
			},
			"textStorage": {
				"!type": "+NSTextStorage"
			},
			"textContainerInset": {
				"!type": "+Object"
			},
			"delegate": {
				"!type": "+Object"
			},
			"inputAccessoryView": {
				"!type": "+UIView"
			},
			"selectable": {
				"!type": "bool"
			},
			"font": {
				"!type": "+UIFont"
			},
			"linkTextAttributes": {
				"!type": "+Object"
			},
			"textAlignment": {
				"!type": "number"
			},
			"layoutManager": {
				"!type": "+NSLayoutManager"
			},
			"selectedRange": {
				"!type": "+Object"
			},
			"scrollEnabled": {
				"!type": "bool"
			},
			"panGestureRecognizer": {
				"!type": "+UIPanGestureRecognizer"
			},
			"showsVerticalScrollIndicator": {
				"!type": "bool"
			},
			"contentOffset": {
				"!type": "+Object"
			},
			"minimumZoomScale": {
				"!type": "number"
			},
			"directionalLockEnabled": {
				"!type": "bool"
			},
			"indicatorStyle": {
				"!type": "number"
			},
			"dragging": {
				"!type": "bool"
			},
			"automaticallyAdjustsScrollIndicatorInsets": {
				"!type": "bool"
			},
			"decelerating": {
				"!type": "bool"
			},
			"scrollsToTop": {
				"!type": "bool"
			},
			"decelerationRate": {
				"!type": "number"
			},
			"pinchGestureRecognizer": {
				"!type": "+UIPinchGestureRecognizer"
			},
			"alwaysBounceVertical": {
				"!type": "bool"
			},
			"maximumZoomScale": {
				"!type": "number"
			},
			"canCancelContentTouches": {
				"!type": "bool"
			},
			"contentInset": {
				"!type": "+Object"
			},
			"contentSize": {
				"!type": "+Object"
			},
			"pagingEnabled": {
				"!type": "bool"
			},
			"verticalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"contentLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomBouncing": {
				"!type": "bool"
			},
			"tracking": {
				"!type": "bool"
			},
			"showsHorizontalScrollIndicator": {
				"!type": "bool"
			},
			"frameLayoutGuide": {
				"!type": "+UILayoutGuide"
			},
			"zoomScale": {
				"!type": "number"
			},
			"bouncesZoom": {
				"!type": "bool"
			},
			"scrollIndicatorInsets": {
				"!type": "+Object"
			},
			"adjustedContentInset": {
				"!type": "+Object"
			},
			"keyboardDismissMode": {
				"!type": "number"
			},
			"indexDisplayMode": {
				"!type": "number"
			},
			"alwaysBounceHorizontal": {
				"!type": "bool"
			},
			"horizontalScrollIndicatorInsets": {
				"!type": "+Object"
			},
			"zooming": {
				"!type": "bool"
			},
			"refreshControl": {
				"!type": "+UIRefreshControl"
			},
			"bounces": {
				"!type": "bool"
			},
			"directionalPressGestureRecognizer": {
				"!type": "+UIGestureRecognizer"
			},
			"contentInsetAdjustmentBehavior": {
				"!type": "number"
			},
			"delaysContentTouches": {
				"!type": "bool"
			},
			"delegate": {
				"!type": "+Object"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithFrameTextContainer": {
				"!type": "fn(frame: +Object, textContainer: +NSTextContainer) -> +UITextView"
			},
			"scrollRangeToVisible": {
				"!type": "fn(range: +Object) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITextView"
			},
			"touchesShouldBeginWithEventInContentView": {
				"!type": "fn(touches: +NSSet, event: +UIEvent, view: +UIView) -> bool"
			},
			"scrollRectToVisibleAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setContentOffsetAnimated": {
				"!type": "fn(contentOffset: +Object, animated: bool) -> void"
			},
			"adjustedContentInsetDidChange": {
				"!type": "fn() -> void"
			},
			"zoomToRectAnimated": {
				"!type": "fn(rect: +Object, animated: bool) -> void"
			},
			"setZoomScaleAnimated": {
				"!type": "fn(scale: number, animated: bool) -> void"
			},
			"scrollIndicatorInsets": {
				"!type": "fn() -> +Object"
			},
			"touchesShouldCancelInContentView": {
				"!type": "fn(view: +UIView) -> bool"
			},
			"flashScrollIndicators": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UITextView"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UITextView"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UITextView"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSStringDrawingContext": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSStringDrawingContext"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSStringDrawingContext"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSStringDrawingContext"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"minimumScaleFactor": {
				"!type": "number"
			},
			"totalBounds": {
				"!type": "+Object"
			},
			"actualScaleFactor": {
				"!type": "number"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSStringDrawingContext"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UICellAccessoryLabel": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UICellAccessoryLabel"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UICellAccessoryLabel"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UICellAccessoryLabel"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"text": {
				"!type": "string"
			},
			"font": {
				"!type": "+UIFont"
			},
			"adjustsFontForContentSizeCategory": {
				"!type": "bool"
			},
			"reservedLayoutWidth": {
				"!type": "number"
			},
			"hidden": {
				"!type": "bool"
			},
			"displayedState": {
				"!type": "number"
			},
			"tintColor": {
				"!type": "+UIColor"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryLabel"
			},
			"initWithText": {
				"!type": "fn(text: string) -> +UICellAccessoryLabel"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UICellAccessoryLabel"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryLabel"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UICellAccessoryLabel"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISceneActivationRequestOptions": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISceneActivationRequestOptions"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISceneActivationRequestOptions"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISceneActivationRequestOptions"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"requestingScene": {
				"!type": "+UIScene"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISceneActivationRequestOptions"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSUnitAngle": {
		"arcMinutes": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"revolutions": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"radians": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"gradians": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"degrees": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"arcSeconds": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"baseUnit": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSUnitAngle"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSUnitAngle"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"converter": {
				"!type": "+NSUnitConverter"
			},
			"symbol": {
				"!type": "string"
			},
			"initWithSymbolConverter": {
				"!type": "fn(symbol: string, converter: +NSUnitConverter) -> +NSUnitAngle"
			},
			"initWithSymbol": {
				"!type": "fn(symbol: string) -> +NSUnitAngle"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSUnitAngle"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMutableString": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMutableString"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMutableString"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMutableString"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"length": {
				"!type": "number"
			},
			"replaceCharactersInRangeWithString": {
				"!type": "fn(range: +Object, aString: string) -> void"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableString"
			},
			"characterAtIndex": {
				"!type": "fn(index: number) -> number"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +NSMutableString"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMutableString"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMessagePort": {
		"port": {
			"!type": "fn() -> +NSPort"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMessagePort"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMessagePort"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMessagePort"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"reservedSpaceLength": {
				"!type": "number"
			},
			"valid": {
				"!type": "bool"
			},
			"invalidate": {
				"!type": "fn() -> void"
			},
			"sendBeforeDateMsgidComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, msgID: number, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"setDelegate": {
				"!type": "fn(anObject: +Object) -> void"
			},
			"scheduleInRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"removeFromRunLoopForMode": {
				"!type": "fn(runLoop: +NSRunLoop, mode: string) -> void"
			},
			"sendBeforeDateComponentsFromReserved": {
				"!type": "fn(limitDate: +Date, components: +NSMutableArray, receivePort: +NSPort, headerSpaceReserved: number) -> bool"
			},
			"delegate": {
				"!type": "fn() -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMessagePort"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSPredicate": {
		"predicateWithFormatArguments": {
			"!type": "fn(predicateFormat: string, argList: +Object) -> +NSPredicate"
		},
		"predicateWithFormat": {
			"!type": "fn(predicateFormat: string, args: Array.prototype) -> +NSPredicate"
		},
		"predicateWithValue": {
			"!type": "fn(value: bool) -> +NSPredicate"
		},
		"predicateWithFormatArgumentArray": {
			"!type": "fn(predicateFormat: string, arguments: +Array) -> +NSPredicate"
		},
		"predicateWithBlock": {
			"!type": "fn(block: +Function) -> +NSPredicate"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSPredicate"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSPredicate"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSPredicate"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"predicateFormat": {
				"!type": "string"
			},
			"predicateWithSubstitutionVariables": {
				"!type": "fn(variables: +Object) -> +NSPredicate"
			},
			"evaluateWithObject": {
				"!type": "fn(object: +Object) -> bool"
			},
			"allowEvaluation": {
				"!type": "fn() -> void"
			},
			"evaluateWithObjectSubstitutionVariables": {
				"!type": "fn(object: +Object, bindings: +Object) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSPredicate"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDragItem": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDragItem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDragItem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDragItem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"localObject": {
				"!type": "+Object"
			},
			"jspreviewProvider": {
				"!type": "+Function"
			},
			"itemProvider": {
				"!type": "+NSItemProvider"
			},
			"initWithItemProvider": {
				"!type": "fn(itemProvider: +NSItemProvider) -> +UIDragItem"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDragItem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"CISampler": {
		"samplerWithImageKeysAndValues": {
			"!type": "fn(im: +CIImage, key0: +Object, args: Array.prototype) -> +CISampler"
		},
		"samplerWithImageOptions": {
			"!type": "fn(im: +CIImage, dict: +Object) -> +CISampler"
		},
		"samplerWithImage": {
			"!type": "fn(im: +CIImage) -> +CISampler"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +CISampler"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +CISampler"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +CISampler"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"definition": {
				"!type": "+CIFilterShape"
			},
			"extent": {
				"!type": "+Object"
			},
			"initWithImageOptions": {
				"!type": "fn(im: +CIImage, dict: +Object) -> +CISampler"
			},
			"initWithImageKeysAndValues": {
				"!type": "fn(im: +CIImage, key0: +Object, args: Array.prototype) -> +CISampler"
			},
			"initWithImage": {
				"!type": "fn(im: +CIImage) -> +CISampler"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +CISampler"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIActivityViewController": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIActivityViewController"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIActivityViewController"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIActivityViewController"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"jscompletionWithItemsHandler": {
				"!type": "+Function"
			},
			"excludedActivityTypes": {
				"!type": "+Array"
			},
			"jscompletionHandler": {
				"!type": "+Function"
			},
			"presentingViewController": {
				"!type": "+UIViewController"
			},
			"beingPresented": {
				"!type": "bool"
			},
			"viewLoaded": {
				"!type": "bool"
			},
			"viewIfLoaded": {
				"!type": "+UIView"
			},
			"edgesForExtendedLayout": {
				"!type": "number"
			},
			"disablesAutomaticKeyboardDismissal": {
				"!type": "bool"
			},
			"movingToParentViewController": {
				"!type": "bool"
			},
			"modalViewController": {
				"!type": "+UIViewController"
			},
			"title": {
				"!type": "string"
			},
			"providesPresentationContextTransitionStyle": {
				"!type": "bool"
			},
			"presentedViewController": {
				"!type": "+UIViewController"
			},
			"overrideUserInterfaceStyle": {
				"!type": "number"
			},
			"wantsFullScreenLayout": {
				"!type": "bool"
			},
			"modalPresentationStyle": {
				"!type": "number"
			},
			"modalPresentationCapturesStatusBarAppearance": {
				"!type": "bool"
			},
			"preferredStatusBarUpdateAnimation": {
				"!type": "number"
			},
			"definesPresentationContext": {
				"!type": "bool"
			},
			"prefersStatusBarHidden": {
				"!type": "bool"
			},
			"restoresFocusAfterTransition": {
				"!type": "bool"
			},
			"nibName": {
				"!type": "string"
			},
			"automaticallyAdjustsScrollViewInsets": {
				"!type": "bool"
			},
			"storyboard": {
				"!type": "+UIStoryboard"
			},
			"extendedLayoutIncludesOpaqueBars": {
				"!type": "bool"
			},
			"beingDismissed": {
				"!type": "bool"
			},
			"movingFromParentViewController": {
				"!type": "bool"
			},
			"preferredContentSize": {
				"!type": "+Object"
			},
			"preferredStatusBarStyle": {
				"!type": "number"
			},
			"parentViewController": {
				"!type": "+UIViewController"
			},
			"modalTransitionStyle": {
				"!type": "number"
			},
			"nibBundle": {
				"!type": "+NSBundle"
			},
			"view": {
				"!type": "+UIView"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"initWithActivityItemsApplicationActivities": {
				"!type": "fn(activityItems: +Array, applicationActivities: +Array) -> +UIActivityViewController"
			},
			"performSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> void"
			},
			"initWithNibNameBundle": {
				"!type": "fn(nibNameOrNil: string, nibBundleOrNil: +NSBundle) -> +UIActivityViewController"
			},
			"didReceiveMemoryWarning": {
				"!type": "fn() -> void"
			},
			"prepareForSegueSender": {
				"!type": "fn(segue: +UIStoryboardSegue, sender: +Object) -> void"
			},
			"viewDidAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showDetailViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"shouldPerformSegueWithIdentifierSender": {
				"!type": "fn(identifier: string, sender: +Object) -> bool"
			},
			"dismissModalViewControllerAnimated": {
				"!type": "fn(animated: bool) -> void"
			},
			"canPerformUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"viewDidLoad": {
				"!type": "fn() -> void"
			},
			"viewWillDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"loadViewIfNeeded": {
				"!type": "fn() -> void"
			},
			"segueForUnwindingToViewControllerFromViewControllerIdentifier": {
				"!type": "fn(toViewController: +UIViewController, fromViewController: +UIViewController, identifier: string) -> +UIStoryboardSegue"
			},
			"childViewControllerContainingSegueSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +UIViewController"
			},
			"viewDidLayoutSubviews": {
				"!type": "fn() -> void"
			},
			"presentModalViewControllerAnimated": {
				"!type": "fn(modalViewController: +UIViewController, animated: bool) -> void"
			},
			"viewControllerForUnwindSegueActionFromViewControllerWithSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> +UIViewController"
			},
			"canPerformUnwindSegueActionFromViewControllerSender": {
				"!type": "fn(action: string, fromViewController: +UIViewController, sender: +Object) -> bool"
			},
			"allowedChildViewControllersForUnwindingFromSource": {
				"!type": "fn(source: +UIStoryboardUnwindSegueSource) -> +Array"
			},
			"viewWillUnload": {
				"!type": "fn() -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UIActivityViewController"
			},
			"dismissViewControllerAnimatedCompletion": {
				"!type": "fn(flag: bool, completion: +Function) -> void"
			},
			"loadView": {
				"!type": "fn() -> void"
			},
			"unwindForSegueTowardsViewController": {
				"!type": "fn(unwindSegue: +UIStoryboardSegue, subsequentVC: +UIViewController) -> void"
			},
			"targetViewControllerForActionSender": {
				"!type": "fn(action: string, sender: +Object) -> +UIViewController"
			},
			"viewDidDisappear": {
				"!type": "fn(animated: bool) -> void"
			},
			"viewWillAppear": {
				"!type": "fn(animated: bool) -> void"
			},
			"showViewControllerSender": {
				"!type": "fn(vc: +UIViewController, sender: +Object) -> void"
			},
			"viewDidUnload": {
				"!type": "fn() -> void"
			},
			"presentViewControllerAnimatedCompletion": {
				"!type": "fn(viewControllerToPresent: +UIViewController, flag: bool, completion: +Function) -> void"
			},
			"setNeedsStatusBarAppearanceUpdate": {
				"!type": "fn() -> void"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIActivityViewController"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIGraphicsRendererFormat": {
		"preferredFormat": {
			"!type": "fn() -> +UIGraphicsRendererFormat"
		},
		"defaultFormat": {
			"!type": "fn() -> +UIGraphicsRendererFormat"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIGraphicsRendererFormat"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIGraphicsRendererFormat"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIGraphicsRendererFormat"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"bounds": {
				"!type": "+Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIGraphicsRendererFormat"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSURLProtocol": {
		"requestIsCacheEquivalentToRequest": {
			"!type": "fn(a: +NSURLRequest, b: +NSURLRequest) -> bool"
		},
		"canonicalRequestForRequest": {
			"!type": "fn(request: +NSURLRequest) -> +NSURLRequest"
		},
		"setPropertyForKeyInRequest": {
			"!type": "fn(value: +Object, key: string, request: +NSMutableURLRequest) -> void"
		},
		"registerClass": {
			"!type": "fn(protocolClass: +Object) -> bool"
		},
		"removePropertyForKeyInRequest": {
			"!type": "fn(key: string, request: +NSMutableURLRequest) -> void"
		},
		"propertyForKeyInRequest": {
			"!type": "fn(key: string, request: +NSURLRequest) -> +Object"
		},
		"canInitWithRequest": {
			"!type": "fn(request: +NSURLRequest) -> bool"
		},
		"unregisterClass": {
			"!type": "fn(protocolClass: +Object) -> void"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSURLProtocol"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSURLProtocol"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSURLProtocol"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"cachedResponse": {
				"!type": "+NSCachedURLResponse"
			},
			"client": {
				"!type": "+Object"
			},
			"request": {
				"!type": "+NSURLRequest"
			},
			"startLoading": {
				"!type": "fn() -> void"
			},
			"initWithRequestCachedResponseClient": {
				"!type": "fn(request: +NSURLRequest, cachedResponse: +NSCachedURLResponse, client: +Object) -> +NSURLProtocol"
			},
			"stopLoading": {
				"!type": "fn() -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSURLProtocol"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSCalendar": {
		"currentCalendar": {
			"!type": "fn() -> +NSCalendar"
		},
		"autoupdatingCurrentCalendar": {
			"!type": "fn() -> +NSCalendar"
		},
		"calendarWithIdentifier": {
			"!type": "fn(calendarIdentifierConstant: string) -> +NSCalendar"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSCalendar"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSCalendar"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSCalendar"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"standaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"longEraSymbols": {
				"!type": "+Array"
			},
			"weekdaySymbols": {
				"!type": "+Array"
			},
			"locale": {
				"!type": "+NSLocale"
			},
			"veryShortMonthSymbols": {
				"!type": "+Array"
			},
			"shortQuarterSymbols": {
				"!type": "+Array"
			},
			"shortStandaloneQuarterSymbols": {
				"!type": "+Array"
			},
			"PMSymbol": {
				"!type": "string"
			},
			"shortStandaloneMonthSymbols": {
				"!type": "+Array"
			},
			"eraSymbols": {
				"!type": "+Array"
			},
			"veryShortWeekdaySymbols": {
				"!type": "+Array"
			},
			"AMSymbol": {
				"!type": "string"
			},
			"shortStandaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"timeZone": {
				"!type": "+NSTimeZone"
			},
			"shortWeekdaySymbols": {
				"!type": "+Array"
			},
			"quarterSymbols": {
				"!type": "+Array"
			},
			"shortMonthSymbols": {
				"!type": "+Array"
			},
			"calendarIdentifier": {
				"!type": "string"
			},
			"standaloneMonthSymbols": {
				"!type": "+Array"
			},
			"standaloneQuarterSymbols": {
				"!type": "+Array"
			},
			"minimumDaysInFirstWeek": {
				"!type": "number"
			},
			"veryShortStandaloneMonthSymbols": {
				"!type": "+Array"
			},
			"monthSymbols": {
				"!type": "+Array"
			},
			"veryShortStandaloneWeekdaySymbols": {
				"!type": "+Array"
			},
			"firstWeekday": {
				"!type": "number"
			},
			"ordinalityOfUnitInUnitForDate": {
				"!type": "fn(smaller: number, larger: number, date: +Date) -> number"
			},
			"dateBySettingUnitValueOfDateOptions": {
				"!type": "fn(unit: number, v: number, date: +Date, opts: number) -> +Date"
			},
			"rangeOfUnitStartDateIntervalForDate": {
				"!type": "fn(unit: number, datep: +Object, tip: +Object, date: +Date) -> bool"
			},
			"nextWeekendStartDateIntervalOptionsAfterDate": {
				"!type": "fn(datep: +Object, tip: +Object, options: number, date: +Date) -> bool"
			},
			"dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond": {
				"!type": "fn(eraValue: number, yearValue: number, weekValue: number, weekdayValue: number, hourValue: number, minuteValue: number, secondValue: number, nanosecondValue: number) -> +Date"
			},
			"isDateInWeekend": {
				"!type": "fn(date: +Date) -> bool"
			},
			"dateFromComponents": {
				"!type": "fn(comps: +NSDateComponents) -> +Date"
			},
			"dateByAddingUnitValueToDateOptions": {
				"!type": "fn(unit: number, value: number, date: +Date, options: number) -> +Date"
			},
			"nextDateAfterDateMatchingHourMinuteSecondOptions": {
				"!type": "fn(date: +Date, hourValue: number, minuteValue: number, secondValue: number, options: number) -> +Date"
			},
			"dateByAddingComponentsToDateOptions": {
				"!type": "fn(comps: +NSDateComponents, date: +Date, opts: number) -> +Date"
			},
			"isDateInTomorrow": {
				"!type": "fn(date: +Date) -> bool"
			},
			"maximumRangeOfUnit": {
				"!type": "fn(unit: number) -> +Object"
			},
			"initWithCalendarIdentifier": {
				"!type": "fn(ident: string) -> +Object"
			},
			"dateBySettingHourMinuteSecondOfDateOptions": {
				"!type": "fn(h: number, m: number, s: number, date: +Date, opts: number) -> +Date"
			},
			"componentFromDate": {
				"!type": "fn(unit: number, date: +Date) -> number"
			},
			"componentsFromDateComponentsToDateComponentsOptions": {
				"!type": "fn(unitFlags: number, startingDateComp: +NSDateComponents, resultDateComp: +NSDateComponents, options: number) -> +NSDateComponents"
			},
			"isDateInYesterday": {
				"!type": "fn(date: +Date) -> bool"
			},
			"isDateInSameDayAsDate": {
				"!type": "fn(date1: +Date, date2: +Date) -> bool"
			},
			"getHourMinuteSecondNanosecondFromDate": {
				"!type": "fn(hourValuePointer: +Object, minuteValuePointer: +Object, secondValuePointer: +Object, nanosecondValuePointer: +Object, date: +Date) -> void"
			},
			"startOfDayForDate": {
				"!type": "fn(date: +Date) -> +Date"
			},
			"compareDateToDateToUnitGranularity": {
				"!type": "fn(date1: +Date, date2: +Date, unit: number) -> number"
			},
			"enumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock": {
				"!type": "fn(start: +Date, comps: +NSDateComponents, opts: number, block: +Function) -> void"
			},
			"componentsInTimeZoneFromDate": {
				"!type": "fn(timezone: +NSTimeZone, date: +Date) -> +NSDateComponents"
			},
			"getEraYearMonthDayFromDate": {
				"!type": "fn(eraValuePointer: +Object, yearValuePointer: +Object, monthValuePointer: +Object, dayValuePointer: +Object, date: +Date) -> void"
			},
			"isDateEqualToDateToUnitGranularity": {
				"!type": "fn(date1: +Date, date2: +Date, unit: number) -> bool"
			},
			"dateMatchesComponents": {
				"!type": "fn(date: +Date, components: +NSDateComponents) -> bool"
			},
			"componentsFromDate": {
				"!type": "fn(unitFlags: number, date: +Date) -> +NSDateComponents"
			},
			"getEraYearForWeekOfYearWeekOfYearWeekdayFromDate": {
				"!type": "fn(eraValuePointer: +Object, yearValuePointer: +Object, weekValuePointer: +Object, weekdayValuePointer: +Object, date: +Date) -> void"
			},
			"isDateInToday": {
				"!type": "fn(date: +Date) -> bool"
			},
			"dateWithEraYearMonthDayHourMinuteSecondNanosecond": {
				"!type": "fn(eraValue: number, yearValue: number, monthValue: number, dayValue: number, hourValue: number, minuteValue: number, secondValue: number, nanosecondValue: number) -> +Date"
			},
			"nextDateAfterDateMatchingUnitValueOptions": {
				"!type": "fn(date: +Date, unit: number, value: number, options: number) -> +Date"
			},
			"rangeOfUnitInUnitForDate": {
				"!type": "fn(smaller: number, larger: number, date: +Date) -> +Object"
			},
			"minimumRangeOfUnit": {
				"!type": "fn(unit: number) -> +Object"
			},
			"componentsFromDateToDateOptions": {
				"!type": "fn(unitFlags: number, startingDate: +Date, resultDate: +Date, opts: number) -> +NSDateComponents"
			},
			"nextDateAfterDateMatchingComponentsOptions": {
				"!type": "fn(date: +Date, comps: +NSDateComponents, options: number) -> +Date"
			},
			"rangeOfWeekendStartDateIntervalContainingDate": {
				"!type": "fn(datep: +Object, tip: +Object, date: +Date) -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSCalendar"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIFocusSystem": {
		"focusSystemForEnvironment": {
			"!type": "fn(environment: +Object) -> +UIFocusSystem"
		},
		"environmentContainsEnvironment": {
			"!type": "fn(environment: +Object, otherEnvironment: +Object) -> bool"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIFocusSystem"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIFocusSystem"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIFocusSystem"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"focusedItem": {
				"!type": "+Object"
			},
			"updateFocusIfNeeded": {
				"!type": "fn() -> void"
			},
			"requestFocusUpdateToEnvironment": {
				"!type": "fn(environment: +Object) -> void"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIFocusSystem"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSMethodSignature": {
		"signatureWithObjCTypes": {
			"!type": "fn(types: +Object) -> +NSMethodSignature"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSMethodSignature"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSMethodSignature"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSMethodSignature"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"numberOfArguments": {
				"!type": "number"
			},
			"methodReturnLength": {
				"!type": "number"
			},
			"frameLength": {
				"!type": "number"
			},
			"isOneway": {
				"!type": "fn() -> bool"
			},
			"getArgumentTypeAtIndex": {
				"!type": "fn(idx: number) -> +Object"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSMethodSignature"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"NSRegularExpression": {
		"regularExpressionWithPatternOptionsError": {
			"!type": "fn(pattern: string, options: number, error: +Object) -> +NSRegularExpression"
		},
		"escapedPatternForString": {
			"!type": "fn(string: string) -> string"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +NSRegularExpression"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +NSRegularExpression"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +NSRegularExpression"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"pattern": {
				"!type": "string"
			},
			"options": {
				"!type": "number"
			},
			"numberOfCaptureGroups": {
				"!type": "number"
			},
			"initWithPatternOptionsError": {
				"!type": "fn(pattern: string, options: number, error: +Object) -> +NSRegularExpression"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +NSRegularExpression"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"EAGLSharegroup": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +EAGLSharegroup"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +EAGLSharegroup"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +EAGLSharegroup"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"debugLabel": {
				"!type": "string"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +EAGLSharegroup"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UISegmentedControl": {
		"userInterfaceLayoutDirectionForSemanticContentAttribute": {
			"!type": "fn(attribute: number) -> number"
		},
		"layerClass": {
			"!type": "fn() -> +Object"
		},
		"userInterfaceLayoutDirectionForSemanticContentAttributeRelativeToLayoutDirection": {
			"!type": "fn(semanticContentAttribute: number, layoutDirection: number) -> number"
		},
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UISegmentedControl"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UISegmentedControl"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UISegmentedControl"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"selectedSegmentIndex": {
				"!type": "number"
			},
			"selectedSegmentTintColor": {
				"!type": "+UIColor"
			},
			"numberOfSegments": {
				"!type": "number"
			},
			"segmentedControlStyle": {
				"!type": "number"
			},
			"apportionsSegmentWidthsByContent": {
				"!type": "bool"
			},
			"momentary": {
				"!type": "bool"
			},
			"tracking": {
				"!type": "bool"
			},
			"contentVerticalAlignment": {
				"!type": "number"
			},
			"enabled": {
				"!type": "bool"
			},
			"effectiveContentHorizontalAlignment": {
				"!type": "number"
			},
			"selected": {
				"!type": "bool"
			},
			"contentHorizontalAlignment": {
				"!type": "number"
			},
			"highlighted": {
				"!type": "bool"
			},
			"state": {
				"!type": "number"
			},
			"showsMenuAsPrimaryAction": {
				"!type": "bool"
			},
			"touchInside": {
				"!type": "bool"
			},
			"contextMenuInteractionEnabled": {
				"!type": "bool"
			},
			"allControlEvents": {
				"!type": "number"
			},
			"contextMenuInteraction": {
				"!type": "+UIContextMenuInteraction"
			},
			"allTargets": {
				"!type": "+NSSet"
			},
			"layer": {
				"!type": "+CALayer"
			},
			"canBecomeFocused": {
				"!type": "bool"
			},
			"effectiveUserInterfaceLayoutDirection": {
				"!type": "number"
			},
			"userInteractionEnabled": {
				"!type": "bool"
			},
			"semanticContentAttribute": {
				"!type": "number"
			},
			"tag": {
				"!type": "number"
			},
			"focused": {
				"!type": "bool"
			},
			"focusGroupIdentifier": {
				"!type": "string"
			},
			"undoManager": {
				"!type": "+NSUndoManager"
			},
			"canResignFirstResponder": {
				"!type": "bool"
			},
			"isFirstResponder": {
				"!type": "bool"
			},
			"nextResponder": {
				"!type": "+UIResponder"
			},
			"editingInteractionConfiguration": {
				"!type": "number"
			},
			"canBecomeFirstResponder": {
				"!type": "bool"
			},
			"setContentOffsetForSegmentAtIndex": {
				"!type": "fn(offset: +Object, segment: number) -> void"
			},
			"titleForSegmentAtIndex": {
				"!type": "fn(segment: number) -> string"
			},
			"initWithFrameActions": {
				"!type": "fn(frame: +Object, actions: +Array) -> +UISegmentedControl"
			},
			"segmentIndexForActionIdentifier": {
				"!type": "fn(actionIdentifier: string) -> number"
			},
			"setActionForSegmentAtIndex": {
				"!type": "fn(action: +UIAction, segment: number) -> void"
			},
			"insertSegmentWithActionAtIndexAnimated": {
				"!type": "fn(action: +UIAction, segment: number, animated: bool) -> void"
			},
			"isEnabledForSegmentAtIndex": {
				"!type": "fn(segment: number) -> bool"
			},
			"removeSegmentAtIndexAnimated": {
				"!type": "fn(segment: number, animated: bool) -> void"
			},
			"setTitleTextAttributesForState": {
				"!type": "fn(attributes: +Object, state: number) -> void"
			},
			"setWidthForSegmentAtIndex": {
				"!type": "fn(width: number, segment: number) -> void"
			},
			"setImageForSegmentAtIndex": {
				"!type": "fn(image: +UIImage, segment: number) -> void"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISegmentedControl"
			},
			"insertSegmentWithTitleAtIndexAnimated": {
				"!type": "fn(title: string, segment: number, animated: bool) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISegmentedControl"
			},
			"backgroundImageForStateBarMetrics": {
				"!type": "fn(state: number, barMetrics: number) -> +UIImage"
			},
			"dividerImageForLeftSegmentStateRightSegmentStateBarMetrics": {
				"!type": "fn(leftState: number, rightState: number, barMetrics: number) -> +UIImage"
			},
			"actionForSegmentAtIndex": {
				"!type": "fn(segment: number) -> +UIAction"
			},
			"setContentPositionAdjustmentForSegmentTypeBarMetrics": {
				"!type": "fn(adjustment: +Object, leftCenterRightOrAlone: number, barMetrics: number) -> void"
			},
			"initWithItems": {
				"!type": "fn(items: +Array) -> +UISegmentedControl"
			},
			"insertSegmentWithImageAtIndexAnimated": {
				"!type": "fn(image: +UIImage, segment: number, animated: bool) -> void"
			},
			"setEnabledForSegmentAtIndex": {
				"!type": "fn(enabled: bool, segment: number) -> void"
			},
			"imageForSegmentAtIndex": {
				"!type": "fn(segment: number) -> +UIImage"
			},
			"setBackgroundImageForStateBarMetrics": {
				"!type": "fn(backgroundImage: +UIImage, state: number, barMetrics: number) -> void"
			},
			"setTitleForSegmentAtIndex": {
				"!type": "fn(title: string, segment: number) -> void"
			},
			"removeAllSegments": {
				"!type": "fn() -> void"
			},
			"contentOffsetForSegmentAtIndex": {
				"!type": "fn(segment: number) -> +Object"
			},
			"setDividerImageForLeftSegmentStateRightSegmentStateBarMetrics": {
				"!type": "fn(dividerImage: +UIImage, leftState: number, rightState: number, barMetrics: number) -> void"
			},
			"widthForSegmentAtIndex": {
				"!type": "fn(segment: number) -> number"
			},
			"contentPositionAdjustmentForSegmentTypeBarMetrics": {
				"!type": "fn(leftCenterRightOrAlone: number, barMetrics: number) -> +Object"
			},
			"titleTextAttributesForState": {
				"!type": "fn(state: number) -> +Object"
			},
			"menuAttachmentPointForConfiguration": {
				"!type": "fn(configuration: +UIContextMenuConfiguration) -> +Object"
			},
			"initWithFramePrimaryAction": {
				"!type": "fn(frame: +Object, primaryAction: +UIAction) -> +UISegmentedControl"
			},
			"continueTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"addTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"cancelTrackingWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"enumerateEventHandlers": {
				"!type": "fn(iterator: +Function) -> void"
			},
			"removeActionForIdentifierForControlEvents": {
				"!type": "fn(actionIdentifier: string, controlEvents: number) -> void"
			},
			"endTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> void"
			},
			"beginTrackingWithTouchWithEvent": {
				"!type": "fn(touch: +UITouch, event: +UIEvent) -> bool"
			},
			"actionsForTargetForControlEvent": {
				"!type": "fn(target: +Object, controlEvent: number) -> +Array"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISegmentedControl"
			},
			"addActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"sendActionToForEvent": {
				"!type": "fn(action: string, target: +Object, event: +UIEvent) -> void"
			},
			"sendAction": {
				"!type": "fn(action: +UIAction) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISegmentedControl"
			},
			"removeActionForControlEvents": {
				"!type": "fn(action: +UIAction, controlEvents: number) -> void"
			},
			"removeTargetActionForControlEvents": {
				"!type": "fn(target: +Object, action: string, controlEvents: number) -> void"
			},
			"sendActionsForControlEvents": {
				"!type": "fn(controlEvents: number) -> void"
			},
			"initWithCoder": {
				"!type": "fn(coder: +NSCoder) -> +UISegmentedControl"
			},
			"initWithFrame": {
				"!type": "fn(frame: +Object) -> +UISegmentedControl"
			},
			"motionEndedWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesBeganWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"motionBeganWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"pressesEndedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"targetForActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> +Object"
			},
			"pressesCancelledWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"remoteControlReceivedWithEvent": {
				"!type": "fn(event: +UIEvent) -> void"
			},
			"buildMenuWithBuilder": {
				"!type": "fn(builder: +Object) -> void"
			},
			"canPerformActionWithSender": {
				"!type": "fn(action: string, sender: +Object) -> bool"
			},
			"touchesBeganWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"validateCommand": {
				"!type": "fn(command: +UICommand) -> void"
			},
			"touchesEndedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"pressesChangedWithEvent": {
				"!type": "fn(presses: +NSSet, event: +UIPressesEvent) -> void"
			},
			"touchesMovedWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"motionCancelledWithEvent": {
				"!type": "fn(motion: number, event: +UIEvent) -> void"
			},
			"touchesCancelledWithEvent": {
				"!type": "fn(touches: +NSSet, event: +UIEvent) -> void"
			},
			"resignFirstResponder": {
				"!type": "fn() -> bool"
			},
			"touchesEstimatedPropertiesUpdated": {
				"!type": "fn(touches: +NSSet) -> void"
			},
			"becomeFirstResponder": {
				"!type": "fn() -> bool"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UISegmentedControl"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	},
	"UIDictationPhrase": {
		"load": {
			"!type": "fn() -> void"
		},
		"alloc": {
			"!type": "fn() -> +UIDictationPhrase"
		},
		"mutableCopyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"hash": {
			"!type": "fn() -> number"
		},
		"description": {
			"!type": "fn() -> string"
		},
		"instancesRespondToSelector": {
			"!type": "fn(aSelector: string) -> bool"
		},
		"debugDescription": {
			"!type": "fn() -> string"
		},
		"copyWithZone": {
			"!type": "fn(zone: +Object) -> +Object"
		},
		"conformsToProtocol": {
			"!type": "fn(protocol: +Protocol) -> bool"
		},
		"superclass": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodForSelector": {
			"!type": "fn(aSelector: string) -> +Object"
		},
		"resolveInstanceMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"resolveClassMethod": {
			"!type": "fn(sel: string) -> bool"
		},
		"isSubclassOfClass": {
			"!type": "fn(aClass: +Object) -> bool"
		},
		"allocWithZone": {
			"!type": "fn(zone: +Object) -> +UIDictationPhrase"
		},
		"initialize": {
			"!type": "fn() -> void"
		},
		"jsnew": {
			"!type": "fn() -> +UIDictationPhrase"
		},
		"class": {
			"!type": "fn() -> +Object"
		},
		"instanceMethodSignatureForSelector": {
			"!type": "fn(aSelector: string) -> +NSMethodSignature"
		},
		"prototype": {
			"text": {
				"!type": "string"
			},
			"alternativeInterpretations": {
				"!type": "+Array"
			},
			"forwardingTargetForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"finalize": {
				"!type": "fn() -> void"
			},
			"jsmutableCopy": {
				"!type": "fn() -> +Object"
			},
			"methodSignatureForSelector": {
				"!type": "fn(aSelector: string) -> +NSMethodSignature"
			},
			"methodForSelector": {
				"!type": "fn(aSelector: string) -> +Object"
			},
			"jsinit": {
				"!type": "fn() -> +UIDictationPhrase"
			},
			"forwardInvocation": {
				"!type": "fn(anInvocation: +NSInvocation) -> void"
			},
			"dealloc": {
				"!type": "fn() -> void"
			},
			"doesNotRecognizeSelector": {
				"!type": "fn(aSelector: string) -> void"
			},
			"jscopy": {
				"!type": "fn() -> +Object"
			}
		}
	}
}
